{
  "cqlengine": {
    "apiUrl": "https://vonkhost:4081/$cql",
    "cqlVersion": "1.5"
  },
  "testsRunDateTime": "2025-05-11T14:46:00.540Z",
  "testResultsSummary": {
    "passCount": 1078,
    "skipCount": 41,
    "failCount": 182,
    "errorCount": 265
  },
  "results": [
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AllTrue",
      "testName": "AllTrueAllTrue",
      "invalid": "false",
      "expression": "AllTrue({true,true})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AllTrue",
      "testName": "AllTrueTrueFirst",
      "invalid": "false",
      "expression": "AllTrue({true,false})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AllTrue",
      "testName": "AllTrueFalseFirst",
      "invalid": "false",
      "expression": "AllTrue({false,true})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AllTrue",
      "testName": "AllTrueAllTrueFalseTrue",
      "invalid": "false",
      "expression": "AllTrue({true,false,true})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AllTrue",
      "testName": "AllTrueAllFalseTrueFalse",
      "invalid": "false",
      "expression": "AllTrue({false,true,false})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AllTrue",
      "testName": "AllTrueNullFirst",
      "invalid": "false",
      "expression": "AllTrue({null,true,true})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AllTrue",
      "testName": "AllTrueEmptyList",
      "invalid": "false",
      "expression": "AllTrue({})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AnyTrue",
      "testName": "AnyTrueAllTrue",
      "invalid": "false",
      "expression": "AnyTrue({true,true})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AnyTrue",
      "testName": "AnyTrueAllFalse",
      "invalid": "false",
      "expression": "AnyTrue({false,false})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AnyTrue",
      "testName": "AnyTrueAllTrueFalseTrue",
      "invalid": "false",
      "expression": "AnyTrue({true,false,true})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AnyTrue",
      "testName": "AnyTrueAllFalseTrueFalse",
      "invalid": "false",
      "expression": "AnyTrue({false,true,false})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AnyTrue",
      "testName": "AnyTrueTrueFirst",
      "invalid": "false",
      "expression": "AnyTrue({true,false})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AnyTrue",
      "testName": "AnyTrueFalseFirst",
      "invalid": "false",
      "expression": "AnyTrue({false,true})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AnyTrue",
      "testName": "AnyTrueNullFirstThenTrue",
      "invalid": "false",
      "expression": "AnyTrue({null,true})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AnyTrue",
      "testName": "AnyTrueNullFirstThenFalse",
      "invalid": "false",
      "expression": "AnyTrue({null,false})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "AnyTrue",
      "testName": "AnyTrueEmptyList",
      "invalid": "false",
      "expression": "AnyTrue({})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3",
      "expected": "3.0",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Avg",
      "testName": "AvgTest1",
      "invalid": "false",
      "expression": "Avg({ 1.0, 2.0, 3.0, 6.0 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Count",
      "testName": "CountTest1",
      "invalid": "false",
      "expression": "Count({ 15, 5, 99, null, 1 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3",
      "expected": "3",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Count",
      "testName": "CountTestDateTime",
      "invalid": "false",
      "expression": "Count({ DateTime(2014), DateTime(2001), DateTime(2010) })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3",
      "expected": "3",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Count",
      "testName": "CountTestTime",
      "invalid": "false",
      "expression": "Count({ @T15:59:59.999, @T05:59:59.999, @T20:59:59.999 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Count",
      "testName": "CountTestNull",
      "invalid": "false",
      "expression": "Count({})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "90",
      "expected": "90",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Max",
      "testName": "MaxTestInteger",
      "invalid": "false",
      "expression": "Max({ 5, 12, 1, 15, 0, 4, 90, 44 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "zebra",
      "expected": "'zebra'",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Max",
      "testName": "MaxTestString",
      "invalid": "false",
      "expression": "Max({ 'hi', 'bye', 'zebra' })"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2012-10-06",
      "expected": "DateTime(2012, 10, 6)",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Max",
      "testName": "MaxTestDateTime",
      "invalid": "false",
      "expression": "Max({ DateTime(2012, 10, 5), DateTime(2012, 9, 5), DateTime(2012, 10, 6) })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T20:59:59.999",
      "expected": "@T20:59:59.999",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Max",
      "testName": "MaxTestTime",
      "invalid": "false",
      "expression": "Max({ @T15:59:59.999, @T05:59:59.999, @T20:59:59.999 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3.5",
      "expected": "3.5",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Median",
      "testName": "MedianTestDecimal",
      "invalid": "false",
      "expression": "Median({6.0, 5.0, 4.0, 3.0, 2.0, 1.0})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Min",
      "testName": "MinTestInteger",
      "invalid": "false",
      "expression": "Min({5, 12, 1, 15, 0, 4, 90, 44})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "bye",
      "expected": "'bye'",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Min",
      "testName": "MinTestString",
      "invalid": "false",
      "expression": "Min({'hi', 'bye', 'zebra'})"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2012-09-05",
      "expected": "DateTime(2012, 9, 5)",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Min",
      "testName": "MinTestDateTime",
      "invalid": "false",
      "expression": "Min({ DateTime(2012, 10, 5), DateTime(2012, 9, 5), DateTime(2012, 10, 6) })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T05:59:59.999",
      "expected": "@T05:59:59.999",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Min",
      "testName": "MinTestTime",
      "invalid": "false",
      "expression": "Min({ @T15:59:59.999, @T05:59:59.999, @T20:59:59.999 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "9",
      "expected": "9",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Mode",
      "testName": "ModeTestInteger",
      "invalid": "false",
      "expression": "Mode({ 2, 1, 8, 2, 9, 1, 9, 9 })"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2012-09-05",
      "expected": "DateTime(2012, 9, 5)",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Mode",
      "testName": "ModeTestDateTime",
      "invalid": "false",
      "expression": "Mode({ DateTime(2012, 10, 5), DateTime(2012, 9, 5), DateTime(2012, 10, 6), DateTime(2012, 9, 5) })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T05:59:59.999",
      "expected": "@T05:59:59.999",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Mode",
      "testName": "ModeTestTime",
      "invalid": "false",
      "expression": "Mode({ @T15:59:59.999, @T05:59:59.999, @T20:59:59.999, @T05:59:59.999 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1.4142135623731",
      "expected": "1.41421356",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "PopulationStdDev",
      "testName": "PopStdDevTest1",
      "invalid": "false",
      "expression": "PopulationStdDev({ 1.0, 2.0, 3.0, 4.0, 5.0 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2.0",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "PopulationVariance",
      "testName": "PopVarianceTest1",
      "invalid": "false",
      "expression": "PopulationVariance({ 1.0, 2.0, 3.0, 4.0, 5.0 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1.58113883008419",
      "expected": "1.58113883",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "StdDev",
      "testName": "StdDevTest1",
      "invalid": "false",
      "expression": "StdDev({ 1.0, 2.0, 3.0, 4.0, 5.0 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "20",
      "expected": "20.0",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Sum",
      "testName": "SumTest1",
      "invalid": "false",
      "expression": "Sum({ 6.0, 2.0, 3.0, 4.0, 5.0 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Sum",
      "testName": "SumTestNull",
      "invalid": "false",
      "expression": "Sum({ null, 1, null })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2.5",
      "expected": "2.5",
      "testsName": "CqlAggregateFunctionsTest",
      "groupName": "Variance",
      "testName": "VarianceTest1",
      "invalid": "false",
      "expression": "Variance({ 1.0, 2.0, 3.0, 4.0, 5.0 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "120",
      "expected": "120",
      "testsName": "CqlAggregateTest",
      "groupName": "AggregateTests",
      "testName": "FactorialOfFive",
      "invalid": "false",
      "expression": "({ 1, 2, 3, 4, 5 }) Num aggregate Result starting 1: Result * Num"
    },
    {
      "testStatus": "skip",
      "expected": "TODO",
      "testsName": "CqlAggregateTest",
      "groupName": "AggregateTests",
      "testName": "RolledOutIntervals",
      "invalid": "false",
      "expression": "MedicationRequestIntervals M\n    aggregate R starting (null as List<Interval<DateTime>>): R union ({\n      M X\n        let S: Max({ end of Last(R) + 1 day, start of X }),\n          E: S + duration in days of X\n        return Interval[S, E]\n    })",
      "SkipMessage": "Skipped by config: CQLtoELM - Could not resolve identifier MedicationRequestIntervals in the current library\""
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Abs",
      "testName": "AbsNull",
      "invalid": "false",
      "expression": "Abs(null as Integer)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Abs",
      "testName": "Abs0",
      "invalid": "false",
      "expression": "Abs(0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Abs",
      "testName": "AbsNeg1",
      "invalid": "false",
      "expression": "Abs(-1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Abs",
      "testName": "AbsNeg1Dec",
      "invalid": "false",
      "expression": "Abs(-1.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Abs",
      "testName": "Abs0Dec",
      "invalid": "false",
      "expression": "Abs(0.0)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "1.0'cm'",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Abs",
      "testName": "Abs1cm",
      "invalid": "false",
      "expression": "Abs(-1.0'cm')"
    },
    {
      "testStatus": "error",
      "expected": "1L",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "90",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Abs(-1L)\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Abs",
      "testName": "AbsLong",
      "invalid": "false",
      "expression": "Abs(-1L)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Add",
      "testName": "AddNull",
      "invalid": "false",
      "expression": "1 + null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Add",
      "testName": "Add11",
      "invalid": "false",
      "expression": "1 + 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Add",
      "testName": "Add1D1D",
      "invalid": "false",
      "expression": "1.0 + 1.0"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "2.0'g/cm3'",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Add",
      "testName": "Add1Q1Q",
      "invalid": "false",
      "expression": "1'g/cm3' + 1'g/cm3'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3",
      "expected": "3.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Add",
      "testName": "AddIAndD",
      "invalid": "false",
      "expression": "1 + 2.0"
    },
    {
      "testStatus": "error",
      "expected": "2L",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "89",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"1L + 1L\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Add",
      "testName": "Add1L1L",
      "invalid": "false",
      "expression": "1L + 1L"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ceiling",
      "testName": "CeilingNull",
      "invalid": "false",
      "expression": "Ceiling(null as Decimal)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ceiling",
      "testName": "Ceiling1D",
      "invalid": "false",
      "expression": "Ceiling(1.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ceiling",
      "testName": "Ceiling1D1",
      "invalid": "false",
      "expression": "Ceiling(1.1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ceiling",
      "testName": "CeilingNegD1",
      "invalid": "false",
      "expression": "Ceiling(-0.1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ceiling",
      "testName": "CeilingNeg1",
      "invalid": "false",
      "expression": "Ceiling(-1.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ceiling",
      "testName": "CeilingNeg1D1",
      "invalid": "false",
      "expression": "Ceiling(-1.1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ceiling",
      "testName": "Ceiling1I",
      "invalid": "false",
      "expression": "Ceiling(1)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Divide",
      "testName": "DivideNull",
      "invalid": "false",
      "expression": "1 / null"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Divide",
      "testName": "Divide10",
      "invalid": "false",
      "expression": "1 / 0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Divide",
      "testName": "Divide01",
      "invalid": "false",
      "expression": "0 / 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Divide",
      "testName": "Divide11",
      "invalid": "false",
      "expression": "1 / 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Divide",
      "testName": "Divide1d1d",
      "invalid": "false",
      "expression": "1.0 / 1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3.33333333",
      "expected": "3.33333333",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Divide",
      "testName": "Divide103",
      "invalid": "false",
      "expression": "Round(10 / 3, 8)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "1.0'g/cm3'",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Divide",
      "testName": "Divide1Q1",
      "invalid": "false",
      "expression": "1'g/cm3' / 1.0"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "1.0'1'",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Divide",
      "testName": "Divide1Q1Q",
      "invalid": "false",
      "expression": "1'g/cm3' / 1'g/cm3'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Divide",
      "testName": "Divide10I5D",
      "invalid": "false",
      "expression": "10 / 5.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Divide",
      "testName": "Divide10I5I",
      "invalid": "false",
      "expression": "10 / 5"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "2.0'g'",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Divide",
      "testName": "Divide10Q5I",
      "invalid": "false",
      "expression": "10.0 'g' / 5"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Floor",
      "testName": "FloorNull",
      "invalid": "false",
      "expression": "Floor(null as Decimal)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Floor",
      "testName": "Floor1",
      "invalid": "false",
      "expression": "Floor(1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Floor",
      "testName": "Floor1D",
      "invalid": "false",
      "expression": "Floor(1.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Floor",
      "testName": "Floor1D1",
      "invalid": "false",
      "expression": "Floor(1.1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Floor",
      "testName": "FloorNegD1",
      "invalid": "false",
      "expression": "Floor(-0.1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Floor",
      "testName": "FloorNeg1",
      "invalid": "false",
      "expression": "Floor(-1.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-2",
      "expected": "-2",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Floor",
      "testName": "FloorNeg1D1",
      "invalid": "false",
      "expression": "Floor(-1.1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Floor",
      "testName": "Floor2I",
      "invalid": "false",
      "expression": "Floor(2)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Exp",
      "testName": "ExpNull",
      "invalid": "false",
      "expression": "Exp(null as Decimal)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Exp",
      "testName": "Exp0",
      "invalid": "false",
      "expression": "Exp(0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Exp",
      "testName": "ExpNeg0",
      "invalid": "false",
      "expression": "Exp(-0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2.71828183",
      "expected": "2.71828183",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Exp",
      "testName": "Exp1",
      "invalid": "false",
      "expression": "Round(Exp(1), 8)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0.36787944",
      "expected": "0.36787944",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Exp",
      "testName": "ExpNeg1",
      "invalid": "false",
      "expression": "Round(Exp(-1), 8)"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Exp",
      "testName": "Exp1000",
      "invalid": "true",
      "expression": "Exp(1000)",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Exp",
      "testName": "Exp1000D",
      "invalid": "true",
      "expression": "Exp(1000.0)",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1.58799999",
      "expected": "1.58799999",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "HighBoundary",
      "testName": "HighBoundaryDecimal",
      "invalid": "false",
      "expression": "HighBoundary(1.587, 8)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2014-12",
      "expected": "@2014-12",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "HighBoundary",
      "testName": "HighBoundaryDateMonth",
      "invalid": "false",
      "expression": "HighBoundary(@2014, 6)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2014-01-01T08:59:59.999",
      "expected": "@2014-01-01T08:59:59.999",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "HighBoundary",
      "testName": "HighBoundaryDateTimeMillisecond",
      "invalid": "false",
      "expression": "HighBoundary(@2014-01-01T08, 17)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T10:30:59.999",
      "expected": "@T10:30:59.999",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "HighBoundary",
      "testName": "HighBoundaryTimeMillisecond",
      "invalid": "false",
      "expression": "HighBoundary(@T10:30, 9)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Log",
      "testName": "LogNullNull",
      "invalid": "false",
      "expression": "Log(null, null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Log",
      "testName": "Log1BaseNull",
      "invalid": "false",
      "expression": "Log(1, null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Log",
      "testName": "Log1Base1",
      "invalid": "false",
      "expression": "Log(1, 1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Log",
      "testName": "Log1Base2",
      "invalid": "false",
      "expression": "Log(1, 2)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Log",
      "testName": "Log1Base100",
      "invalid": "false",
      "expression": "Log(1, 100)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Log",
      "testName": "Log16Base2",
      "invalid": "false",
      "expression": "Log(16, 2)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-3",
      "expected": "-3.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Log",
      "testName": "LogD125Base2",
      "invalid": "false",
      "expression": "Log(0.125, 2)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1.587",
      "expected": "1.58700000",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "LowBoundary",
      "testName": "LowBoundaryDecimal",
      "invalid": "false",
      "expression": "LowBoundary(1.587, 8)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2014-01",
      "expected": "@2014-01",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "LowBoundary",
      "testName": "LowBoundaryDateMonth",
      "invalid": "false",
      "expression": "LowBoundary(@2014, 6)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2014-01-01T08:00:00.000",
      "expected": "@2014-01-01T08:00:00.000",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "LowBoundary",
      "testName": "LowBoundaryDateTimeMillisecond",
      "invalid": "false",
      "expression": "LowBoundary(@2014-01-01T08, 17)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T10:30:00.000",
      "expected": "@T10:30:00.000",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "LowBoundary",
      "testName": "LowBoundaryTimeMillisecond",
      "invalid": "false",
      "expression": "LowBoundary(@T10:30, 9)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ln",
      "testName": "LnNull",
      "invalid": "false",
      "expression": "Ln(null)"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ln",
      "testName": "Ln0",
      "invalid": "true",
      "expression": "Ln(0)",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ln",
      "testName": "LnNeg0",
      "invalid": "true",
      "expression": "Ln(-0)",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ln",
      "testName": "Ln1",
      "invalid": "false",
      "expression": "Ln(1)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ln",
      "testName": "LnNeg1",
      "invalid": "false",
      "expression": "Ln(-1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "6.90775528",
      "expected": "6.90775528",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ln",
      "testName": "Ln1000",
      "invalid": "false",
      "expression": "Round(Ln(1000), 8)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "6.90775528",
      "expected": "6.90775528",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Ln",
      "testName": "Ln1000D",
      "invalid": "false",
      "expression": "Round(Ln(1000.0), 8)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-2147483648",
      "expected": "-2147483648",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "MinValue",
      "testName": "IntegerMinValue",
      "invalid": "false",
      "expression": "minimum Integer"
    },
    {
      "testStatus": "error",
      "expected": "-9223372036854775808L",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "94",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"minimum Long\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "MinValue",
      "testName": "LongMinValue",
      "invalid": "false",
      "expression": "minimum Long"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-7.922816251426434e+28",
      "expected": "-99999999999999999999.99999999",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "MinValue",
      "testName": "DecimalMinValue",
      "invalid": "false",
      "expression": "minimum Decimal"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@0001-01-01T00:00:00.000Z",
      "expected": "@0001-01-01T00:00:00.000Z",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "MinValue",
      "testName": "DateTimeMinValue",
      "invalid": "false",
      "expression": "minimum DateTime"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@0001-01-01",
      "expected": "@0001-01-01",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "MinValue",
      "testName": "DateMinValue",
      "invalid": "false",
      "expression": "minimum Date"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@T00:00:00.000Z",
      "expected": "@T00:00:00.000",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "MinValue",
      "testName": "TimeMinValue",
      "invalid": "false",
      "expression": "minimum Time"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2147483647",
      "expected": "2147483647",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "MaxValue",
      "testName": "IntegerMaxValue",
      "invalid": "false",
      "expression": "maximum Integer"
    },
    {
      "testStatus": "error",
      "expected": "9223372036854775807L",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "94",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"maximum Long\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "MaxValue",
      "testName": "LongMaxValue",
      "invalid": "false",
      "expression": "maximum Long"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "7.922816251426434e+28",
      "expected": "99999999999999999999.99999999",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "MaxValue",
      "testName": "DecimalMaxValue",
      "invalid": "false",
      "expression": "maximum Decimal"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@9999-12-31T23:59:59.999Z",
      "expected": "@9999-12-31T23:59:59.999Z",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "MaxValue",
      "testName": "DateTimeMaxValue",
      "invalid": "false",
      "expression": "maximum DateTime"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@9999-12-31",
      "expected": "@9999-12-31",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "MaxValue",
      "testName": "DateMaxValue",
      "invalid": "false",
      "expression": "maximum Date"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@T23:59:59.999Z",
      "expected": "@T23:59:59.999",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "MaxValue",
      "testName": "TimeMaxValue",
      "invalid": "false",
      "expression": "maximum Time"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Modulo",
      "testName": "ModuloNull",
      "invalid": "false",
      "expression": "1 mod null"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Modulo",
      "testName": "Modulo0By0",
      "invalid": "false",
      "expression": "0 mod 0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Modulo",
      "testName": "Modulo4By2",
      "invalid": "false",
      "expression": "4 mod 2"
    },
    {
      "testStatus": "error",
      "expected": "0L",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "91",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"4L mod 2L\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Modulo",
      "testName": "Modulo4LBy2L",
      "invalid": "false",
      "expression": "4L mod 2L"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Modulo",
      "testName": "Modulo4DBy2D",
      "invalid": "false",
      "expression": "4.0 mod 2.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Modulo",
      "testName": "Modulo10By3",
      "invalid": "false",
      "expression": "10 mod 3"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Modulo",
      "testName": "Modulo10DBy3D",
      "invalid": "false",
      "expression": "10.0 mod 3.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Modulo",
      "testName": "Modulo10IBy3D",
      "invalid": "false",
      "expression": "10 mod 3.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0.5",
      "expected": "0.5",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Modulo",
      "testName": "ModuloDResult",
      "invalid": "false",
      "expression": "3.5 mod 3"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "0.5 'cm'",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Modulo",
      "testName": "ModuloQuantity",
      "invalid": "false",
      "expression": "3.5 'cm' mod 3 'cm'"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Multiply",
      "testName": "MultiplyNull",
      "invalid": "false",
      "expression": "1 * null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Multiply",
      "testName": "Multiply1By1",
      "invalid": "false",
      "expression": "1 * 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Multiply",
      "testName": "Multiply1DBy2D",
      "invalid": "false",
      "expression": "1.0 * 2.0"
    },
    {
      "testStatus": "error",
      "expected": "1L",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "88",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"1 * 1L\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Multiply",
      "testName": "Multiply1By1L",
      "invalid": "false",
      "expression": "1 * 1L"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Multiply",
      "testName": "Multiply1IBy2D",
      "invalid": "false",
      "expression": "1 * 2.0"
    },
    {
      "testStatus": "error",
      "expected": "2.0'cm2'",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "101",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"1.0 'cm' * 2.0 'cm'\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Multiply",
      "testName": "Multiply1CMBy2CM",
      "invalid": "false",
      "expression": "1.0 'cm' * 2.0 'cm'"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Negate",
      "testName": "NegateNull",
      "invalid": "false",
      "expression": "-(null as Integer)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Negate",
      "testName": "Negate0",
      "invalid": "false",
      "expression": "-0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Negate",
      "testName": "NegateNeg0",
      "invalid": "false",
      "expression": "-(-0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Negate",
      "testName": "Negate1",
      "invalid": "false",
      "expression": "-1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Negate",
      "testName": "NegateNeg1",
      "invalid": "false",
      "expression": "-(-1)"
    },
    {
      "testStatus": "error",
      "expected": "1L",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "88",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"-(-1L)\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Negate",
      "testName": "NegateNeg1L",
      "invalid": "false",
      "expression": "-(-1L)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Negate",
      "testName": "Negate0D",
      "invalid": "false",
      "expression": "-(0.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Negate",
      "testName": "NegateNeg0D",
      "invalid": "false",
      "expression": "-(-0.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Negate",
      "testName": "Negate1D",
      "invalid": "false",
      "expression": "-(1.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Negate",
      "testName": "NegateNeg1D",
      "invalid": "false",
      "expression": "-(-1.0)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "-1.0'cm'",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Negate",
      "testName": "Negate1CM",
      "invalid": "false",
      "expression": "-(1'cm')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "5",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Precision",
      "testName": "PrecisionDecimal",
      "invalid": "false",
      "expression": "Precision(1.58700)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Precision",
      "testName": "PrecisionYear",
      "invalid": "false",
      "expression": "Precision(@2014)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "17",
      "expected": "17",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Precision",
      "testName": "PrecisionDateTimeMilliseconds",
      "invalid": "false",
      "expression": "Precision(@2014-01-05T10:30:00.000)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Precision",
      "testName": "PrecisionTimeMinutes",
      "invalid": "false",
      "expression": "Precision(@T10:30)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "9",
      "expected": "9",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Precision",
      "testName": "PrecisionTimeMilliseconds",
      "invalid": "false",
      "expression": "Precision(@T10:30:00.000)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Predecessor",
      "testName": "PredecessorNull",
      "invalid": "false",
      "expression": "predecessor of (null as Integer)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Predecessor",
      "testName": "PredecessorOf0",
      "invalid": "false",
      "expression": "predecessor of 0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Predecessor",
      "testName": "PredecessorOf1",
      "invalid": "false",
      "expression": "predecessor of 1"
    },
    {
      "testStatus": "error",
      "expected": "0L",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "99",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"predecessor of 1L\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Predecessor",
      "testName": "PredecessorOf1L",
      "invalid": "false",
      "expression": "predecessor of 1L"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0.99999999",
      "expected": "0.99999999",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Predecessor",
      "testName": "PredecessorOf1D",
      "invalid": "false",
      "expression": "predecessor of 1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1.00999999",
      "expected": "1.00999999",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Predecessor",
      "testName": "PredecessorOf101D",
      "invalid": "false",
      "expression": "predecessor of 1.01"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "0.99999999'cm'",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Predecessor",
      "testName": "PredecessorOf1QCM",
      "invalid": "false",
      "expression": "predecessor of 1.0 'cm'"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@1999-12-31",
      "expected": "@1999-12-31T",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Predecessor",
      "testName": "PredecessorOfJan12000",
      "invalid": "false",
      "expression": "predecessor of DateTime(2000,1,1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T11:59:59.999",
      "expected": "@T11:59:59.999",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Predecessor",
      "testName": "PredecessorOfNoon",
      "invalid": "false",
      "expression": "predecessor of @T12:00:00.000"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Predecessor",
      "testName": "PredecessorUnderflowDt",
      "invalid": "true",
      "expression": "predecessor of DateTime(0001, 1, 1, 0, 0, 0, 0)",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Predecessor",
      "testName": "PredecessorUnderflowT",
      "invalid": "true",
      "expression": "predecessor of @T00:00:00.000",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "PowerNullToNull",
      "invalid": "false",
      "expression": "Power(null as Integer, null as Integer)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "Power0To0",
      "invalid": "false",
      "expression": "Power(0, 0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "Power2To2",
      "invalid": "false",
      "expression": "Power(2, 2)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "PowerNeg2To2",
      "invalid": "false",
      "expression": "Power(-2, 2)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0.25",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "Power2ToNeg2",
      "invalid": "false",
      "expression": "Power(2, -2)"
    },
    {
      "testStatus": "error",
      "expected": "4L",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "95",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Power(2L, 2L)\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "Power2LTo2L",
      "invalid": "false",
      "expression": "Power(2L, 2L)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "Power2DTo2D",
      "invalid": "false",
      "expression": "Power(2.0, 2.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "PowerNeg2DTo2D",
      "invalid": "false",
      "expression": "Power(-2.0, 2.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0.25",
      "expected": "0.25",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "Power2DToNeg2D",
      "invalid": "false",
      "expression": "Power(2.0, -2.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "Power2DTo2",
      "invalid": "false",
      "expression": "Power(2.0, 2)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "Power2To2D",
      "invalid": "false",
      "expression": "Power(2, 2.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "16",
      "expected": "16",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "Power2To4",
      "invalid": "false",
      "expression": "2^4"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "16",
      "expected": "16.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "Power2DTo4D",
      "invalid": "false",
      "expression": "2.0^4.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Power",
      "testName": "Power2DToNeg2DEquivalence",
      "invalid": "false",
      "expression": "Power(2, -2) ~ 0.25"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Round",
      "testName": "RoundNull",
      "invalid": "false",
      "expression": "Round(null as Decimal)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Round",
      "testName": "Round1",
      "invalid": "false",
      "expression": "Round(1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Round",
      "testName": "Round0D5",
      "invalid": "false",
      "expression": "Round(0.5)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Round",
      "testName": "Round0D4",
      "invalid": "false",
      "expression": "Round(0.4)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3.14",
      "expected": "3.14",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Round",
      "testName": "Round3D14159",
      "invalid": "false",
      "expression": "Round(3.14159, 2)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "0.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Round",
      "testName": "RoundNeg0D5",
      "invalid": "false",
      "expression": "Round(-0.5)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Round",
      "testName": "RoundNeg0D4",
      "invalid": "false",
      "expression": "Round(-0.4)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Round",
      "testName": "RoundNeg0D6",
      "invalid": "false",
      "expression": "Round(-0.6)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Round",
      "testName": "RoundNeg1D1",
      "invalid": "false",
      "expression": "Round(-1.1)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-2",
      "expected": "-1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Round",
      "testName": "RoundNeg1D5",
      "invalid": "false",
      "expression": "Round(-1.5)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-2",
      "expected": "-2.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Round",
      "testName": "RoundNeg1D6",
      "invalid": "false",
      "expression": "Round(-1.6)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Subtract",
      "testName": "SubtractNull",
      "invalid": "false",
      "expression": "1 - null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Subtract",
      "testName": "Subtract1And1",
      "invalid": "false",
      "expression": "1 - 1"
    },
    {
      "testStatus": "error",
      "expected": "0L",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "89",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"1L - 1L\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Subtract",
      "testName": "Subtract1LAnd1L",
      "invalid": "false",
      "expression": "1L - 1L"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Subtract",
      "testName": "Subtract1DAnd2D",
      "invalid": "false",
      "expression": "1.0 - 2.0"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "-1.0'cm'",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Subtract",
      "testName": "Subtract1CMAnd2CM",
      "invalid": "false",
      "expression": "1.0 'cm' - 2.0 'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0.9",
      "expected": "0.9",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Subtract",
      "testName": "Subtract2And11D",
      "invalid": "false",
      "expression": "2 - 1.1"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Successor",
      "testName": "SuccessorNull",
      "invalid": "false",
      "expression": "successor of (null as Integer)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Successor",
      "testName": "SuccessorOf0",
      "invalid": "false",
      "expression": "successor of 0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Successor",
      "testName": "SuccessorOf1",
      "invalid": "false",
      "expression": "successor of 1"
    },
    {
      "testStatus": "error",
      "expected": "2L",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "97",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"successor of 1L\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Successor",
      "testName": "SuccessorOf1L",
      "invalid": "false",
      "expression": "successor of 1L"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1.00000001",
      "expected": "1.00000001",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Successor",
      "testName": "SuccessorOf1D",
      "invalid": "false",
      "expression": "successor of 1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1.01000001",
      "expected": "1.01000001",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Successor",
      "testName": "SuccessorOf101D",
      "invalid": "false",
      "expression": "successor of 1.01"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2000-01-02",
      "expected": "@2000-01-02T",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Successor",
      "testName": "SuccessorOfJan12000",
      "invalid": "false",
      "expression": "successor of DateTime(2000,1,1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T12:00:00.001",
      "expected": "@T12:00:00.001",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Successor",
      "testName": "SuccessorOfNoon",
      "invalid": "false",
      "expression": "successor of @T12:00:00.000"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Successor",
      "testName": "SuccessorOverflowDt",
      "invalid": "true",
      "expression": "successor of DateTime(9999, 12, 31, 23, 59, 59, 999)",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Successor",
      "testName": "SuccessorOverflowT",
      "invalid": "true",
      "expression": "successor of @T23:59:59.999",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncate",
      "testName": "TruncateNull",
      "invalid": "false",
      "expression": "Truncate(null as Decimal)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncate",
      "testName": "Truncate0",
      "invalid": "false",
      "expression": "Truncate(0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncate",
      "testName": "Truncate0D0",
      "invalid": "false",
      "expression": "Truncate(0.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncate",
      "testName": "Truncate0D1",
      "invalid": "false",
      "expression": "Truncate(0.1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncate",
      "testName": "Truncate1",
      "invalid": "false",
      "expression": "Truncate(1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncate",
      "testName": "Truncate1D0",
      "invalid": "false",
      "expression": "Truncate(1.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncate",
      "testName": "Truncate1D1",
      "invalid": "false",
      "expression": "Truncate(1.1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncate",
      "testName": "Truncate1D9",
      "invalid": "false",
      "expression": "Truncate(1.9)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncate",
      "testName": "TruncateNeg1",
      "invalid": "false",
      "expression": "Truncate(-1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncate",
      "testName": "TruncateNeg1D0",
      "invalid": "false",
      "expression": "Truncate(-1.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncate",
      "testName": "TruncateNeg1D1",
      "invalid": "false",
      "expression": "Truncate(-1.1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncate",
      "testName": "TruncateNeg1D9",
      "invalid": "false",
      "expression": "Truncate(-1.9)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivideNull",
      "invalid": "false",
      "expression": "(null as Integer) div (null as Integer)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivide2By1",
      "invalid": "false",
      "expression": "2 div 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3",
      "expected": "3",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivide10By3",
      "invalid": "false",
      "expression": "10 div 3"
    },
    {
      "testStatus": "error",
      "expected": "3L",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "92",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"10L div 3L\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivide10LBy3L",
      "invalid": "false",
      "expression": "10L div 3L"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3",
      "expected": "3.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivide10d1By3D1",
      "invalid": "false",
      "expression": "10.1 div 3.1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivideNeg2ByNeg1",
      "invalid": "false",
      "expression": "-2 div -1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3",
      "expected": "3",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivideNeg10ByNeg3",
      "invalid": "false",
      "expression": "-10 div -3"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3",
      "expected": "3.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivideNeg10d1ByNeg3D1",
      "invalid": "false",
      "expression": "-10.1 div -3.1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-2",
      "expected": "-2",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivideNeg2By1",
      "invalid": "false",
      "expression": "-2 div 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-3",
      "expected": "-3",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivideNeg10By3",
      "invalid": "false",
      "expression": "-10 div 3"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-3",
      "expected": "-3.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivideNeg10d1By3D1",
      "invalid": "false",
      "expression": "-10.1 div 3.1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-2",
      "expected": "-2",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivide2ByNeg1",
      "invalid": "false",
      "expression": "2 div -1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-3",
      "expected": "-3",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivide10ByNeg3",
      "invalid": "false",
      "expression": "10 div -3"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-3",
      "expected": "-3.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivide10d1ByNeg3D1",
      "invalid": "false",
      "expression": "10.1 div -3.1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2.0",
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivide10By5D",
      "invalid": "false",
      "expression": "10 div 5.0"
    },
    {
      "testStatus": "error",
      "expected": "-3.0 'cm'",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "105",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"10.1 'cm' div -3.1 'cm'\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlArithmeticFunctionsTest",
      "groupName": "Truncated Divide",
      "testName": "TruncatedDivide10d1ByNeg3D1Quantity",
      "invalid": "false",
      "expression": "10.1 'cm' div -3.1 'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Between",
      "testName": "BetweenIntTrue",
      "invalid": "false",
      "expression": "4 between 2 and 6"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqTrueTrue",
      "invalid": "false",
      "expression": "true = true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqTrueFalse",
      "invalid": "false",
      "expression": "true = false"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqFalseFalse",
      "invalid": "false",
      "expression": "false = false"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqFalseTrue",
      "invalid": "false",
      "expression": "false = true"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqNullNull",
      "invalid": "false",
      "expression": "null as String = null"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqTrueNull",
      "invalid": "false",
      "expression": "true = null"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqNullTrue",
      "invalid": "false",
      "expression": "null = true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqInt1Int1",
      "invalid": "false",
      "expression": "1 = 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqInt1Int2",
      "invalid": "false",
      "expression": "1 = 2"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqStringAStringA",
      "invalid": "false",
      "expression": "'a' = 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqStringAStringB",
      "invalid": "false",
      "expression": "'a' = 'b'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqFloat1Float1",
      "invalid": "false",
      "expression": "1.0 = 1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqFloat1Float2",
      "invalid": "false",
      "expression": "1.0 = 2.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqFloat1Int1",
      "invalid": "false",
      "expression": "1.0 = 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "SimpleEqFloat1Int2",
      "invalid": "false",
      "expression": "1.0 = 2"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "QuantityEqCM1CM1",
      "invalid": "false",
      "expression": "1'cm' = 1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "QuantityEqCM1M01",
      "invalid": "false",
      "expression": "1'cm' = 0.01'm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "QuantityEqDiffPrecision",
      "invalid": "false",
      "expression": "2.0'cm' = 2.00'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "TupleEqJohnJohn",
      "invalid": "false",
      "expression": "Tuple { Id : 1, Name : 'John' } = Tuple { Id : 1, Name : 'John' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "TupleEqJohnJane",
      "invalid": "false",
      "expression": "Tuple { Id : 1, Name : 'John' } = Tuple { Id : 2, Name : 'Jane' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "TupleEqJohn1John2",
      "invalid": "false",
      "expression": "Tuple { Id : 1, Name : 'John' } = Tuple { Id : 2, Name : 'John' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "TupleEqDateTimeTrue",
      "invalid": "false",
      "expression": "Tuple { dateId: 1, Date: DateTime(2012, 10, 5, 0, 0, 0, 0) } = Tuple { dateId: 1, Date: DateTime(2012, 10, 5, 0, 0, 0, 0) }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "TupleEqDateTimeFalse",
      "invalid": "false",
      "expression": "Tuple { dateId: 1, Date: DateTime(2012, 10, 5, 0, 0, 0, 0) } = Tuple { dateId: 1, Date: DateTime(2012, 10, 5, 5, 0, 0, 0) }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "TupleEqTimeTrue",
      "invalid": "false",
      "expression": "Tuple { timeId: 55, TheTime: @T05:15:15.541 } = Tuple { timeId: 55, TheTime: @T05:15:15.541 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "TupleEqTimeFalse",
      "invalid": "false",
      "expression": "Tuple { timeId: 55, TheTime: @T05:15:15.541 } = Tuple { timeId: 55, TheTime: @T05:15:15.540 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "DateTimeEqTodayToday",
      "invalid": "false",
      "expression": "Today() = Today()"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "DateTimeEqTodayYesterday",
      "invalid": "false",
      "expression": "Today() = Today() - 1 days"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "DateTimeEqJanJan",
      "invalid": "false",
      "expression": "DateTime(2014, 1, 5, 5, 0, 0, 0, 0) = DateTime(2014, 1, 5, 5, 0, 0, 0, 0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "DateTimeEqJanJuly",
      "invalid": "false",
      "expression": "DateTime(2014, 1, 5, 5, 0, 0, 0, 0) = DateTime(2014, 7, 5, 5, 0, 0, 0, 0)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "DateTimeEqNull",
      "invalid": "false",
      "expression": "DateTime(null) = DateTime(null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "DateTimeUTC",
      "invalid": "false",
      "expression": "@2014-01-25T14:30:14.559+01:00 = @2014-01-25T14:30:14.559+01:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "DateTimeDayCompare",
      "invalid": "false",
      "expression": "@2022-02-22T00:00:00.000-05:00 same day as @2022-02-22T04:59:00.000Z"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "TimeEq10A10A",
      "invalid": "false",
      "expression": "@T10:00:00.000 = @T10:00:00.000"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equal",
      "testName": "TimeEq10A10P",
      "invalid": "false",
      "expression": "@T10:00:00.000 = @T22:00:00.000"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterZZ",
      "invalid": "false",
      "expression": "0 > 0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterZ1",
      "invalid": "false",
      "expression": "0 > 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterZNeg1",
      "invalid": "false",
      "expression": "0 > -1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterDecZZ",
      "invalid": "false",
      "expression": "0.0 > 0.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterDecZ1",
      "invalid": "false",
      "expression": "0.0 > 1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterDecZNeg1",
      "invalid": "false",
      "expression": "0.0 > -1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterDec1Int2",
      "invalid": "false",
      "expression": "1.0 > 2"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterCM0CM0",
      "invalid": "false",
      "expression": "0'cm' > 0'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterCM0CM1",
      "invalid": "false",
      "expression": "0'cm' > 1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterCM0NegCM1",
      "invalid": "false",
      "expression": "0'cm' > -1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterM1CM1",
      "invalid": "false",
      "expression": "1'm' > 1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterM1CM10",
      "invalid": "false",
      "expression": "1'm' > 10'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterAA",
      "invalid": "false",
      "expression": "'a' > 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterAB",
      "invalid": "false",
      "expression": "'a' > 'b'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterBA",
      "invalid": "false",
      "expression": "'b' > 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterAThanAA",
      "invalid": "false",
      "expression": "'a' > 'aa'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterAAThanA",
      "invalid": "false",
      "expression": "'aa' > 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "GreaterJackJill",
      "invalid": "false",
      "expression": "'Jack' > 'Jill'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "DateTimeGreaterTrue",
      "invalid": "false",
      "expression": "DateTime(2012, 2, 12) > DateTime(2012, 2, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "DateTimeGreaterFalse",
      "invalid": "false",
      "expression": "DateTime(2012, 2, 12) > DateTime(2012, 2, 13)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "TimeGreaterTrue",
      "invalid": "false",
      "expression": "@T10:00:00.001 > @T10:00:00.000"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "TimeGreaterFalse",
      "invalid": "false",
      "expression": "@T10:00:00.000 > @T10:00:00.001"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "UncertaintyGreaterNull",
      "invalid": "false",
      "expression": "DateTime(2014) > DateTime(2014, 2, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "UncertaintyGreaterTrue",
      "invalid": "false",
      "expression": "DateTime(2015) > DateTime(2014, 2, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater",
      "testName": "UncertaintyGreaterFalse",
      "invalid": "false",
      "expression": "DateTime(2013) > DateTime(2014, 2, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualZZ",
      "invalid": "false",
      "expression": "0 >= 0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualZ1",
      "invalid": "false",
      "expression": "0 >= 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualZNeg1",
      "invalid": "false",
      "expression": "0 >= -1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualDecZZ",
      "invalid": "false",
      "expression": "0.0 >= 0.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualDecZ1",
      "invalid": "false",
      "expression": "0.0 >= 1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualDecZNeg1",
      "invalid": "false",
      "expression": "0.0 >= -1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualDec1Int2",
      "invalid": "false",
      "expression": "1.0 >= 2"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualCM0CM0",
      "invalid": "false",
      "expression": "0'cm' >= 0'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualCM0CM1",
      "invalid": "false",
      "expression": "0'cm' >= 1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualCM0NegCM1",
      "invalid": "false",
      "expression": "0'cm' >= -1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualM1CM1",
      "invalid": "false",
      "expression": "1'm' >= 1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualM1CM10",
      "invalid": "false",
      "expression": "1'm' >= 10'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualAA",
      "invalid": "false",
      "expression": "'a' >= 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualAB",
      "invalid": "false",
      "expression": "'a' >= 'b'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualBA",
      "invalid": "false",
      "expression": "'b' >= 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualAThanAA",
      "invalid": "false",
      "expression": "'a' >= 'aa'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualAAThanA",
      "invalid": "false",
      "expression": "'aa' >= 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "GreaterOrEqualJackJill",
      "invalid": "false",
      "expression": "'Jack' >= 'Jill'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "DateTimeGreaterEqTrue",
      "invalid": "false",
      "expression": "DateTime(2012, 2, 12, 0, 0, 0, 0) >= DateTime(2012, 2, 10, 0, 0, 0, 0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "DateTimeGreaterEqTrue2",
      "invalid": "false",
      "expression": "DateTime(2012, 2, 12, 0, 0, 0, 0) >= DateTime(2012, 2, 12, 0, 0, 0, 0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "DateTimeGreaterEqFalse",
      "invalid": "false",
      "expression": "DateTime(2012, 2, 12, 0, 0, 0, 0) >= DateTime(2012, 2, 13, 0, 0, 0, 0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "TimeGreaterEqTrue",
      "invalid": "false",
      "expression": "@T10:00:00.001 >= @T10:00:00.000"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "TimeGreaterEqTrue2",
      "invalid": "false",
      "expression": "@T10:00:00.000 >= @T10:00:00.000"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "TimeGreaterEqFalse",
      "invalid": "false",
      "expression": "@T10:00:00.000 >= @T10:00:00.001"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "UncertaintyGreaterEqualNull",
      "invalid": "false",
      "expression": "DateTime(2014) >= DateTime(2014, 2, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "UncertaintyGreaterEqualTrue",
      "invalid": "false",
      "expression": "DateTime(2015) >= DateTime(2014, 2, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Greater Or Equal",
      "testName": "UncertaintyGreaterEqualFalse",
      "invalid": "false",
      "expression": "DateTime(2013) >= DateTime(2014, 2, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessZZ",
      "invalid": "false",
      "expression": "0 < 0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessZ1",
      "invalid": "false",
      "expression": "0 < 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessZNeg1",
      "invalid": "false",
      "expression": "0 < -1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessDecZZ",
      "invalid": "false",
      "expression": "0.0 < 0.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessDecZ1",
      "invalid": "false",
      "expression": "0.0 < 1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessDecZNeg1",
      "invalid": "false",
      "expression": "0.0 < -1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessDec1Int2",
      "invalid": "false",
      "expression": "1.0 < 2"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessCM0CM0",
      "invalid": "false",
      "expression": "0'cm' < 0'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessCM0CM1",
      "invalid": "false",
      "expression": "0'cm' < 1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessCM0NegCM1",
      "invalid": "false",
      "expression": "0'cm' < -1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessM1CM1",
      "invalid": "false",
      "expression": "1'm' < 1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessM1CM10",
      "invalid": "false",
      "expression": "1'm' < 10'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessAA",
      "invalid": "false",
      "expression": "'a' < 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessAB",
      "invalid": "false",
      "expression": "'a' < 'b'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessBA",
      "invalid": "false",
      "expression": "'b' < 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessAThanAA",
      "invalid": "false",
      "expression": "'a' < 'aa'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessAAThanA",
      "invalid": "false",
      "expression": "'aa' < 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "LessJackJill",
      "invalid": "false",
      "expression": "'Jack' < 'Jill'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "DateTimeLessTrue",
      "invalid": "false",
      "expression": "DateTime(2012, 2, 9) < DateTime(2012, 2, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "DateTimeLessFalse",
      "invalid": "false",
      "expression": "DateTime(2012, 2, 14) < DateTime(2012, 2, 13)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "TimeLessTrue",
      "invalid": "false",
      "expression": "@T10:00:00.001 < @T10:00:00.002"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "TimeLessFalse",
      "invalid": "false",
      "expression": "@T10:10:00.000 < @T10:00:00.001"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "UncertaintyLessNull",
      "invalid": "false",
      "expression": "DateTime(2014) < DateTime(2014, 2, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "UncertaintyLessTrue",
      "invalid": "false",
      "expression": "DateTime(2013) < DateTime(2014, 2, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less",
      "testName": "UncertaintyLessFalse",
      "invalid": "false",
      "expression": "DateTime(2015) < DateTime(2014, 2, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualZZ",
      "invalid": "false",
      "expression": "0 <= 0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualZ1",
      "invalid": "false",
      "expression": "0 <= 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualZNeg1",
      "invalid": "false",
      "expression": "0 <= -1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualDecZZ",
      "invalid": "false",
      "expression": "0.0 <= 0.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualDecZ1",
      "invalid": "false",
      "expression": "0.0 <= 1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualDecZNeg1",
      "invalid": "false",
      "expression": "0.0 <= -1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualDec1Int2",
      "invalid": "false",
      "expression": "1.0 <= 2"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualCM0CM0",
      "invalid": "false",
      "expression": "0'cm' <= 0'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualCM0CM1",
      "invalid": "false",
      "expression": "0'cm' <= 1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualCM0NegCM1",
      "invalid": "false",
      "expression": "0'cm' <= -1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualM1CM1",
      "invalid": "false",
      "expression": "1'm' <= 1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualM1CM10",
      "invalid": "false",
      "expression": "1'm' <= 10'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualAA",
      "invalid": "false",
      "expression": "'a' <= 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualAB",
      "invalid": "false",
      "expression": "'a' <= 'b'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualBA",
      "invalid": "false",
      "expression": "'b' <= 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualAThanAA",
      "invalid": "false",
      "expression": "'a' <= 'aa'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualAAThanA",
      "invalid": "false",
      "expression": "'aa' <= 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "LessOrEqualJackJill",
      "invalid": "false",
      "expression": "'Jack' <= 'Jill'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "DateTimeLessEqTrue",
      "invalid": "false",
      "expression": "DateTime(2012, 2, 9, 0, 0, 0, 0) <= DateTime(2012, 2, 10, 0, 0, 0, 0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "DateTimeLessEqTrue2",
      "invalid": "false",
      "expression": "DateTime(2012, 2, 12, 0, 0, 0, 0) <= DateTime(2012, 2, 12, 0, 0, 0, 0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "DateTimeLessEqFalse",
      "invalid": "false",
      "expression": "DateTime(2012, 2, 12, 1, 0, 0, 0) <= DateTime(2012, 2, 12, 0, 0, 0, 0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "TimeLessEqTrue",
      "invalid": "false",
      "expression": "@T10:00:00.001 <= @T10:00:00.002"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "TimeLessEqTrue2",
      "invalid": "false",
      "expression": "@T10:00:00.000 <= @T10:00:00.000"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "TimeLessEqFalse",
      "invalid": "false",
      "expression": "@T10:00:00.002 <= @T10:00:00.001"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "UncertaintyLessEqualNull",
      "invalid": "false",
      "expression": "DateTime(2014) <= DateTime(2014, 2, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "UncertaintyLessEqualTrue",
      "invalid": "false",
      "expression": "DateTime(2013) <= DateTime(2014, 2, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Less Or Equal",
      "testName": "UncertaintyLessEqualFalse",
      "invalid": "false",
      "expression": "DateTime(2015) <= DateTime(2014, 2, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivTrueTrue",
      "invalid": "false",
      "expression": "true ~ true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivTrueFalse",
      "invalid": "false",
      "expression": "true ~ false"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivFalseFalse",
      "invalid": "false",
      "expression": "false ~ false"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivFalseTrue",
      "invalid": "false",
      "expression": "false ~ true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivNullNull",
      "invalid": "false",
      "expression": "null as String ~ null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivTrueNull",
      "invalid": "false",
      "expression": "true ~ null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivNullTrue",
      "invalid": "false",
      "expression": "null ~ true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivInt1Int1",
      "invalid": "false",
      "expression": "1 ~ 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivInt1Int2",
      "invalid": "false",
      "expression": "1 ~ 2"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivStringAStringA",
      "invalid": "false",
      "expression": "'a' ~ 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivStringAStringB",
      "invalid": "false",
      "expression": "'a' ~ 'b'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivFloat1Float1",
      "invalid": "false",
      "expression": "1.0 ~ 1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivFloat1Float2",
      "invalid": "false",
      "expression": "1.0 ~ 2.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivFloat1Int1",
      "invalid": "false",
      "expression": "1.0 ~ 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivFloat1Int2",
      "invalid": "false",
      "expression": "1.0 ~ 2"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivEqCM1CM1",
      "invalid": "false",
      "expression": "1'cm' ~ 1'cm'"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "false",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivEqCM1M01",
      "invalid": "false",
      "expression": "1'cm' ~ 0.01'm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivTupleJohnJohn",
      "invalid": "false",
      "expression": "Tuple { Id : 1, Name : 'John' } ~ Tuple { Id : 1, Name : 'John' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivTupleJohnJohnWithNulls",
      "invalid": "false",
      "expression": "Tuple { Id : 1, Name : 'John', Position: null } ~ Tuple { Id : 1, Name : 'John', Position: null }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivTupleJohnJane",
      "invalid": "false",
      "expression": "Tuple { Id : 1, Name : 'John' } ~ Tuple { Id : 2, Name : 'Jane' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivTupleJohn1John2",
      "invalid": "false",
      "expression": "Tuple { Id : 1, Name : 'John' } ~ Tuple { Id : 2, Name : 'John' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivDateTimeTodayToday",
      "invalid": "false",
      "expression": "Today() ~ Today()"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivDateTimeTodayYesterday",
      "invalid": "false",
      "expression": "Today() ~ Today() - 1 days"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivTime10A10A",
      "invalid": "false",
      "expression": "@T10:00:00.000 ~ @T10:00:00.000"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivTime10A10P",
      "invalid": "false",
      "expression": "@T10:00:00.000 ~ @T22:00:00.000"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqTrueTrue",
      "invalid": "false",
      "expression": "true != true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqTrueFalse",
      "invalid": "false",
      "expression": "true != false"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqFalseFalse",
      "invalid": "false",
      "expression": "false != false"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqFalseTrue",
      "invalid": "false",
      "expression": "false != true"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqNullNull",
      "invalid": "false",
      "expression": "null as String != null"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqTrueNull",
      "invalid": "false",
      "expression": "true != null"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqNullTrue",
      "invalid": "false",
      "expression": "null != true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqInt1Int1",
      "invalid": "false",
      "expression": "1 != 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqInt1Int2",
      "invalid": "false",
      "expression": "1 != 2"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqStringAStringA",
      "invalid": "false",
      "expression": "'a' != 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqStringAStringB",
      "invalid": "false",
      "expression": "'a' != 'b'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqFloat1Float1",
      "invalid": "false",
      "expression": "1.0 != 1.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqFloat1Float2",
      "invalid": "false",
      "expression": "1.0 != 2.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqFloat1Int1",
      "invalid": "false",
      "expression": "1.0 != 1"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "SimpleNotEqFloat1Int2",
      "invalid": "false",
      "expression": "1.0 != 2"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "QuantityNotEqCM1CM1",
      "invalid": "false",
      "expression": "1'cm' != 1'cm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "QuantityNotEqCM1M01",
      "invalid": "false",
      "expression": "1'cm' != 0.01'm'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "TupleNotEqJohnJohn",
      "invalid": "false",
      "expression": "Tuple{ Id : 1, Name : 'John' } != Tuple{ Id : 1, Name : 'John' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "TupleNotEqJohnJane",
      "invalid": "false",
      "expression": "Tuple{ Id : 1, Name : 'John' } != Tuple{ Id : 2, Name : 'Jane' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "TupleNotEqJohn1John2",
      "invalid": "false",
      "expression": "Tuple{ Id : 1, Name : 'John' } != Tuple{ Id : 2, Name : 'John' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "DateTimeNotEqTodayToday",
      "invalid": "false",
      "expression": "Today() != Today()"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "DateTimeNotEqTodayYesterday",
      "invalid": "false",
      "expression": "Today() != Today() - 1 days"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "TimeNotEq10A10A",
      "invalid": "false",
      "expression": "@T10:00:00.000 != @T10:00:00.000"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlComparisonOperatorsTest",
      "groupName": "Not Equal",
      "testName": "TimeNotEq10A10P",
      "invalid": "false",
      "expression": "@T10:00:00.000 != @T22:00:00.000"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "5",
      "testsName": "CqlConditionalOperatorsTest",
      "groupName": "if-then-else",
      "testName": "IfTrue1",
      "invalid": "false",
      "expression": "if 10 > 5 then 5 else 10"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "5",
      "testsName": "CqlConditionalOperatorsTest",
      "groupName": "if-then-else",
      "testName": "IfFalse1",
      "invalid": "false",
      "expression": "if 10 = 5 then 10 + 5 else 10 - 5"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "10",
      "expected": "10",
      "testsName": "CqlConditionalOperatorsTest",
      "groupName": "if-then-else",
      "testName": "IfNull1",
      "invalid": "false",
      "expression": "if 10 = null then 5 else 10"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "5",
      "testsName": "CqlConditionalOperatorsTest",
      "groupName": "standard case",
      "testName": "StandardCase1",
      "invalid": "false",
      "expression": "case\n\t\t\t\t\twhen 10 > 5 then 5\n\t\t\t\t\twhen 5 > 10 then 10\n\t\t\t\t\telse null\n\t\t\t\tend"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "5",
      "testsName": "CqlConditionalOperatorsTest",
      "groupName": "standard case",
      "testName": "StandardCase2",
      "invalid": "false",
      "expression": "case\n\t\t\t\t\twhen 5 > 10 then 5 + 10\n\t\t\t\t\twhen 5 = 10 then 10\n\t\t\t\t\telse 10 - 5\n\t\t\t\tend"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "15",
      "expected": "15",
      "testsName": "CqlConditionalOperatorsTest",
      "groupName": "standard case",
      "testName": "StandardCase3",
      "invalid": "false",
      "expression": "case\n\t\t\t\t\twhen null ~ 10 then null + 10\n\t\t\t\t\twhen null ~ 5 then 5\n\t\t\t\t\telse 5 + 10\n\t\t\t\tend"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "12",
      "expected": "12",
      "testsName": "CqlConditionalOperatorsTest",
      "groupName": "selected case",
      "testName": "SelectedCase1",
      "invalid": "false",
      "expression": "case 5\n\t\t\t\t\twhen 5 then 12\n\t\t\t\t\twhen 10 then 10 + 5\n\t\t\t\t\telse 10 - 5\n\t\t\t\tend"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "15",
      "expected": "15",
      "testsName": "CqlConditionalOperatorsTest",
      "groupName": "selected case",
      "testName": "SelectedCase2",
      "invalid": "false",
      "expression": "case 10\n\t\t\t\t\twhen 5 then 12\n\t\t\t\t\twhen 10 then 10 + 5\n\t\t\t\t\telse 10 - 5\n\t\t\t\tend"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "5",
      "testsName": "CqlConditionalOperatorsTest",
      "groupName": "selected case",
      "testName": "SelectedCase3",
      "invalid": "false",
      "expression": "case 10 + 5\n\t\t\t\t\twhen 5 then 12\n\t\t\t\t\twhen 10 then 10 + 5\n\t\t\t\t\telse 10 - 5\n\t\t\t\tend"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2010-10-10",
      "expected": "@2010-10-10T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAdd5Years",
      "invalid": "false",
      "expression": "DateTime(2005, 10, 10) + 5 years"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAddInvalidYears",
      "invalid": "true",
      "expression": "DateTime(2005, 10, 10) + 8000 years",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2005-10-10",
      "expected": "@2005-10-10T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAdd5Months",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10) + 5 months"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2006-03-10",
      "expected": "@2006-03-10T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAddMonthsOverflow",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10) + 10 months"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2005-05-15",
      "expected": "@2005-05-15T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAdd5Days",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10) + 5 days"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2016-07-01",
      "expected": "@2016-07-01T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAddDaysOverflow",
      "invalid": "false",
      "expression": "DateTime(2016, 6, 10) + 21 days"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2005-05-10T10Z",
      "expected": "@2005-05-10T10",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAdd5Hours",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10, 5) + 5 hours"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2016-06-11T00Z",
      "expected": "@2016-06-11T00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAddHoursOverflow",
      "invalid": "false",
      "expression": "DateTime(2016, 6, 10, 5) + 19 hours"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2005-05-10T05:10Z",
      "expected": "@2005-05-10T05:10",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAdd5Minutes",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10, 5, 5) + 5 minutes"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2016-06-10T06:00Z",
      "expected": "@2016-06-10T06:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAddMinutesOverflow",
      "invalid": "false",
      "expression": "DateTime(2016, 6, 10, 5, 5) + 55 minutes"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2005-05-10T05:05:10Z",
      "expected": "@2005-05-10T05:05:10",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAdd5Seconds",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10, 5, 5, 5) + 5 seconds"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2016-06-10T05:06:00Z",
      "expected": "@2016-06-10T05:06:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAddSecondsOverflow",
      "invalid": "false",
      "expression": "DateTime(2016, 6, 10, 5, 5, 5) + 55 seconds"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2005-05-10T05:05:05.010Z",
      "expected": "@2005-05-10T05:05:05.010",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAdd5Milliseconds",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10, 5, 5, 5, 5) + 5 milliseconds"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2016-06-10T05:05:06.000Z",
      "expected": "@2016-06-10T05:05:06.000",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAddMillisecondsOverflow",
      "invalid": "false",
      "expression": "DateTime(2016, 6, 10, 5, 5, 5, 5) + 995 milliseconds"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2013-02-28",
      "expected": "@2013-02-28T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAddLeapYear",
      "invalid": "false",
      "expression": "DateTime(2012, 2, 29) + 1 year"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2016T",
      "expected": "@2016T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAdd2YearsByMonths",
      "invalid": "false",
      "expression": "DateTime(2014) + 24 months"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2016T",
      "expected": "@2016T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAdd2YearsByDays",
      "invalid": "false",
      "expression": "DateTime(2014) + 730 days"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2016T",
      "expected": "@2016T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "DateTimeAdd2YearsByDaysRem5Days",
      "invalid": "false",
      "expression": "DateTime(2014) + 735 days"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T20:59:59.999",
      "expected": "@T20:59:59.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "TimeAdd5Hours",
      "invalid": "false",
      "expression": "@T15:59:59.999 + 5 hours"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T16:00:59.999",
      "expected": "@T16:00:59.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "TimeAdd1Minute",
      "invalid": "false",
      "expression": "@T15:59:59.999 + 1 minute"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T16:00:00.999",
      "expected": "@T16:00:00.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "TimeAdd1Second",
      "invalid": "false",
      "expression": "@T15:59:59.999 + 1 seconds"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T16:00:00.000",
      "expected": "@T16:00:00.000",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "TimeAdd1Millisecond",
      "invalid": "false",
      "expression": "@T15:59:59.999 + 1 milliseconds"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T21:00:59.999",
      "expected": "@T21:00:59.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "TimeAdd5Hours1Minute",
      "invalid": "false",
      "expression": "@T15:59:59.999 + 5 hours + 1 minutes"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T20:59:59.999",
      "expected": "@T20:59:59.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Add",
      "testName": "TimeAdd5hoursByMinute",
      "invalid": "false",
      "expression": "@T15:59:59.999 + 300 minutes"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterYearTrue",
      "invalid": "false",
      "expression": "DateTime(2005, 10, 10) after year of DateTime(2004, 10, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterYearFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 11, 10) after year of DateTime(2004, 10, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterMonthTrue",
      "invalid": "false",
      "expression": "DateTime(2004, 12, 10) after month of DateTime(2004, 11, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterMonthFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 9, 10) after month of DateTime(2004, 10, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterDayTrue",
      "invalid": "false",
      "expression": "DateTime(2004, 12, 11) after day of DateTime(2004, 10, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterDayTrue2",
      "invalid": "false",
      "expression": "DateTime(2004, 12, 09) after day of DateTime(2003, 10, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterDayFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 9) after day of DateTime(2004, 10, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterHourTrue",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 10) after hour of DateTime(2004, 10, 10, 5)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterHourFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20) after hour of DateTime(2004, 10, 10, 21)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterMinuteTrue",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20, 30) after minute of DateTime(2004, 10, 10, 20, 29)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterMinuteFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20, 30) after minute of DateTime(2004, 10, 10, 20, 31)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterSecondTrue",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20, 30, 15) after second of DateTime(2004, 10, 10, 20, 30, 14)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterSecondFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20, 30, 15) after second of DateTime(2004, 10, 10, 20, 30, 16)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterMillisecondTrue",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20, 30, 15, 512) after millisecond of DateTime(2004, 10, 10, 20, 30, 15, 510)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterMillisecondFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20, 30, 15, 512) after millisecond of DateTime(2004, 10, 10, 20, 30, 15, 513)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterUncertain",
      "invalid": "false",
      "expression": "DateTime(2005, 10, 10) after day of DateTime(2005, 9)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "AfterTimezoneTrue",
      "invalid": "false",
      "expression": "@2012-03-10T10:20:00.999+07:00 after hour of @2012-03-10T08:20:00.999+06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "AfterTimezoneFalse",
      "invalid": "false",
      "expression": "@2012-03-10T10:20:00.999+07:00 after hour of @2012-03-10T10:20:00.999+06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "TimeAfterHourTrue",
      "invalid": "false",
      "expression": "@T15:59:59.999 after hour of @T14:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "TimeAfterHourFalse",
      "invalid": "false",
      "expression": "@T15:59:59.999 after hour of @T16:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "TimeAfterMinuteTrue",
      "invalid": "false",
      "expression": "@T15:59:59.999 after minute of @T15:58:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "TimeAfterMinuteFalse",
      "invalid": "false",
      "expression": "@T15:58:59.999 after minute of @T15:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "TimeAfterSecondTrue",
      "invalid": "false",
      "expression": "@T15:59:59.999 after second of @T15:59:58.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "TimeAfterSecondFalse",
      "invalid": "false",
      "expression": "@T15:59:58.999 after second of @T15:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "TimeAfterMillisecondTrue",
      "invalid": "false",
      "expression": "@T15:59:59.999 after millisecond of @T15:59:59.998"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "TimeAfterMillisecondFalse",
      "invalid": "false",
      "expression": "@T15:59:59.998 after millisecond of @T15:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "After",
      "testName": "TimeAfterTimeCstor",
      "invalid": "false",
      "expression": "Time(12, 30) after hour of Time(11, 55)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeYearTrue",
      "invalid": "false",
      "expression": "DateTime(2003) before year of DateTime(2004, 10, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeYearFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 11, 10) before year of DateTime(2003, 10, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeMonthTrue",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10) before month of DateTime(2004, 11, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeMonthFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 11, 10) before month of DateTime(2004, 10, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeDayTrue",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 1) before day of DateTime(2004, 10, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeDayTrue2",
      "invalid": "false",
      "expression": "DateTime(2003, 10, 11) before day of DateTime(2004, 10, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeDayFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 11) before day of DateTime(2004, 10, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeHourTrue",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 1) before hour of DateTime(2004, 10, 10, 5)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeHourFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 23) before hour of DateTime(2004, 10, 10, 21)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeMinuteTrue",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20, 28) before minute of DateTime(2004, 10, 10, 20, 29)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeMinuteFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20, 35) before minute of DateTime(2004, 10, 10, 20, 31)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeSecondTrue",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20, 30, 12) before second of DateTime(2004, 10, 10, 20, 30, 14)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeSecondFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20, 30, 55) before second of DateTime(2004, 10, 10, 20, 30, 16)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeMillisecondTrue",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20, 30, 15, 508) before millisecond of DateTime(2004, 10, 10, 20, 30, 15, 510)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeMillisecondFalse",
      "invalid": "false",
      "expression": "DateTime(2004, 10, 10, 20, 30, 15, 599) before millisecond of DateTime(2004, 10, 10, 20, 30, 15, 513)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "BeforeTimezoneTrue",
      "invalid": "false",
      "expression": "@2012-03-10T10:20:00.999+07:00 before hour of @2012-03-10T10:20:00.999+06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "BeforeTimezoneFalse",
      "invalid": "false",
      "expression": "@2012-03-10T10:20:00.999+07:00 before hour of @2012-03-10T09:20:00.999+06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "TimeBeforeHourTrue",
      "invalid": "false",
      "expression": "@T13:59:59.999 before hour of @T14:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "TimeBeforeHourFalse",
      "invalid": "false",
      "expression": "@T16:59:59.999 before hour of @T15:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "TimeBeforeMinuteTrue",
      "invalid": "false",
      "expression": "@T15:57:59.999 before minute of @T15:58:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "TimeBeforeMinuteFalse",
      "invalid": "false",
      "expression": "@T15:59:59.999 before minute of @T15:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "TimeBeforeSecondTrue",
      "invalid": "false",
      "expression": "@T15:59:57.999 before second of @T15:59:58.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "TimeBeforeSecondFalse",
      "invalid": "false",
      "expression": "@T15:59:56.999 before second of @T15:59:55.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "TimeBeforeMillisecondTrue",
      "invalid": "false",
      "expression": "@T15:59:59.997 before millisecond of @T15:59:59.998"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Before",
      "testName": "TimeBeforeMillisecondFalse",
      "invalid": "false",
      "expression": "@T15:59:59.998 before millisecond of @T15:59:59.997"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2003T",
      "expected": "@2003T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTime",
      "testName": "DateTimeYear",
      "invalid": "false",
      "expression": "DateTime(2003)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2003-10T",
      "expected": "@2003-10T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTime",
      "testName": "DateTimeMonth",
      "invalid": "false",
      "expression": "DateTime(2003, 10)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2003-10-29",
      "expected": "@2003-10-29T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTime",
      "testName": "DateTimeDay",
      "invalid": "false",
      "expression": "DateTime(2003, 10, 29)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2003-10-29T20",
      "expected": "@2003-10-29T20",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTime",
      "testName": "DateTimeHour",
      "invalid": "false",
      "expression": "DateTime(2003, 10, 29, 20)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2003-10-29T20:50",
      "expected": "@2003-10-29T20:50",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTime",
      "testName": "DateTimeMinute",
      "invalid": "false",
      "expression": "DateTime(2003, 10, 29, 20, 50)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2003-10-29T20:50:33",
      "expected": "@2003-10-29T20:50:33",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTime",
      "testName": "DateTimeSecond",
      "invalid": "false",
      "expression": "DateTime(2003, 10, 29, 20, 50, 33)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2003-10-29T20:50:33.955",
      "expected": "@2003-10-29T20:50:33.955",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTime",
      "testName": "DateTimeMillisecond",
      "invalid": "false",
      "expression": "DateTime(2003, 10, 29, 20, 50, 33, 955)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2003",
      "expected": "2003",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "DateTimeComponentFromYear",
      "invalid": "false",
      "expression": "year from DateTime(2003, 10, 29, 20, 50, 33, 955)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "10",
      "expected": "10",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "DateTimeComponentFromMonth",
      "invalid": "false",
      "expression": "month from DateTime(2003, 10, 29, 20, 50, 33, 955)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "DateTimeComponentFromMonthMinBoundary",
      "invalid": "false",
      "expression": "month from DateTime(2003, 01, 29, 20, 50, 33, 955)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "29",
      "expected": "29",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "DateTimeComponentFromDay",
      "invalid": "false",
      "expression": "day from DateTime(2003, 10, 29, 20, 50, 33, 955)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "20",
      "expected": "20",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "DateTimeComponentFromHour",
      "invalid": "false",
      "expression": "hour from DateTime(2003, 10, 29, 20, 50, 33, 955)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "50",
      "expected": "50",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "DateTimeComponentFromMinute",
      "invalid": "false",
      "expression": "minute from DateTime(2003, 10, 29, 20, 50, 33, 955)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "33",
      "expected": "33",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "DateTimeComponentFromSecond",
      "invalid": "false",
      "expression": "second from DateTime(2003, 10, 29, 20, 50, 33, 955)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "955",
      "expected": "955",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "DateTimeComponentFromMillisecond",
      "invalid": "false",
      "expression": "millisecond from DateTime(2003, 10, 29, 20, 50, 33, 955)"
    },
    {
      "testStatus": "skip",
      "expected": "1.00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "DateTimeComponentFromTimezone",
      "invalid": "false",
      "expression": "timezone from DateTime(2003, 10, 29, 20, 50, 33, 955, 1)",
      "SkipMessage": "Skipped by config: CQLtoElm - Timezone keyword is only valid in 1.3 or lower\""
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2003-10-29",
      "expected": "@2003-10-29",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "DateTimeComponentFromDate",
      "invalid": "false",
      "expression": "date from DateTime(2003, 10, 29, 20, 50, 33, 955, 1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "23",
      "expected": "23",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "TimeComponentFromHour",
      "invalid": "false",
      "expression": "hour from @T23:20:15.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "20",
      "expected": "20",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "TimeComponentFromMinute",
      "invalid": "false",
      "expression": "minute from @T23:20:15.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "15",
      "expected": "15",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "TimeComponentFromSecond",
      "invalid": "false",
      "expression": "second from @T23:20:15.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "555",
      "expected": "555",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "DateTimeComponentFrom",
      "testName": "TimeComponentFromMilli",
      "invalid": "false",
      "expression": "millisecond from @T23:20:15.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "5",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "DateTimeDifferenceYear",
      "invalid": "false",
      "expression": "difference in years between DateTime(2000) and DateTime(2005, 12)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "8",
      "expected": "8",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "DateTimeDifferenceMonth",
      "invalid": "false",
      "expression": "difference in months between DateTime(2000, 2) and DateTime(2000, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "10",
      "expected": "10",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "DateTimeDifferenceDay",
      "invalid": "false",
      "expression": "difference in days between DateTime(2000, 10, 15, 10, 30) and DateTime(2000, 10, 25, 10, 0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "8",
      "expected": "8",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "DateTimeDifferenceHour",
      "invalid": "false",
      "expression": "difference in hours between DateTime(2000, 4, 1, 12) and DateTime(2000, 4, 1, 20)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "9",
      "expected": "9",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "DateTimeDifferenceMinute",
      "invalid": "false",
      "expression": "difference in minutes between DateTime(2005, 12, 10, 5, 16) and DateTime(2005, 12, 10, 5, 25)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "5",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "DateTimeDifferenceSecond",
      "invalid": "false",
      "expression": "difference in seconds between DateTime(2000, 10, 10, 10, 5, 45) and DateTime(2000, 10, 10, 10, 5, 50)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3600400",
      "expected": "3600400",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "DateTimeDifferenceMillisecond",
      "invalid": "false",
      "expression": "difference in milliseconds between DateTime(2000, 10, 10, 10, 5, 45, 500, -6.0) and DateTime(2000, 10, 10, 10, 5, 45, 900, -7.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "DateTimeDifferenceWeeks",
      "invalid": "false",
      "expression": "difference in weeks between DateTime(2000, 10, 15) and DateTime(2000, 10, 28)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "DateTimeDifferenceWeeks2",
      "invalid": "false",
      "expression": "difference in weeks between DateTime(2000, 10, 15) and DateTime(2000, 10, 29)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "DateTimeDifferenceWeeks3",
      "invalid": "false",
      "expression": "difference in weeks between @2012-03-10T22:05:09 and @2012-03-24T07:19:33"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-18",
      "expected": "-18",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "DateTimeDifferenceNegative",
      "invalid": "false",
      "expression": "difference in years between DateTime(2016) and DateTime(1998)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "DateTimeDifferenceUncertain",
      "invalid": "false",
      "expression": "difference in months between DateTime(2005) and DateTime(2006, 7) > 5"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3",
      "expected": "3",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "TimeDifferenceHour",
      "invalid": "false",
      "expression": "difference in hours between @T20 and @T23:25:15.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "5",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "TimeDifferenceMinute",
      "invalid": "false",
      "expression": "difference in minutes between @T20:20:15.555 and @T20:25:15.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "5",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "TimeDifferenceSecond",
      "invalid": "false",
      "expression": "difference in seconds between @T20:20:15.555 and @T20:20:20.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-5",
      "expected": "-5",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Difference",
      "testName": "TimeDifferenceMillis",
      "invalid": "false",
      "expression": "difference in milliseconds between @T20:20:15.555 and @T20:20:15.550"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2017-03-12T01:00:00-07:00",
      "expected": "@2017-03-12T01:00:00-07:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DateTimeA",
      "invalid": "false",
      "expression": "@2017-03-12T01:00:00-07:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2017-03-12T01:00:00.000-07:00",
      "expected": "@2017-03-12T01:00:00.000-07:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DateTimeAA",
      "invalid": "false",
      "expression": "DateTime(2017, 3, 12, 1, 0, 0, 0, -7.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2017-03-12T03:00:00-06:00",
      "expected": "@2017-03-12T03:00:00-06:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DateTimeB",
      "invalid": "false",
      "expression": "@2017-03-12T03:00:00-06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2017-03-12T03:00:00.000-06:00",
      "expected": "@2017-03-12T03:00:00.000-06:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DateTimeBB",
      "invalid": "false",
      "expression": "DateTime(2017, 3, 12, 3, 0, 0, 0, -6.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2017-11-05T01:30:00-06:00",
      "expected": "@2017-11-05T01:30:00-06:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DateTimeC",
      "invalid": "false",
      "expression": "@2017-11-05T01:30:00-06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2017-11-05T01:30:00.000-06:00",
      "expected": "@2017-11-05T01:30:00.000-06:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DateTimeCC",
      "invalid": "false",
      "expression": "DateTime(2017, 11, 5, 1, 30, 0, 0, -6.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2017-11-05T01:15:00-07:00",
      "expected": "@2017-11-05T01:15:00-07:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DateTimeD",
      "invalid": "false",
      "expression": "@2017-11-05T01:15:00-07:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2017-11-05T01:15:00.000-07:00",
      "expected": "@2017-11-05T01:15:00.000-07:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DateTimeDD",
      "invalid": "false",
      "expression": "DateTime(2017, 11, 5, 1, 15, 0, 0, -7.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2017-03-12T00:00:00-07:00",
      "expected": "@2017-03-12T00:00:00-07:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DateTimeE",
      "invalid": "false",
      "expression": "@2017-03-12T00:00:00-07:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2017-03-12T00:00:00.000-07:00",
      "expected": "@2017-03-12T00:00:00.000-07:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DateTimeEE",
      "invalid": "false",
      "expression": "DateTime(2017, 3, 12, 0, 0, 0, 0, -7.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2017-03-13T00:00:00-06:00",
      "expected": "@2017-03-13T00:00:00-06:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DateTimeF",
      "invalid": "false",
      "expression": "@2017-03-13T00:00:00-06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2017-03-13T00:00:00.000-06:00",
      "expected": "@2017-03-13T00:00:00.000-06:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DateTimeFF",
      "invalid": "false",
      "expression": "DateTime(2017, 3, 13, 0, 0, 0, 0, -6.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DifferenceInHoursA",
      "invalid": "false",
      "expression": "difference in hours between @2017-03-12T01:00:00-07:00 and @2017-03-12T03:00:00-06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "45",
      "expected": "45",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DifferenceInMinutesA",
      "invalid": "false",
      "expression": "difference in minutes between @2017-11-05T01:30:00-06:00 and @2017-11-05T01:15:00-07:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DifferenceInDaysA",
      "invalid": "false",
      "expression": "difference in days between @2017-03-12T00:00:00-07:00 and @2017-03-13T00:00:00-06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DifferenceInHoursAA",
      "invalid": "false",
      "expression": "difference in hours between DateTime(2017, 3, 12, 1, 0, 0, 0, -7.0) and DateTime(2017, 3, 12, 3, 0, 0, 0, -6.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "45",
      "expected": "45",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DifferenceInMinutesAA",
      "invalid": "false",
      "expression": "difference in minutes between DateTime(2017, 11, 5, 1, 30, 0, 0, -6.0) and DateTime(2017, 11, 5, 1, 15, 0, 0, -7.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "From Github issue #29",
      "testName": "DifferenceInDaysAA",
      "invalid": "false",
      "expression": "difference in days between DateTime(2017, 3, 12, 0, 0, 0, 0, -7.0) and DateTime(2017, 3, 13, 0, 0, 0, 0, -6.0)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "5",
      "expected": "Interval[ 4, 5 ]",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Duration",
      "testName": "DateTimeDurationBetweenYear",
      "invalid": "false",
      "expression": "years between DateTime(2005) and DateTime(2010)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Duration",
      "testName": "DateTimeDurationBetweenYearOffset",
      "invalid": "false",
      "expression": "years between DateTime(2005, 5) and DateTime(2010, 4)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Duration",
      "testName": "DateTimeDurationBetweenMonth",
      "invalid": "false",
      "expression": "months between @2014-01-31 and @2014-02-01"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-788",
      "expected": "-788",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Duration",
      "testName": "DateTimeDurationBetweenDaysDiffYears",
      "invalid": "false",
      "expression": "days between DateTime(2010, 10, 12, 12, 5) and DateTime(2008, 8, 15, 8, 8)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "17",
      "expected": "Interval[ 16, 44 ]",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenUncertainInterval",
      "invalid": "false",
      "expression": "days between DateTime(2014, 1, 15) and DateTime(2014, 2)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "16",
      "expected": "Interval[ 4, 16 ]",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenUncertainInterval2",
      "invalid": "false",
      "expression": "months between DateTime(2005) and DateTime(2006, 5)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "34",
      "expected": "Interval[ 32, 88 ]",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenUncertainAdd",
      "invalid": "false",
      "expression": "(days between DateTime(2014, 1, 15) and DateTime(2014, 2))\n\t\t\t\t+ (days between DateTime(2014, 1, 15) and DateTime(2014, 2))"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1",
      "expected": "Interval[ 0, 40 ]",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenUncertainSubtract",
      "invalid": "false",
      "expression": "(days between DateTime(2014, 1, 15) and DateTime(2014, 2))\n\t\t\t\t- (months between DateTime(2005) and DateTime(2006, 5))"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "289",
      "expected": "Interval[ 256, 1936 ]",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenUncertainMultiply",
      "invalid": "false",
      "expression": "(days between DateTime(2014, 1, 15) and DateTime(2014, 2))\n\t\t\t\t* (days between DateTime(2014, 1, 15) and DateTime(2014, 2))"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenUncertainDiv",
      "invalid": "true",
      "expression": "(days between DateTime(2014, 1, 15) and DateTime(2014, 2))\n\t\t\t\tdiv (months between DateTime(2005) and DateTime(2006, 5))",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenMonthUncertain",
      "invalid": "false",
      "expression": "months between DateTime(2005) and DateTime(2006, 7) > 5"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "true",
      "expected": "null",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenMonthUncertain2",
      "invalid": "false",
      "expression": "months between DateTime(2005) and DateTime(2006, 2) > 5"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenMonthUncertain3",
      "invalid": "false",
      "expression": "months between DateTime(2005) and DateTime(2006, 7) > 25"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenMonthUncertain4",
      "invalid": "false",
      "expression": "months between DateTime(2005) and DateTime(2006, 7) < 24"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenMonthUncertain5",
      "invalid": "false",
      "expression": "months between DateTime(2005) and DateTime(2006, 7) = 24"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenMonthUncertain6",
      "invalid": "false",
      "expression": "months between DateTime(2005) and DateTime(2006, 7) >= 5"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTimeDurationBetweenMonthUncertain7",
      "invalid": "false",
      "expression": "months between DateTime(2005) and DateTime(2006, 7) <= 24"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2012-03-10T10:20:00",
      "expected": "@2012-03-10T10:20:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTime1",
      "invalid": "false",
      "expression": "@2012-03-10T10:20:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2013-03-10T09:20:00",
      "expected": "@2013-03-10T09:20:00",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DateTime2",
      "invalid": "false",
      "expression": "@2013-03-10T09:20:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DurationInYears",
      "invalid": "false",
      "expression": "years between (date from @2012-03-10T10:20:00) and (date from @2013-03-10T09:20:00)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DurationInWeeks",
      "invalid": "false",
      "expression": "weeks between @2012-03-10T22:05:09 and @2012-03-20T07:19:33"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DurationInWeeks2",
      "invalid": "false",
      "expression": "weeks between @2012-03-10T22:05:09 and @2012-03-24T07:19:33"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DurationInWeeks3",
      "invalid": "false",
      "expression": "weeks between @2012-03-10T06:05:09 and @2012-03-24T07:19:33"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "TimeDurationBetweenHour",
      "invalid": "false",
      "expression": "hours between @T20:26:15.555 and @T23:25:15.555"
    },
    {
      "testStatus": "skip",
      "expected": "1",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "TimeDurationBetweenHourDiffPrecision",
      "invalid": "false",
      "expression": "hours between @T06Z and @T07:00:00Z",
      "SkipMessage": "Skipped by config: CQLtoELM - Syntax error at Z\""
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "TimeDurationBetweenMinute",
      "invalid": "false",
      "expression": "minutes between @T23:20:16.555 and @T23:25:15.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "4",
      "expected": "4",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "TimeDurationBetweenSecond",
      "invalid": "false",
      "expression": "seconds between @T23:25:10.556 and @T23:25:15.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "5",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "TimeDurationBetweenMillis",
      "invalid": "false",
      "expression": "milliseconds between @T23:25:25.555 and @T23:25:25.560"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DurationInHoursA",
      "invalid": "false",
      "expression": "hours between @2017-03-12T01:00:00-07:00 and @2017-03-12T03:00:00-06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "45",
      "expected": "45",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DurationInMinutesA",
      "invalid": "false",
      "expression": "minutes between @2017-11-05T01:30:00-06:00 and @2017-11-05T01:15:00-07:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DurationInDaysA",
      "invalid": "false",
      "expression": "days between @2017-03-12T00:00:00-07:00 and @2017-03-13T00:00:00-06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DurationInHoursAA",
      "invalid": "false",
      "expression": "hours between DateTime(2017, 3, 12, 1, 0, 0, 0, -7.0) and DateTime(2017, 3, 12, 3, 0, 0, 0, -6.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "45",
      "expected": "45",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DurationInMinutesAA",
      "invalid": "false",
      "expression": "minutes between DateTime(2017, 11, 5, 1, 30, 0, 0, -6.0) and DateTime(2017, 11, 5, 1, 15, 0, 0, -7.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Uncertainty tests",
      "testName": "DurationInDaysAA",
      "invalid": "false",
      "expression": "days between DateTime(2017, 3, 12, 0, 0, 0, 0, -7.0) and DateTime(2017, 3, 13, 0, 0, 0, 0, -6.0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Now",
      "testName": "DateTimeNow",
      "invalid": "false",
      "expression": "Now() = Now()"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsYearTrue",
      "invalid": "false",
      "expression": "DateTime(2014) same year as DateTime(2014)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsYearFalse",
      "invalid": "false",
      "expression": "DateTime(2013) same year as DateTime(2014)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsMonthTrue",
      "invalid": "false",
      "expression": "DateTime(2014, 12) same month as DateTime(2014, 12)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsMonthFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 12) same month as DateTime(2014, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsDayTrue",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 10) same day as DateTime(2014, 12, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsDayFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 10) same day as DateTime(2014, 10, 11)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsHourTrue",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 10, 20) same hour as DateTime(2014, 12, 10, 20)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsHourFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 10, 20) same hour as DateTime(2014, 10, 10, 21)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsMinuteTrue",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 10, 20, 55) same minute as DateTime(2014, 12, 10, 20, 55)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsMinuteFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 10, 20, 55) same minute as DateTime(2014, 10, 10, 21, 56)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsSecondTrue",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 10, 20, 55, 45) same second as DateTime(2014, 12, 10, 20, 55, 45)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsSecondFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 10, 20, 55, 45) same second as DateTime(2014, 10, 10, 21, 55, 44)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsMillisecondTrue",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 10, 20, 55, 45, 500) same millisecond as DateTime(2014, 12, 10, 20, 55, 45, 500)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsMillisecondFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 10, 20, 55, 45, 500) same millisecond as DateTime(2014, 10, 10, 21, 55, 45, 501)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "DateTimeSameAsNull",
      "invalid": "false",
      "expression": "DateTime(2014, 10) same day as DateTime(2014, 10, 12)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "SameAsTimezoneTrue",
      "invalid": "false",
      "expression": "@2012-03-10T10:20:00.999+07:00 same hour as @2012-03-10T09:20:00.999+06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "SameAsTimezoneFalse",
      "invalid": "false",
      "expression": "@2012-03-10T10:20:00.999+07:00 same hour as @2012-03-10T10:20:00.999+06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "TimeSameAsHourTrue",
      "invalid": "false",
      "expression": "@T23:25:25.555 same hour as @T23:55:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "TimeSameAsHourFalse",
      "invalid": "false",
      "expression": "@T22:25:25.555 same hour as @T23:25:25.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "TimeSameAsMinuteTrue",
      "invalid": "false",
      "expression": "@T23:55:22.555 same minute as @T23:55:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "TimeSameAsMinuteFalse",
      "invalid": "false",
      "expression": "@T23:26:25.555 same minute as @T23:25:25.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "TimeSameAsSecondTrue",
      "invalid": "false",
      "expression": "@T23:55:25.555 same second as @T23:55:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "TimeSameAsSecondFalse",
      "invalid": "false",
      "expression": "@T23:25:35.555 same second as @T23:25:25.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "TimeSameAsMillisTrue",
      "invalid": "false",
      "expression": "@T23:55:25.555 same millisecond as @T23:55:25.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameAs",
      "testName": "TimeSameAsMillisFalse",
      "invalid": "false",
      "expression": "@T23:25:25.555 same millisecond as @T23:25:25.554"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterYearTrue1",
      "invalid": "false",
      "expression": "DateTime(2014) same year or after DateTime(2014)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterYearTrue2",
      "invalid": "false",
      "expression": "DateTime(2016) same year or after DateTime(2014)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterYearFalse",
      "invalid": "false",
      "expression": "DateTime(2013) same year or after DateTime(2014)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterMonthTrue1",
      "invalid": "false",
      "expression": "DateTime(2014, 12) same month or after DateTime(2014, 12)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterMonthTrue2",
      "invalid": "false",
      "expression": "DateTime(2014, 10) same month or after DateTime(2014, 9)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterMonthFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10) same month or after DateTime(2014, 11)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterDayTrue1",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 20) same day or after DateTime(2014, 12, 20)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterDayTrue2",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25) same day or after DateTime(2014, 10, 20)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterDayFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 20) same day or after DateTime(2014, 10, 25)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterHourTrue1",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 20, 12) same hour or after DateTime(2014, 12, 20, 12)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterHourTrue2",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 12) same hour or after DateTime(2014, 10, 25, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterHourFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 12) same hour or after DateTime(2014, 10, 25, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterMinuteTrue1",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 20, 12, 30) same minute or after DateTime(2014, 12, 20, 12, 30)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterMinuteTrue2",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 10, 30) same minute or after DateTime(2014, 10, 25, 10, 25)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterMinuteFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 15, 30) same minute or after DateTime(2014, 10, 25, 15, 45)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterSecondTrue1",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 20, 12, 30, 15) same second or after DateTime(2014, 12, 20, 12, 30, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterSecondTrue2",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 10, 25, 25) same second or after DateTime(2014, 10, 25, 10, 25, 20)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterSecondFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 15, 45, 20) same second or after DateTime(2014, 10, 25, 15, 45, 21)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterMillisecondTrue1",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 20, 12, 30, 15, 250) same millisecond or after DateTime(2014, 12, 20, 12, 30, 15, 250)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterMillisecondTrue2",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 10, 25, 20, 500) same millisecond or after DateTime(2014, 10, 25, 10, 25, 20, 499)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterMillisecondFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 15, 45, 20, 500) same millisecond or after DateTime(2014, 10, 25, 15, 45, 20, 501)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "DateTimeSameOrAfterNull1",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 20) same day or after DateTime(2014, 12)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "SameOrAfterTimezoneTrue",
      "invalid": "false",
      "expression": "@2012-03-10T10:20:00.999+07:00 same hour or after @2012-03-10T09:20:00.999+06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "SameOrAfterTimezoneFalse",
      "invalid": "false",
      "expression": "@2012-03-10T10:20:00.999+07:00 same hour or after @2012-03-10T10:20:00.999+06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "TimeSameOrAfterHourTrue1",
      "invalid": "false",
      "expression": "@T23:25:25.555 same hour or after @T23:55:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "TimeSameOrAfterHourTrue2",
      "invalid": "false",
      "expression": "@T23:25:25.555 same hour or after @T22:55:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "TimeSameOrAfterHourFalse",
      "invalid": "false",
      "expression": "@T22:25:25.555 same hour or after @T23:55:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "TimeSameOrAfterMinuteTrue1",
      "invalid": "false",
      "expression": "@T23:25:25.555 same minute or after @T23:25:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "TimeSameOrAfterMinuteTrue2",
      "invalid": "false",
      "expression": "@T23:25:25.555 same minute or after @T22:15:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "TimeSameOrAfterMinuteFalse",
      "invalid": "false",
      "expression": "@T23:25:25.555 same minute or after @T23:55:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "TimeSameOrAfterSecondTrue1",
      "invalid": "false",
      "expression": "@T23:25:25.555 same second or after @T23:25:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "TimeSameOrAfterSecondTrue2",
      "invalid": "false",
      "expression": "@T23:25:35.555 same second or after @T22:25:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "TimeSameOrAfterSecondFalse",
      "invalid": "false",
      "expression": "@T23:55:25.555 same second or after @T23:55:35.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "TimeSameOrAfterMillisTrue1",
      "invalid": "false",
      "expression": "@T23:25:25.555 same millisecond or after @T23:25:25.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "TimeSameOrAfterMillisTrue2",
      "invalid": "false",
      "expression": "@T23:25:25.555 same millisecond or after @T22:25:25.550"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "TimeSameOrAfterMillisFalse",
      "invalid": "false",
      "expression": "@T23:55:25.555 same millisecond or after @T23:55:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "OnOrAfterTrue",
      "invalid": "false",
      "expression": "@2017-12-20T11:00:00.000 on or after @2017-12-20T11:00:00.000"
    },
    {
      "testStatus": "error",
      "expected": "true",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "141",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"@2017-12-21T02:00:00.0 same or after @2017-12-20T11:00:00.0\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrAfter",
      "testName": "Issue32DateTime",
      "invalid": "false",
      "expression": "@2017-12-21T02:00:00.0 same or after @2017-12-20T11:00:00.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeYearTrue1",
      "invalid": "false",
      "expression": "DateTime(2014) same year or before DateTime(2014)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeYearTrue2",
      "invalid": "false",
      "expression": "DateTime(2013) same year or before DateTime(2014)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeYearFalse",
      "invalid": "false",
      "expression": "DateTime(2015) same year or before DateTime(2014)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeMonthTrue1",
      "invalid": "false",
      "expression": "DateTime(2014, 12) same month or before DateTime(2014, 12)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeMonthTrue2",
      "invalid": "false",
      "expression": "DateTime(2014, 8) same month or before DateTime(2014, 9)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeMonthFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 12) same month or before DateTime(2014, 11)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeDayTrue1",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 20) same day or before DateTime(2014, 12, 20)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeDayTrue2",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 15) same day or before DateTime(2014, 10, 20)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeDayFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 30) same day or before DateTime(2014, 10, 25)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeHourTrue1",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 20, 12) same hour or before DateTime(2014, 12, 20, 12)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeHourTrue2",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 5) same hour or before DateTime(2014, 10, 25, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeHourFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 20) same hour or before DateTime(2014, 10, 25, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeMinuteTrue1",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 20, 12, 30) same minute or before DateTime(2014, 12, 20, 12, 30)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeMinuteTrue2",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 10, 20) same minute or before DateTime(2014, 10, 25, 10, 25)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeMinuteFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 15, 55) same minute or before DateTime(2014, 10, 25, 15, 45)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeSecondTrue1",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 20, 12, 30, 15) same second or before DateTime(2014, 12, 20, 12, 30, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeSecondTrue2",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 10, 25, 15) same second or before DateTime(2014, 10, 25, 10, 25, 20)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeSecondFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 15, 45, 25) same second or before DateTime(2014, 10, 25, 15, 45, 21)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeMillisecondTrue1",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 20, 12, 30, 15, 250) same millisecond or before DateTime(2014, 12, 20, 12, 30, 15, 250)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeMillisecondTrue2",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 10, 25, 20, 450) same millisecond or before DateTime(2014, 10, 25, 10, 25, 20, 499)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeMillisecondFalse",
      "invalid": "false",
      "expression": "DateTime(2014, 10, 25, 15, 45, 20, 505) same millisecond or before DateTime(2014, 10, 25, 15, 45, 20, 501)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "DateTimeSameOrBeforeNull1",
      "invalid": "false",
      "expression": "DateTime(2014, 12, 20) same minute or before DateTime(2014, 12, 20, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "SameOrBeforeTimezoneTrue",
      "invalid": "false",
      "expression": "@2012-03-10T09:20:00.999+07:00 same hour or before @2012-03-10T10:20:00.999+06:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "SameOrBeforeTimezoneFalse",
      "invalid": "false",
      "expression": "@2012-03-10T10:20:00.999+06:00 same hour or before @2012-03-10T10:20:00.999+07:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "TimeSameOrBeforeHourTrue1",
      "invalid": "false",
      "expression": "@T23:25:25.555 same hour or before @T23:55:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "TimeSameOrBeforeHourTrue2",
      "invalid": "false",
      "expression": "@T21:25:25.555 same hour or before @T22:55:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "TimeSameOrBeforeHourFalse",
      "invalid": "false",
      "expression": "@T22:25:25.555 same hour or before @T21:55:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "TimeSameOrBeforeMinuteTrue1",
      "invalid": "false",
      "expression": "@T23:25:25.555 same minute or before @T23:25:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "TimeSameOrBeforeMinuteFalse0",
      "invalid": "false",
      "expression": "@T23:10:25.555 same minute or before @T22:15:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "TimeSameOrBeforeMinuteFalse",
      "invalid": "false",
      "expression": "@T23:56:25.555 same minute or before @T23:55:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "TimeSameOrBeforeSecondTrue1",
      "invalid": "false",
      "expression": "@T23:25:25.555 same second or before @T23:25:25.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "TimeSameOrBeforeSecondFalse0",
      "invalid": "false",
      "expression": "@T23:25:35.555 same second or before @T22:25:45.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "TimeSameOrBeforeSecondFalse",
      "invalid": "false",
      "expression": "@T23:55:45.555 same second or before @T23:55:35.900"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "TimeSameOrBeforeMillisTrue1",
      "invalid": "false",
      "expression": "@T23:25:25.555 same millisecond or before @T23:25:25.555"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "TimeSameOrBeforeMillisFalse0",
      "invalid": "false",
      "expression": "@T23:25:25.200 same millisecond or before @T22:25:25.550"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "SameOrBefore",
      "testName": "TimeSameOrBeforeMillisFalse",
      "invalid": "false",
      "expression": "@T23:55:25.966 same millisecond or before @T23:55:25.900"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2000-10-10",
      "expected": "@2000-10-10T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtract5Years",
      "invalid": "false",
      "expression": "DateTime(2005, 10, 10) - 5 years"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtractInvalidYears",
      "invalid": "true",
      "expression": "DateTime(2005, 10, 10) - 2005 years",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2005-01-10",
      "expected": "@2005-01-10T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtract5Months",
      "invalid": "false",
      "expression": "DateTime(2005, 6, 10) - 5 months"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2004-11-10",
      "expected": "@2004-11-10T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtractMonthsUnderflow",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10) - 6 months"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2005-05-05",
      "expected": "@2005-05-05T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtract5Days",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10) - 5 days"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2016-05-30",
      "expected": "@2016-05-30T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtractDaysUnderflow",
      "invalid": "false",
      "expression": "DateTime(2016, 6, 10) - 11 days"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2005-05-10T05Z",
      "expected": "@2005-05-10T05",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtract5Hours",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10, 10) - 5 hours"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2016-06-09T23Z",
      "expected": "@2016-06-09T23",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtractHoursUnderflow",
      "invalid": "false",
      "expression": "DateTime(2016, 6, 10, 5) - 6 hours"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2005-05-10T05:05Z",
      "expected": "@2005-05-10T05:05",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtract5Minutes",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10, 5, 10) - 5 minutes"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2016-06-10T04:59Z",
      "expected": "@2016-06-10T04:59",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtractMinutesUnderflow",
      "invalid": "false",
      "expression": "DateTime(2016, 6, 10, 5, 5) - 6 minutes"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2005-05-10T05:05:05Z",
      "expected": "@2005-05-10T05:05:05",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtract5Seconds",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10, 5, 5, 10) - 5 seconds"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2016-06-10T05:04:59Z",
      "expected": "@2016-06-10T05:04:59",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtractSecondsUnderflow",
      "invalid": "false",
      "expression": "DateTime(2016, 6, 10, 5, 5, 5) - 6 seconds"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2005-05-10T05:05:05.005Z",
      "expected": "@2005-05-10T05:05:05.005",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtract5Milliseconds",
      "invalid": "false",
      "expression": "DateTime(2005, 5, 10, 5, 5, 5, 10) - 5 milliseconds"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2016-06-10T05:05:04.999Z",
      "expected": "@2016-06-10T05:05:04.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtractMillisecondsUnderflow",
      "invalid": "false",
      "expression": "DateTime(2016, 6, 10, 5, 5, 5, 5) - 6 milliseconds"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2012T",
      "expected": "@2012T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtract2YearsAsMonths",
      "invalid": "false",
      "expression": "DateTime(2014) - 24 months"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2012T",
      "expected": "@2012T",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "DateTimeSubtract2YearsAsMonthsRem1",
      "invalid": "false",
      "expression": "DateTime(2014) - 25 months"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T10:59:59.999",
      "expected": "@T10:59:59.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "TimeSubtract5Hours",
      "invalid": "false",
      "expression": "@T15:59:59.999 - 5 hours"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T15:58:59.999",
      "expected": "@T15:58:59.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "TimeSubtract1Minute",
      "invalid": "false",
      "expression": "@T15:59:59.999 - 1 minutes"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T15:59:58.999",
      "expected": "@T15:59:58.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "TimeSubtract1Second",
      "invalid": "false",
      "expression": "@T15:59:59.999 - 1 seconds"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T15:59:58.999",
      "expected": "@T15:59:58.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "TimeSubtract1Millisecond",
      "invalid": "false",
      "expression": "@T15:59:59.0 - 1 milliseconds"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T10:58:59.999",
      "expected": "@T10:58:59.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "TimeSubtract5Hours1Minute",
      "invalid": "false",
      "expression": "@T15:59:59.999 - 5 hours - 1 minutes"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T10:59:59.999",
      "expected": "@T10:59:59.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Subtract",
      "testName": "TimeSubtract5hoursByMinute",
      "invalid": "false",
      "expression": "@T15:59:59.999 - 300 minutes"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T23:59:59.999",
      "expected": "@T23:59:59.999",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Time",
      "testName": "TimeTest2",
      "invalid": "false",
      "expression": "@T23:59:59.999"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@T14:48:33.192Z",
      "expected": "TimeOfDay()",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "TimeOfDay",
      "testName": "TimeOfDayTest",
      "invalid": "false",
      "expression": "TimeOfDay()"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Today",
      "testName": "DateTimeSameOrBeforeTodayTrue1",
      "invalid": "false",
      "expression": "Today() same day or before Today()"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Today",
      "testName": "DateTimeSameOrBeforeTodayTrue2",
      "invalid": "false",
      "expression": "Today() same day or before Today() + 1 days"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Today",
      "testName": "DateTimeSameOrBeforeTodayFalse",
      "invalid": "false",
      "expression": "Today() + 1 years same day or before Today()"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Today",
      "testName": "DateTimeAddTodayTrue",
      "invalid": "false",
      "expression": "Today() + 1 days > Today()"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2025-05-11",
      "expected": "Today()",
      "testsName": "CqlDateTimeOperatorsTest",
      "groupName": "Today",
      "testName": "Issue34B",
      "invalid": "false",
      "expression": "Today()"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlErrorsAndMessagingOperatorsTest",
      "testName": "TestMessageInfo",
      "invalid": "false",
      "expression": "Message(1, true, '100', 'Message', 'Test Message')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlErrorsAndMessagingOperatorsTest",
      "testName": "TestMessageWarn",
      "invalid": "false",
      "expression": "Message(2, true, '200', 'Warning', 'You have been warned!')"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":5}]}",
      "expected": "{3, 4, 5}",
      "testsName": "CqlErrorsAndMessagingOperatorsTest",
      "testName": "TestMessageTrace",
      "invalid": "false",
      "expression": "Message({3, 4, 5}, true, '300', 'Trace', 'This is a trace')"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlErrorsAndMessagingOperatorsTest",
      "testName": "TestMessageError",
      "invalid": "true",
      "expression": "Message(3 + 1, true, '400', 'Error', 'This is an error!')",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "TestAfterNull",
      "invalid": "false",
      "expression": "(null as Integer) after Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "IntegerIntervalAfterTrue",
      "invalid": "false",
      "expression": "Interval[11, 20] after Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "IntegerIntervalAfterFalse",
      "invalid": "false",
      "expression": "Interval[1, 10] after Interval[11, 20]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "IntegerIntervalPointAfterTrue",
      "invalid": "false",
      "expression": "12 after Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "IntegerIntervalPointAfterFalse",
      "invalid": "false",
      "expression": "9 after Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "IntegerIntervalAfterPointTrue",
      "invalid": "false",
      "expression": "Interval[11, 20] after 5"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "IntegerIntervalAfterPointFalse",
      "invalid": "false",
      "expression": "Interval[11, 20] after 12"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "DecimalIntervalAfterTrue",
      "invalid": "false",
      "expression": "Interval[11.0, 20.0] after Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "DecimalIntervalAfterFalse",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] after Interval[11.0, 20.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "DecimalIntervalPointAfterTrue",
      "invalid": "false",
      "expression": "12.0 after Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "DecimalIntervalPointAfterFalse",
      "invalid": "false",
      "expression": "9.0 after Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "DecimalIntervalAfterPointTrue",
      "invalid": "false",
      "expression": "Interval[11.0, 20.0] after 5.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "DecimalIntervalAfterPointFalse",
      "invalid": "false",
      "expression": "Interval[11.0, 20.0] after 12.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "QuantityIntervalAfterTrue",
      "invalid": "false",
      "expression": "Interval[11.0 'g', 20.0 'g'] after Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "QuantityIntervalAfterFalse",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] after Interval[11.0 'g', 20.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "QuantityIntervalPointAfterTrue",
      "invalid": "false",
      "expression": "12.0'g' after Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "QuantityIntervalPointAfterFalse",
      "invalid": "false",
      "expression": "9.0'g' after Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "QuantityIntervalAfterPointTrue",
      "invalid": "false",
      "expression": "Interval[11.0 'g', 20.0 'g'] after 5.0'g'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "QuantityIntervalAfterPointFalse",
      "invalid": "false",
      "expression": "Interval[11.0 'g', 20.0 'g'] after 12.0'g'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 1), DateTime(2012, 1, 15)] after DateTime(2011, 12, 31)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "DateTimeAfterFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 1), DateTime(2012, 1, 15)] after DateTime(2012, 12, 31)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "TimeAfterTrue",
      "invalid": "false",
      "expression": "Interval[@T15:59:59.999, @T20:59:59.999] after @T12:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "After",
      "testName": "TimeAfterFalse",
      "invalid": "false",
      "expression": "Interval[@T15:59:59.999, @T20:59:59.999] after @T17:59:59.999"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "TestBeforeNull",
      "invalid": "false",
      "expression": "(null as Integer) before Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "IntegerIntervalBeforeFalse",
      "invalid": "false",
      "expression": "Interval[11, 20] before Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "IntegerIntervalBeforeTrue",
      "invalid": "false",
      "expression": "Interval[1, 10] before Interval[11, 20]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "IntegerIntervalPointBeforeTrue",
      "invalid": "false",
      "expression": "9 before Interval[11, 20]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "IntegerIntervalPointBeforeFalse",
      "invalid": "false",
      "expression": "9 before Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "IntegerIntervalBeforePointTrue",
      "invalid": "false",
      "expression": "Interval[1, 10] before 11"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "IntegerIntervalBeforePointFalse",
      "invalid": "false",
      "expression": "Interval[1, 10] before 8"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "DecimalIntervalBeforeFalse",
      "invalid": "false",
      "expression": "Interval[11.0, 20.0] before Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "DecimalIntervalBeforeTrue",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] before Interval[11.0, 20.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "DecimalIntervalPointBeforeTrue",
      "invalid": "false",
      "expression": "9.0 before Interval[11.0, 20.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "DecimalIntervalPointBeforeFalse",
      "invalid": "false",
      "expression": "9.0 before Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "DecimalIntervalBeforePointTrue",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] before 11.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "DecimalIntervalBeforePointFalse",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] before 8.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "QuantityIntervalBeforeTrue",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] before Interval[11.0 'g', 20.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "QuantityIntervalBeforeFalse",
      "invalid": "false",
      "expression": "Interval[11.0 'g', 20.0 'g'] before Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "QuantityIntervalPointBeforeTrue",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] before 12.0'g'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "QuantityIntervalPointBeforeFalse",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] before 9.0'g'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "QuantityIntervalBeforePointTrue",
      "invalid": "false",
      "expression": "5.0'g' before Interval[11.0 'g', 20.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "QuantityIntervalBeforePointFalse",
      "invalid": "false",
      "expression": "12.0'g' before Interval[11.0 'g', 20.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 1), DateTime(2012, 1, 15)] before DateTime(2012, 2, 27)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "DateTimeBeforeFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 1), DateTime(2012, 1, 15)] before DateTime(2011, 12, 31)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "TimeBeforeTrue",
      "invalid": "false",
      "expression": "Interval[@T15:59:59.999, @T20:59:59.999] before @T22:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Before",
      "testName": "TimeBeforeFalse",
      "invalid": "false",
      "expression": "Interval[@T15:59:59.999, @T20:59:59.999] before @T10:59:59.999"
    },
    {
      "testStatus": "error",
      "expected": "{ }",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "113",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"collapse {Interval(null, null)}\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Collapse",
      "testName": "TestCollapseNull",
      "invalid": "false",
      "expression": "collapse {Interval(null, null)}"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valueRange\":{\"low\":{\"value\":1,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"},\"high\":{\"value\":10,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"}}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valueRange\":{\"low\":{\"value\":12,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"},\"high\":{\"value\":19,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"}}}]}",
      "expected": "{Interval [ 1, 10 ], Interval [ 12, 19 ]}",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Collapse",
      "testName": "IntegerIntervalCollapse",
      "invalid": "false",
      "expression": "collapse { Interval[1,5], Interval[3,7], Interval[12,19], Interval[7,10] }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{Interval [ 1, 19 ]}",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Collapse",
      "testName": "IntegerIntervalCollapse2",
      "invalid": "false",
      "expression": "collapse { Interval[1,2], Interval[3,7], Interval[10,19], Interval[7,10] }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{Interval [ 4, 8 ]}",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Collapse",
      "testName": "IntegerIntervalCollapse3",
      "invalid": "false",
      "expression": "collapse { Interval[4,6], Interval[7,8] }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valueRange\":{\"low\":{\"value\":1,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"},\"high\":{\"value\":10,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"}}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valueRange\":{\"low\":{\"value\":12,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"},\"high\":{\"value\":19,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"}}}]}",
      "expected": "{Interval [ 1.0, 10.0 ], Interval [ 12.0, 19.0 ]}",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Collapse",
      "testName": "DecimalIntervalCollapse",
      "invalid": "false",
      "expression": "collapse { Interval[1.0,5.0], Interval[3.0,7.0], Interval[12.0,19.0], Interval[7.0,10.0] }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{Interval [ 4.0, 8.0 ]}",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Collapse",
      "testName": "DecimalIntervalCollapse2",
      "invalid": "false",
      "expression": "collapse { Interval[4.0,6.0], Interval[6.00000001,8.0] }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valueRange\":{\"low\":{\"value\":1,\"unit\":\"g\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"g\"},\"high\":{\"value\":10,\"unit\":\"g\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"g\"}}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valueRange\":{\"low\":{\"value\":12,\"unit\":\"g\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"g\"},\"high\":{\"value\":19,\"unit\":\"g\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"g\"}}}]}",
      "expected": "{Interval [ 1.0 'g', 10.0 'g' ], Interval [ 12.0 'g', 19.0 'g' ]}",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Collapse",
      "testName": "QuantityIntervalCollapse",
      "invalid": "false",
      "expression": "collapse { Interval[1.0 'g',5.0 'g'], Interval[3.0 'g',7.0 'g'], Interval[12.0 'g',19.0 'g'], Interval[7.0 'g',10.0 'g'] }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valuePeriod\":{\"start\":\"2012-01-01\",\"end\":\"2012-01-25\"}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valuePeriod\":{\"start\":\"2012-05-10\",\"end\":\"2012-05-30\"}}]}",
      "expected": "{Interval [ @2012-01-01T, @2012-01-25T ], Interval [ @2012-05-10T, @2012-05-30T ]}",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Collapse",
      "testName": "DateTimeCollapse",
      "invalid": "false",
      "expression": "collapse { Interval[DateTime(2012, 1, 1), DateTime(2012, 1, 15)], Interval[DateTime(2012, 1, 10), DateTime(2012, 1, 25)], Interval[DateTime(2012, 5, 10), DateTime(2012, 5, 25)], Interval[DateTime(2012, 5, 20), DateTime(2012, 5, 30)] }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{Interval [ @2012-01-01T, @2012-05-25T ]}",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Collapse",
      "testName": "DateTimeCollapse2",
      "invalid": "false",
      "expression": "collapse { Interval[DateTime(2012, 1, 1), DateTime(2012, 1, 15)], Interval[DateTime(2012, 1, 16), DateTime(2012, 5, 25)] }"
    },
    {
      "testStatus": "error",
      "expected": "{Interval [ @T01:59:59.999, @T15:59:59.999 ], Interval [ @T17:59:59.999, @T22:59:59.999 ]}",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "261",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"collapse { Interval[@T01:59:59.999, @T10:59:59.999], Interval[@T08:59:59.999, @T15:59:59.999], Interval[@T17:59:59.999, @T20:59:59.999], Interval[@T18:59:59.999, @T22:59:59.999] }\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Collapse",
      "testName": "TimeCollapse",
      "invalid": "false",
      "expression": "collapse { Interval[@T01:59:59.999, @T10:59:59.999], Interval[@T08:59:59.999, @T15:59:59.999], Interval[@T17:59:59.999, @T20:59:59.999], Interval[@T18:59:59.999, @T22:59:59.999] }"
    },
    {
      "testStatus": "error",
      "expected": "{Interval [ @T01:59:59.999, @T15:59:59.999 ]}",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "177",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"collapse { Interval[@T01:59:59.999, @T10:59:59.999], Interval[@T11:00:00.000, @T15:59:59.999] }\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Collapse",
      "testName": "TimeCollapse2",
      "invalid": "false",
      "expression": "collapse { Interval[@T01:59:59.999, @T10:59:59.999], Interval[@T11:00:00.000, @T15:59:59.999] }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valuePeriod\":{\"start\":\"2018-01-01\",\"end\":\"2018-01-01\"}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valuePeriod\":{\"start\":\"2018-01-02\",\"end\":\"2018-01-02\"}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valuePeriod\":{\"start\":\"2018-01-03\",\"end\":\"2018-01-03\"}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valuePeriod\":{\"start\":\"2018-01-04\",\"end\":\"2018-01-04\"}}]}",
      "expected": "{ Interval[@2018-01-01, @2018-01-01], Interval[@2018-01-02, @2018-01-02], Interval[@2018-01-03, @2018-01-03], Interval[@2018-01-04, @2018-01-04] }",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Expand",
      "testName": "ExpandPerDay",
      "invalid": "false",
      "expression": "expand { Interval[@2018-01-01, @2018-01-04] } per day"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valuePeriod\":{\"start\":\"2018-01-01\",\"end\":\"2018-01-02\"}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valuePeriod\":{\"start\":\"2018-01-03\",\"end\":\"2018-01-04\"}}]}",
      "expected": "{ Interval[@2018-01-01, @2018-01-02], Interval[@2018-01-03, @2018-01-04] }",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Expand",
      "testName": "ExpandPer2Days",
      "invalid": "false",
      "expression": "expand { Interval[@2018-01-01, @2018-01-04] } per 2 days"
    },
    {
      "testStatus": "error",
      "expected": "{ Interval[@T10:00, @T11:00), Interval[@T11:00, @T12:00) }",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "128",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"expand { Interval[@T10:00, @T12:30] } per hour\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Expand",
      "testName": "ExpandPerHour",
      "invalid": "false",
      "expression": "expand { Interval[@T10:00, @T12:30] } per hour"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valueRange\":{\"low\":{\"value\":10,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"},\"high\":{\"value\":10.99999999,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"}}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valueRange\":{\"low\":{\"value\":11,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"},\"high\":{\"value\":11.99999999,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"}}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valueRange\":{\"low\":{\"value\":12,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"},\"high\":{\"value\":12.99999999,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"}}}]}",
      "expected": "{ Interval[10, 10], Interval[11, 11], Interval[12, 12] }",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Expand",
      "testName": "ExpandPer1",
      "invalid": "false",
      "expression": "expand { Interval[10.0, 12.5] } per 1"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{ }",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Expand",
      "testName": "ExpandPerMinute",
      "invalid": "false",
      "expression": "expand { Interval[@T10, @T10] } per minute"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "TestContainsNull",
      "invalid": "false",
      "expression": "Interval[1, 10] contains null"
    },
    {
      "testStatus": "error",
      "expected": "false",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "97",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"null contains 5\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "TestNullElement1",
      "invalid": "false",
      "expression": "null contains 5"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "TestNullElement2",
      "invalid": "false",
      "expression": "Interval[null, 5] contains 10"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "IntegerIntervalContainsTrue",
      "invalid": "false",
      "expression": "Interval[1, 10] contains 5"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "IntegerIntervalContainsFalse",
      "invalid": "false",
      "expression": "Interval[1, 10] contains 25"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "DecimalIntervalContainsTrue",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] contains 8.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "DecimalIntervalContainsFalse",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] contains 255.0"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "QuantityIntervalContainsTrue",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] contains 2.0 'g'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "QuantityIntervalContainsFalse",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] contains 100.0 'g'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "DateTimeContainsTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 1), DateTime(2012, 1, 15)] contains DateTime(2012, 1, 10)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "DateTimeContainsFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 1), DateTime(2012, 1, 15)] contains DateTime(2012, 1, 16)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "TimeContainsTrue",
      "invalid": "false",
      "expression": "Interval[@T01:59:59.999, @T10:59:59.999] contains @T05:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Contains",
      "testName": "TimeContainsFalse",
      "invalid": "false",
      "expression": "Interval[@T01:59:59.999, @T10:59:59.999] contains @T15:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "10",
      "expected": "10",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "End",
      "testName": "IntegerIntervalEnd",
      "invalid": "false",
      "expression": "end of Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "10",
      "expected": "10.0",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "End",
      "testName": "DecimalIntervalEnd",
      "invalid": "false",
      "expression": "end of Interval[1.0, 10.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "10.0'g'",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "End",
      "testName": "QuantityIntervalEnd",
      "invalid": "false",
      "expression": "end of Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2016-05-02T00:00:00.000",
      "expected": "@2016-05-02T00:00:00.000",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "End",
      "testName": "DateTimeIntervalEnd",
      "invalid": "false",
      "expression": "end of Interval[@2016-05-01T00:00:00.000, @2016-05-02T00:00:00.000]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T23:59:59.599",
      "expected": "@T23:59:59.599",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "End",
      "testName": "TimeIntervalEnd",
      "invalid": "false",
      "expression": "end of Interval[@T00:00:00.000, @T23:59:59.599]"
    },
    {
      "testStatus": "error",
      "expected": "null",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "123",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[1, 10] ends Interval(null, null)\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Ends",
      "testName": "TestEndsNull",
      "invalid": "false",
      "expression": "Interval[1, 10] ends Interval(null, null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Ends",
      "testName": "IntegerIntervalEndsTrue",
      "invalid": "false",
      "expression": "Interval[4, 10] ends Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Ends",
      "testName": "IntegerIntervalEndsFalse",
      "invalid": "false",
      "expression": "Interval[44, 50] ends Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Ends",
      "testName": "DecimalIntervalEndsTrue",
      "invalid": "false",
      "expression": "Interval[4.0, 10.0] ends Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Ends",
      "testName": "DecimalIntervalEndsFalse",
      "invalid": "false",
      "expression": "Interval[11.0, 20.0] ends Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Ends",
      "testName": "QuantityIntervalEndsTrue",
      "invalid": "false",
      "expression": "Interval[5.0 'g', 10.0 'g'] ends Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Ends",
      "testName": "QuantityIntervalEndsFalse",
      "invalid": "false",
      "expression": "Interval[11.0 'g', 20.0 'g'] ends Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Ends",
      "testName": "DateTimeEndsTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 15)] ends Interval[DateTime(2012, 1, 1), DateTime(2012, 1, 15)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Ends",
      "testName": "DateTimeEndsFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 15)] ends Interval[DateTime(2012, 1, 1), DateTime(2012, 1, 16)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Ends",
      "testName": "TimeEndsTrue",
      "invalid": "false",
      "expression": "Interval[@T05:59:59.999, @T10:59:59.999] ends Interval[@T01:59:59.999, @T10:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Ends",
      "testName": "TimeEndsFalse",
      "invalid": "false",
      "expression": "Interval[@T05:59:59.999, @T10:59:59.999] ends Interval[@T01:59:59.999, @T11:59:59.999]"
    },
    {
      "testStatus": "error",
      "expected": "null",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "120",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[1, 10] = Interval(null, null)\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equal",
      "testName": "TestEqualNull",
      "invalid": "false",
      "expression": "Interval[1, 10] = Interval(null, null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equal",
      "testName": "IntegerIntervalEqualTrue",
      "invalid": "false",
      "expression": "Interval[1, 10] = Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equal",
      "testName": "IntegerIntervalEqualFalse",
      "invalid": "false",
      "expression": "Interval[1, 10] = Interval[11, 20]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equal",
      "testName": "DecimalIntervalEqualTrue",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] = Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equal",
      "testName": "DecimalIntervalEqualFalse",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] = Interval[11.0, 20.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equal",
      "testName": "QuantityIntervalEqualTrue",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] = Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equal",
      "testName": "QuantityIntervalEqualFalse",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] = Interval[11.0 'g', 20.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equal",
      "testName": "DateTimeEqualTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5, 0, 0, 0, 0), DateTime(2012, 1, 15, 0, 0, 0, 0)] = Interval[DateTime(2012, 1, 5, 0, 0, 0, 0), DateTime(2012, 1, 15, 0, 0, 0, 0)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equal",
      "testName": "DateTimeEqualFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5, 0, 0, 0, 0), DateTime(2012, 1, 15, 0, 0, 0, 0)] = Interval[DateTime(2012, 1, 5, 0, 0, 0, 0), DateTime(2012, 1, 16, 0, 0, 0, 0)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equal",
      "testName": "TimeEqualTrue",
      "invalid": "false",
      "expression": "Interval[@T05:59:59.999, @T10:59:59.999] = Interval[@T05:59:59.999, @T10:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equal",
      "testName": "TimeEqualFalse",
      "invalid": "false",
      "expression": "Interval[@T05:59:59.999, @T10:59:59.999] = Interval[@T05:59:59.999, @T10:58:59.999]"
    },
    {
      "testStatus": "error",
      "expected": "null",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "102",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[null, null]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Except",
      "testName": "NullInterval",
      "invalid": "false",
      "expression": "Interval[null, null]"
    },
    {
      "testStatus": "error",
      "expected": "null",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "130",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[null, null] except Interval[null, null]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Except",
      "testName": "TestExceptNull",
      "invalid": "false",
      "expression": "Interval[null, null] except Interval[null, null]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ 1, 3 ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Except",
      "testName": "IntegerIntervalExcept1to3",
      "invalid": "false",
      "expression": "Interval[1, 10] except Interval[4, 10]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Except",
      "testName": "IntegerIntervalExceptNull",
      "invalid": "false",
      "expression": "Interval[1, 10] except Interval[3, 7]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ 1.0, 3.99999999 ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Except",
      "testName": "DecimalIntervalExcept1to3",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] except Interval[4.0, 10.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Except",
      "testName": "DecimalIntervalExceptNull",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] except Interval[3.0, 7.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ 1.0 'g', 4.99999999 'g' ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Except",
      "testName": "QuantityIntervalExcept1to4",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] except Interval[5.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ 1, 2 ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Except",
      "testName": "Except12",
      "invalid": "false",
      "expression": "Interval[1, 4] except Interval[3, 6]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ @2012-01-05T, @2012-01-06T ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Except",
      "testName": "ExceptDateTimeInterval",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 15)] except Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 15)]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ @2012-01-13T, @2012-01-16T ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Except",
      "testName": "ExceptDateTime2",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 16)] except Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 12)]"
    },
    {
      "testStatus": "error",
      "expected": "Interval [ @T05:59:59.999, @T08:59:59.998 ]",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "170",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[@T05:59:59.999, @T10:59:59.999] except Interval[@T08:59:59.999, @T10:59:59.999]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Except",
      "testName": "ExceptTimeInterval",
      "invalid": "false",
      "expression": "Interval[@T05:59:59.999, @T10:59:59.999] except Interval[@T08:59:59.999, @T10:59:59.999]"
    },
    {
      "testStatus": "error",
      "expected": "Interval [ @T11:00:00.000, @T11:59:59.999 ]",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "170",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[@T08:59:59.999, @T11:59:59.999] except Interval[@T05:59:59.999, @T10:59:59.999]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Except",
      "testName": "ExceptTime2",
      "invalid": "false",
      "expression": "Interval[@T08:59:59.999, @T11:59:59.999] except Interval[@T05:59:59.999, @T10:59:59.999]"
    },
    {
      "testStatus": "error",
      "expected": "false",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "107",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"5 in Interval[null, null]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "TestInNullBoundaries",
      "invalid": "false",
      "expression": "5 in Interval[null, null]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "IntegerIntervalInTrue",
      "invalid": "false",
      "expression": "5 in Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "IntegerIntervalInFalse",
      "invalid": "false",
      "expression": "500 in Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "DecimalIntervalInTrue",
      "invalid": "false",
      "expression": "9.0 in Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "DecimalIntervalInFalse",
      "invalid": "false",
      "expression": "-2.0 in Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "QuantityIntervalInTrue",
      "invalid": "false",
      "expression": "1.0 'g' in Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "QuantityIntervalInFalse",
      "invalid": "false",
      "expression": "55.0 'g' in Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "DateTimeInTrue",
      "invalid": "false",
      "expression": "DateTime(2012, 1, 7) in Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 15)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "DateTimeInFalse",
      "invalid": "false",
      "expression": "DateTime(2012, 1, 17) in Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 15)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "DateTimeInNullTrue",
      "invalid": "false",
      "expression": "DateTime(2012, 1, 7) in Interval[DateTime(2012, 1, 5), null]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "TimeInTrue",
      "invalid": "false",
      "expression": "@T07:59:59.999 in Interval[@T05:59:59.999, @T10:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "TimeInFalse",
      "invalid": "false",
      "expression": "@T17:59:59.999 in Interval[@T05:59:59.999, @T10:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "TimeInNull",
      "invalid": "false",
      "expression": "null in Interval[@T05:59:59.999, @T10:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ @2017-12-20T11:00:00, @2017-12-21T21:00:00 ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "TestPeriod1",
      "invalid": "false",
      "expression": "Interval[@2017-12-20T11:00:00, @2017-12-21T21:00:00]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ @2017-12-20T10:30:00, @2017-12-20T12:00:00 ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "TestPeriod2",
      "invalid": "false",
      "expression": "Interval[@2017-12-20T10:30:00, @2017-12-20T12:00:00]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "In",
      "testName": "Issue32Interval",
      "invalid": "false",
      "expression": "Interval[@2017-12-20T10:30:00, @2017-12-20T12:00:00]\n\t\t\t\tstarts 1 day or less on or after day of start of\n\t\t\t\tInterval[@2017-12-20T11:00:00, @2017-12-21T21:00:00]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Includes",
      "testName": "TestIncludesNull",
      "invalid": "false",
      "expression": "Interval[1, 10] includes null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Includes",
      "testName": "IntegerIntervalIncludesTrue",
      "invalid": "false",
      "expression": "Interval[1, 10] includes Interval[4, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Includes",
      "testName": "IntegerIntervalIncludesFalse",
      "invalid": "false",
      "expression": "Interval[1, 10] includes Interval[44, 50]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Includes",
      "testName": "DecimalIntervalIncludesTrue",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] includes Interval[4.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Includes",
      "testName": "DecimalIntervalIncludesFalse",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] includes Interval[11.0, 20.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Includes",
      "testName": "QuantityIntervalIncludesTrue",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] includes Interval[5.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Includes",
      "testName": "QuantityIntervalIncludesFalse",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] includes Interval[11.0 'g', 20.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Includes",
      "testName": "DateTimeIncludesTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 15)] includes Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 14)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Includes",
      "testName": "DateTimeIncludesFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 15)] includes Interval[DateTime(2012, 1, 4), DateTime(2012, 1, 14)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Includes",
      "testName": "TimeIncludesTrue",
      "invalid": "false",
      "expression": "Interval[@T05:59:59.999, @T10:59:59.999] includes Interval[@T06:59:59.999, @T09:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Includes",
      "testName": "TimeIncludesFalse",
      "invalid": "false",
      "expression": "Interval[@T05:59:59.999, @T10:59:59.999] includes Interval[@T04:59:59.999, @T09:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "TestIncludedInNull",
      "invalid": "false",
      "expression": "null included in Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "IntegerIntervalIncludedInTrue",
      "invalid": "false",
      "expression": "Interval[4, 10] included in Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "IntegerIntervalIncludedInFalse",
      "invalid": "false",
      "expression": "Interval[44, 50] included in Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "DecimalIntervalIncludedInTrue",
      "invalid": "false",
      "expression": "Interval[4.0, 10.0] included in Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "DecimalIntervalIncludedInFalse",
      "invalid": "false",
      "expression": "Interval[11.0, 20.0] included in Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "QuantityIntervalIncludedInTrue",
      "invalid": "false",
      "expression": "Interval[5.0 'g', 10.0 'g'] included in Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "QuantityIntervalIncludedInFalse",
      "invalid": "false",
      "expression": "Interval[11.0 'g', 20.0 'g'] included in Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "DateTimeIncludedInTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 14)] included in Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 15)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "DateTimeIncludedInFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 4), DateTime(2012, 1, 14)] included in Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 15)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "TimeIncludedInTrue",
      "invalid": "false",
      "expression": "Interval[@T06:59:59.999, @T09:59:59.999] included in Interval[@T05:59:59.999, @T10:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "TimeIncludedInFalse",
      "invalid": "false",
      "expression": "Interval[@T04:59:59.999, @T09:59:59.999] included in Interval[@T05:59:59.999, @T10:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "DateTimeIncludedInNull",
      "invalid": "false",
      "expression": "Interval [@2017-09-01T00:00:00, @2017-09-01T00:00:00] included in Interval [@2017-09-01T00:00:00.000, @2017-12-30T23:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "DateTimeIncludedInPrecisionTrue",
      "invalid": "false",
      "expression": "Interval [@2017-09-01T00:00:00, @2017-09-01T00:00:00] included in day of Interval [@2017-09-01T00:00:00.000, @2017-12-30T23:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Included In",
      "testName": "DateTimeIncludedInPrecisionNull",
      "invalid": "false",
      "expression": "Interval [@2017-09-01T00:00:00, @2017-09-01T00:00:00] included in millisecond of Interval [@2017-09-01T00:00:00.000, @2017-12-30T23:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[5, null)",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "TestIntersectNull",
      "invalid": "false",
      "expression": "Interval[1, 10] intersect Interval[5, null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "true",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "TestIntersectNull1",
      "invalid": "false",
      "expression": "start of (Interval[1, 10] intersect Interval[5, null)) <= 10"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "true",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "TestIntersectNull2",
      "invalid": "false",
      "expression": "start of (Interval[1, 10] intersect Interval[5, null)) >= 5"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "false",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "TestIntersectNull3",
      "invalid": "false",
      "expression": "start of (Interval[1, 10] intersect Interval[5, null)) > 10"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "false",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "TestIntersectNull4",
      "invalid": "false",
      "expression": "start of (Interval[1, 10] intersect Interval[5, null)) < 5"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ 4, 10 ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "IntegerIntervalIntersectTest4to10",
      "invalid": "false",
      "expression": "Interval[1, 10] intersect Interval[4, 10]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "IntegerIntervalIntersectTestNull",
      "invalid": "false",
      "expression": "Interval[1, 10] intersect Interval[11, 20]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ 4.0, 10.0 ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "DecimalIntervalIntersectTest4to10",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] intersect Interval[4.0, 10.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "DecimalIntervalIntersectTestNull",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] intersect Interval[11.0, 20.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ 5.0 'g', 10.0 'g' ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "QuantityIntervalIntersectTest5to10",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] intersect Interval[5.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "QuantityIntervalIntersectTestNull",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] intersect Interval[11.0 'g', 20.0 'g']"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ @2012-01-07T, @2012-01-10T ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "DateTimeIntersect",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 14)] intersect Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 10)]"
    },
    {
      "testStatus": "error",
      "expected": "Interval [ @T04:59:59.999, @T06:59:59.999 ]",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "173",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[@T04:59:59.999, @T09:59:59.999] intersect Interval[@T04:59:59.999, @T06:59:59.999]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Intersect",
      "testName": "TimeIntersect",
      "invalid": "false",
      "expression": "Interval[@T04:59:59.999, @T09:59:59.999] intersect Interval[@T04:59:59.999, @T06:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equivalent",
      "testName": "IntegerIntervalEquivalentTrue",
      "invalid": "false",
      "expression": "Interval[1, 10] ~ Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equivalent",
      "testName": "IntegerIntervalEquivalentFalse",
      "invalid": "false",
      "expression": "Interval[44, 50] ~ Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equivalent",
      "testName": "DecimalIntervalEquivalentTrue",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] ~ Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equivalent",
      "testName": "DecimalIntervalEquivalentFalse",
      "invalid": "false",
      "expression": "Interval[11.0, 20.0] ~ Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equivalent",
      "testName": "QuantityIntervalEquivalentTrue",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] ~ Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equivalent",
      "testName": "QuantityIntervalEquivalentFalse",
      "invalid": "false",
      "expression": "Interval[11.0 'g', 20.0 'g'] ~ Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equivalent",
      "testName": "DateTimeEquivalentTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 14)] ~ Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 14)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equivalent",
      "testName": "DateTimeEquivalentFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 14)] ~ Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 15)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equivalent",
      "testName": "TimeEquivalentTrue",
      "invalid": "false",
      "expression": "Interval[@T04:59:59.999, @T09:59:59.999] ~ Interval[@T04:59:59.999, @T09:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Equivalent",
      "testName": "TimeEquivalentFalse",
      "invalid": "false",
      "expression": "Interval[@T04:59:59.999, @T09:59:59.999] ~ Interval[@T04:58:59.999, @T09:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Meets",
      "testName": "TestMeetsNull",
      "invalid": "false",
      "expression": "Interval(null, 5] meets Interval(null, 15)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Meets",
      "testName": "IntegerIntervalMeetsTrue",
      "invalid": "false",
      "expression": "Interval[1, 10] meets Interval[11, 20]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Meets",
      "testName": "IntegerIntervalMeetsFalse",
      "invalid": "false",
      "expression": "Interval[1, 10] meets Interval[44, 50]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Meets",
      "testName": "DecimalIntervalMeetsTrue",
      "invalid": "false",
      "expression": "Interval[3.01, 5.00000001] meets Interval[5.00000002, 8.50]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Meets",
      "testName": "DecimalIntervalMeetsFalse",
      "invalid": "false",
      "expression": "Interval[3.01, 5.00000001] meets Interval[5.5, 8.50]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Meets",
      "testName": "QuantityIntervalMeetsTrue",
      "invalid": "false",
      "expression": "Interval[3.01 'g', 5.00000001 'g'] meets Interval[5.00000002 'g', 8.50 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Meets",
      "testName": "QuantityIntervalMeetsFalse",
      "invalid": "false",
      "expression": "Interval[3.01 'g', 5.00000001 'g'] meets Interval[5.5 'g', 8.50 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Meets",
      "testName": "DateTimeMeetsTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 14)] meets Interval[DateTime(2012, 1, 15), DateTime(2012, 1, 25)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Meets",
      "testName": "DateTimeMeetsFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 14)] meets Interval[DateTime(2012, 1, 20), DateTime(2012, 1, 25)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Meets",
      "testName": "TimeMeetsTrue",
      "invalid": "false",
      "expression": "Interval[@T04:59:59.999, @T09:59:59.999] meets Interval[@T10:00:00.000, @T19:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Meets",
      "testName": "TimeMeetsFalse",
      "invalid": "false",
      "expression": "Interval[@T04:59:59.999, @T09:59:59.999] meets Interval[@T10:12:00.000, @T19:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsBefore",
      "testName": "TestMeetsBeforeNull",
      "invalid": "false",
      "expression": "Interval(null, 5] meets before Interval(null, 25]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsBefore",
      "testName": "IntegerIntervalMeetsBeforeTrue",
      "invalid": "false",
      "expression": "Interval[1, 10] meets before Interval[11, 20]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsBefore",
      "testName": "IntegerIntervalMeetsBeforeFalse",
      "invalid": "false",
      "expression": "Interval[1, 10] meets before Interval[44, 50]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsBefore",
      "testName": "DecimalIntervalMeetsBeforeTrue",
      "invalid": "false",
      "expression": "Interval[3.50000001, 5.00000011] meets before Interval[5.00000012, 8.50]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsBefore",
      "testName": "DecimalIntervalMeetsBeforeFalse",
      "invalid": "false",
      "expression": "Interval[8.01, 15.00000001] meets before Interval[15.00000000, 18.50]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsBefore",
      "testName": "QuantityIntervalMeetsBeforeTrue",
      "invalid": "false",
      "expression": "Interval[3.50000001 'g', 5.00000011 'g'] meets before Interval[5.00000012 'g', 8.50 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsBefore",
      "testName": "QuantityIntervalMeetsBeforeFalse",
      "invalid": "false",
      "expression": "Interval[8.01 'g', 15.00000001 'g'] meets before Interval[15.00000000 'g', 18.50 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsBefore",
      "testName": "DateTimeMeetsBeforeTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 14)] meets Interval[DateTime(2012, 1, 15), DateTime(2012, 1, 25)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsBefore",
      "testName": "DateTimeMeetsBeforeFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 14)] meets Interval[DateTime(2012, 1, 20), DateTime(2012, 1, 25)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsBefore",
      "testName": "TimeMeetsBeforeTrue",
      "invalid": "false",
      "expression": "Interval[@T04:59:59.999, @T09:59:59.999] meets Interval[@T10:00:00.000, @T19:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsBefore",
      "testName": "TimeMeetsBeforeFalse",
      "invalid": "false",
      "expression": "Interval[@T04:59:59.999, @T09:59:59.999] meets Interval[@T10:12:00.000, @T19:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsAfter",
      "testName": "TestMeetsAfterNull",
      "invalid": "false",
      "expression": "Interval(null, 5] meets after Interval[11, null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsAfter",
      "testName": "IntegerIntervalMeetsAfterTrue",
      "invalid": "false",
      "expression": "Interval[11, 20] meets after Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsAfter",
      "testName": "IntegerIntervalMeetsAfterFalse",
      "invalid": "false",
      "expression": "Interval[44, 50] meets after Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsAfter",
      "testName": "DecimalIntervalMeetsAfterTrue",
      "invalid": "false",
      "expression": "Interval[55.00000123, 128.032156] meets after Interval[12.00258, 55.00000122]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsAfter",
      "testName": "DecimalIntervalMeetsAfterFalse",
      "invalid": "false",
      "expression": "Interval[55.00000124, 150.222222] meets after Interval[12.00258, 55.00000122]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsAfter",
      "testName": "QuantityIntervalMeetsAfterTrue",
      "invalid": "false",
      "expression": "Interval[55.00000123 'g', 128.032156 'g'] meets after Interval[12.00258 'g', 55.00000122 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsAfter",
      "testName": "QuantityIntervalMeetsAfterFalse",
      "invalid": "false",
      "expression": "Interval[55.00000124 'g', 150.222222 'g'] meets after Interval[12.00258 'g', 55.00000122 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsAfter",
      "testName": "DateTimeMeetsAfterTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 15), DateTime(2012, 1, 25)] meets Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 14)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsAfter",
      "testName": "DateTimeMeetsAfterFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 20), DateTime(2012, 1, 25)] meets Interval[DateTime(2012, 1, 7), DateTime(2012, 1, 14)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsAfter",
      "testName": "TimeMeetsAfterTrue",
      "invalid": "false",
      "expression": "Interval[@T10:00:00.000, @T19:59:59.999] meets Interval[@T04:59:59.999, @T09:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "MeetsAfter",
      "testName": "TimeMeetsAfterFalse",
      "invalid": "false",
      "expression": "Interval[@T10:12:00.000, @T19:59:59.999] meets Interval[@T04:59:59.999, @T09:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "NotEqual",
      "testName": "IntegerIntervalNotEqualTrue",
      "invalid": "false",
      "expression": "Interval[1, 10] != Interval[11, 20]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "NotEqual",
      "testName": "IntegerIntervalNotEqualFalse",
      "invalid": "false",
      "expression": "Interval[1, 10] != Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "NotEqual",
      "testName": "DecimalIntervalNotEqualTrue",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] != Interval[11.0, 20.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "NotEqual",
      "testName": "DecimalIntervalNotEqualFalse",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] != Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "NotEqual",
      "testName": "QuantityIntervalNotEqualTrue",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] != Interval[11.0 'g', 20.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "NotEqual",
      "testName": "QuantityIntervalNotEqualFalse",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] != Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "NotEqual",
      "testName": "DateTimeNotEqualTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 15, 0, 0, 0, 0), DateTime(2012, 1, 25, 0, 0, 0, 0)] != Interval[DateTime(2012, 1, 15, 0, 0, 0, 0), DateTime(2012, 1, 25, 0, 0, 0, 22)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "NotEqual",
      "testName": "DateTimeNotEqualFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 15, 0, 0, 0, 0), DateTime(2012, 1, 25, 0, 0, 0, 0)] != Interval[DateTime(2012, 1, 15, 0, 0, 0, 0), DateTime(2012, 1, 25, 0, 0, 0, 0)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "NotEqual",
      "testName": "TimeNotEqualTrue",
      "invalid": "false",
      "expression": "Interval[@T10:00:00.000, @T19:59:59.999] != Interval[@T10:10:00.000, @T19:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "NotEqual",
      "testName": "TimeNotEqualFalse",
      "invalid": "false",
      "expression": "Interval[@T10:00:00.000, @T19:59:59.999] != Interval[@T10:00:00.000, @T19:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrAfter",
      "testName": "TestOnOrAfterNull",
      "invalid": "false",
      "expression": "Interval[@2012-12-01, @2013-12-01] on or after (null as Interval<Date>)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrAfter",
      "testName": "TestOnOrAfterDateTrue",
      "invalid": "false",
      "expression": "Interval[@2012-12-01, @2013-12-01] on or after month of @2012-11-15"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrAfter",
      "testName": "TestOnOrAfterDateFalse",
      "invalid": "false",
      "expression": "@2012-11-15 on or after month of Interval[@2012-12-01, @2013-12-01]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrAfter",
      "testName": "TestOnOrAfterTimeTrue",
      "invalid": "false",
      "expression": "Interval[@T10:00:00.000, @T19:59:59.999] on or after hour of Interval[@T08:00:00.000, @T09:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrAfter",
      "testName": "TestOnOrAfterTimeFalse",
      "invalid": "false",
      "expression": "Interval[@T10:00:00.000, @T19:59:59.999] on or after hour of Interval[@T08:00:00.000, @T11:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrAfter",
      "testName": "TestOnOrAfterIntegerTrue",
      "invalid": "false",
      "expression": "Interval[6, 10] on or after 6"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrAfter",
      "testName": "TestOnOrAfterDecimalFalse",
      "invalid": "false",
      "expression": "2.5 on or after Interval[1.666, 2.50000001]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrAfter",
      "testName": "TestOnOrAfterQuantityTrue",
      "invalid": "false",
      "expression": "2.5 'mg' on or after Interval[1.666 'mg', 2.50000000 'mg']"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrBefore",
      "testName": "TestOnOrBeforeNull",
      "invalid": "false",
      "expression": "Interval[@2012-12-01, @2013-12-01] on or before (null as Interval<Date>)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrBefore",
      "testName": "TestOnOrBeforeDateTrue",
      "invalid": "false",
      "expression": "Interval[@2012-10-01, @2012-11-01] on or before month of @2012-11-15"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrBefore",
      "testName": "TestOnOrBeforeDateFalse",
      "invalid": "false",
      "expression": "@2012-11-15 on or before month of Interval[@2012-10-01, @2013-12-01]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrBefore",
      "testName": "TestOnOrBeforeTimeTrue",
      "invalid": "false",
      "expression": "Interval[@T05:00:00.000, @T07:59:59.999] on or before hour of Interval[@T08:00:00.000, @T09:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrBefore",
      "testName": "TestOnOrBeforeTimeFalse",
      "invalid": "false",
      "expression": "Interval[@T10:00:00.000, @T19:59:59.999] on or before hour of Interval[@T08:00:00.000, @T11:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrBefore",
      "testName": "TestOnOrBeforeIntegerTrue",
      "invalid": "false",
      "expression": "Interval[4, 6] on or before 6"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrBefore",
      "testName": "TestOnOrBeforeDecimalFalse",
      "invalid": "false",
      "expression": "1.6667 on or before Interval[1.666, 2.50000001]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OnOrBefore",
      "testName": "TestOnOrBeforeQuantityTrue",
      "invalid": "false",
      "expression": "1.666 'mg' on or before Interval[1.666 'mg', 2.50000000 'mg']"
    },
    {
      "testStatus": "error",
      "expected": "null",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "127",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[null, null] overlaps Interval[1, 10]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Overlaps",
      "testName": "TestOverlapsNull",
      "invalid": "false",
      "expression": "Interval[null, null] overlaps Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Overlaps",
      "testName": "IntegerIntervalOverlapsTrue",
      "invalid": "false",
      "expression": "Interval[1, 10] overlaps Interval[4, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Overlaps",
      "testName": "IntegerIntervalOverlapsFalse",
      "invalid": "false",
      "expression": "Interval[1, 10] overlaps Interval[11, 20]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Overlaps",
      "testName": "DecimalIntervalOverlapsTrue",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] overlaps Interval[4.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Overlaps",
      "testName": "DecimalIntervalOverlapsFalse",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] overlaps Interval[11.0, 20.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Overlaps",
      "testName": "QuantityIntervalOverlapsTrue",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] overlaps Interval[5.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Overlaps",
      "testName": "QuantityIntervalOverlapsFalse",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] overlaps Interval[11.0 'g', 20.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Overlaps",
      "testName": "DateTimeOverlapsTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 25)] overlaps Interval[DateTime(2012, 1, 15), DateTime(2012, 1, 28)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Overlaps",
      "testName": "DateTimeOverlapsFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 25)] overlaps Interval[DateTime(2012, 1, 26), DateTime(2012, 1, 28)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Overlaps",
      "testName": "TimeOverlapsTrue",
      "invalid": "false",
      "expression": "Interval[@T10:00:00.000, @T19:59:59.999] overlaps Interval[@T12:00:00.000, @T21:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Overlaps",
      "testName": "TimeOverlapsFalse",
      "invalid": "false",
      "expression": "Interval[@T10:00:00.000, @T19:59:59.999] overlaps Interval[@T20:00:00.000, @T21:59:59.999]"
    },
    {
      "testStatus": "error",
      "expected": "null",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "134",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[null, null] overlaps before Interval[1, 10]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsBefore",
      "testName": "TestOverlapsBeforeNull",
      "invalid": "false",
      "expression": "Interval[null, null] overlaps before Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsBefore",
      "testName": "IntegerIntervalOverlapsBeforeTrue",
      "invalid": "false",
      "expression": "Interval[1, 10] overlaps before Interval[4, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsBefore",
      "testName": "IntegerIntervalOverlapsBeforeFalse",
      "invalid": "false",
      "expression": "Interval[4, 10] overlaps before Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsBefore",
      "testName": "DecimalIntervalOverlapsBeforeTrue",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] overlaps before Interval[4.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsBefore",
      "testName": "DecimalIntervalOverlapsBeforeFalse",
      "invalid": "false",
      "expression": "Interval[4.0, 10.0] overlaps before Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsBefore",
      "testName": "QuantityIntervalOverlapsBeforeTrue",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] overlaps before Interval[5.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsBefore",
      "testName": "QuantityIntervalOverlapsBeforeFalse",
      "invalid": "false",
      "expression": "Interval[5.0 'g', 10.0 'g'] overlaps before Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsBefore",
      "testName": "DateTimeOverlapsBeforeTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 25)] overlaps Interval[DateTime(2012, 1, 15), DateTime(2012, 1, 28)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsBefore",
      "testName": "DateTimeOverlapsBeforeFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 25)] overlaps Interval[DateTime(2012, 1, 26), DateTime(2012, 1, 28)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsBefore",
      "testName": "TimeOverlapsBeforeTrue",
      "invalid": "false",
      "expression": "Interval[@T10:00:00.000, @T19:59:59.999] overlaps Interval[@T12:00:00.000, @T21:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsBefore",
      "testName": "TimeOverlapsBeforeFalse",
      "invalid": "false",
      "expression": "Interval[@T10:00:00.000, @T19:59:59.999] overlaps Interval[@T20:00:00.000, @T21:59:59.999]"
    },
    {
      "testStatus": "error",
      "expected": "null",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "133",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[null, null] overlaps after Interval[1, 10]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsAfter",
      "testName": "TestOverlapsAfterNull",
      "invalid": "false",
      "expression": "Interval[null, null] overlaps after Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsAfter",
      "testName": "IntegerIntervalOverlapsAfterTrue",
      "invalid": "false",
      "expression": "Interval[4, 15] overlaps after Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsAfter",
      "testName": "IntegerIntervalOverlapsAfterFalse",
      "invalid": "false",
      "expression": "Interval[4, 10] overlaps after Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsAfter",
      "testName": "DecimalIntervalOverlapsAfterTrue",
      "invalid": "false",
      "expression": "Interval[4.0, 15.0] overlaps after Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsAfter",
      "testName": "DecimalIntervalOverlapsAfterFalse",
      "invalid": "false",
      "expression": "Interval[4.0, 10.0] overlaps after Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsAfter",
      "testName": "QuantityIntervalOverlapsAfterTrue",
      "invalid": "false",
      "expression": "Interval[5.0 'g', 15.0 'g'] overlaps after Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsAfter",
      "testName": "QuantityIntervalOverlapsAfterFalse",
      "invalid": "false",
      "expression": "Interval[5.0 'g', 10.0 'g'] overlaps after Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsAfter",
      "testName": "DateTimeOverlapsAfterTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 15), DateTime(2012, 1, 28)] overlaps Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 25)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsAfter",
      "testName": "DateTimeOverlapsAfterFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 26), DateTime(2012, 1, 28)] overlaps Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 25)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsAfter",
      "testName": "TimeOverlapsAfterTrue",
      "invalid": "false",
      "expression": "Interval[@T12:00:00.000, @T21:59:59.999] overlaps Interval[@T10:00:00.000, @T19:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "OverlapsAfter",
      "testName": "TimeOverlapsAfterFalse",
      "invalid": "false",
      "expression": "Interval[@T20:00:00.000, @T21:59:59.999] overlaps Interval[@T10:00:00.000, @T19:59:59.999]"
    },
    {
      "testStatus": "error",
      "expected": "null",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "113",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"point from Interval[null, null]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "PointFrom",
      "testName": "TestPointFromNull",
      "invalid": "false",
      "expression": "point from Interval[null, null]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "PointFrom",
      "testName": "TestPointFromInteger",
      "invalid": "false",
      "expression": "point from Interval[1, 1]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1.0",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "PointFrom",
      "testName": "TestPointFromDecimal",
      "invalid": "false",
      "expression": "point from Interval[1.0, 1.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "1.0'cm'",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "PointFrom",
      "testName": "TestPointFromQuantity",
      "invalid": "false",
      "expression": "point from Interval[1.0 'cm', 1.0 'cm']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperContains",
      "testName": "TimeProperContainsTrue",
      "invalid": "false",
      "expression": "Interval[@T12:00:00.000, @T21:59:59.999] properly includes @T12:00:00.001"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperContains",
      "testName": "TimeProperContainsFalse",
      "invalid": "false",
      "expression": "Interval[@T12:00:00.000, @T21:59:59.999] properly includes @T12:00:00.000"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperContains",
      "testName": "TimeProperContainsNull",
      "invalid": "false",
      "expression": "Interval[@T12:00:00.001, @T21:59:59.999] properly includes @T12:00:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperContains",
      "testName": "TimeProperContainsPrecisionTrue",
      "invalid": "false",
      "expression": "Interval[@T12:00:00.000, @T21:59:59.999] properly includes second of @T12:00:01"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperContains",
      "testName": "TimeProperContainsPrecisionFalse",
      "invalid": "false",
      "expression": "Interval[@T12:00:00.001, @T21:59:59.999] properly includes second of @T12:00:00"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperContains",
      "testName": "TimeProperContainsPrecisionNull",
      "invalid": "false",
      "expression": "Interval[@T12:00:00.001, @T21:59:59.999] properly includes millisecond of @T12:00:00"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperIn",
      "testName": "TimeProperInTrue",
      "invalid": "false",
      "expression": "@T12:00:00.001 properly included in Interval[@T12:00:00.000, @T21:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperIn",
      "testName": "TimeProperInFalse",
      "invalid": "false",
      "expression": "@T12:00:00.000 properly included in  Interval[@T12:00:00.000, @T21:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperIn",
      "testName": "TimeProperInNull",
      "invalid": "false",
      "expression": "@T12:00:00 properly included in Interval[@T12:00:00.001, @T21:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperIn",
      "testName": "TimeProperInPrecisionTrue",
      "invalid": "false",
      "expression": "@T12:00:01 properly included in second of Interval[@T12:00:00.000, @T21:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperIn",
      "testName": "TimeProperInPrecisionFalse",
      "invalid": "false",
      "expression": "@T12:00:00 properly included in second of Interval[@T12:00:00.001, @T21:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperIn",
      "testName": "TimeProperInPrecisionNull",
      "invalid": "false",
      "expression": "@T12:00:00 properly included in millisecond of Interval[@T12:00:00.001, @T21:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "true",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "NullBoundariesProperlyIncludesIntegerInterval",
      "invalid": "false",
      "expression": "Interval[null as Integer, null as Integer] properly includes Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "IntegerIntervalProperlyIncludesTrue",
      "invalid": "false",
      "expression": "Interval[1, 10] properly includes Interval[4, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "IntegerIntervalProperlyIncludesFalse",
      "invalid": "false",
      "expression": "Interval[1, 10] properly includes Interval[4, 15]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "DecimalIntervalProperlyIncludesTrue",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] properly includes Interval[4.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "DecimalIntervalProperlyIncludesFalse",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] properly includes Interval[4.0, 15.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "QuantityIntervalProperlyIncludesTrue",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] properly includes Interval[5.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "QuantityIntervalProperlyIncludesFalse",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] properly includes Interval[5.0 'g', 15.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "DateTimeProperlyIncludesTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 15), DateTime(2012, 1, 28)] properly includes Interval[DateTime(2012, 1, 16), DateTime(2012, 1, 27)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "DateTimeProperlyIncludesFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 15), DateTime(2012, 1, 28)] properly includes Interval[DateTime(2012, 1, 16), DateTime(2012, 1, 29)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "TimeProperlyIncludesTrue",
      "invalid": "false",
      "expression": "Interval[@T12:00:00.000, @T21:59:59.999] properly includes Interval[@T12:01:01.000, @T21:59:59.998]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "TimeProperlyIncludesFalse",
      "invalid": "false",
      "expression": "Interval[@T12:00:00.000, @T21:59:59.999] properly includes Interval[@T12:01:01.000, @T22:00:00.000]"
    },
    {
      "testStatus": "error",
      "expected": "true",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "139",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[1, 10] properly included in Interval[null, null]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "IntegerIntervalProperlyIncludedInNullBoundaries",
      "invalid": "false",
      "expression": "Interval[1, 10] properly included in Interval[null, null]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "IntegerIntervalProperlyIncludedInTrue",
      "invalid": "false",
      "expression": "Interval[4, 10] properly included in Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "IntegerIntervalProperlyIncludedInFalse",
      "invalid": "false",
      "expression": "Interval[4, 15] properly included in Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "DecimalIntervalProperlyIncludedInTrue",
      "invalid": "false",
      "expression": "Interval[4.0, 10.0] properly included in Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "DecimalIntervalProperlyIncludedInFalse",
      "invalid": "false",
      "expression": "Interval[4.0, 15.0] properly included in Interval[1.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "QuantityIntervalProperlyIncludedInTrue",
      "invalid": "false",
      "expression": "Interval[5.0 'g', 10.0 'g'] properly included in Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "QuantityIntervalProperlyIncludedInFalse",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] properly included in Interval[5.0 'g', 15.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "DateTimeProperlyIncludedInTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 16), DateTime(2012, 1, 27)] properly included in Interval[DateTime(2012, 1, 15), DateTime(2012, 1, 28)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "DateTimeProperlyIncludedInFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 16), DateTime(2012, 1, 29)] properly included in Interval[DateTime(2012, 1, 15), DateTime(2012, 1, 28)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "TimeProperlyIncludedInTrue",
      "invalid": "false",
      "expression": "Interval[@T12:01:01.000, @T21:59:59.998] properly included in Interval[@T12:00:00.000, @T21:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "TimeProperlyIncludedInFalse",
      "invalid": "false",
      "expression": "Interval[@T12:01:01.000, @T22:00:00.000] properly included in Interval[@T12:00:00.000, @T21:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Start",
      "testName": "IntegerIntervalStart",
      "invalid": "false",
      "expression": "start of Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1.0",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Start",
      "testName": "DecimalIntervalStart",
      "invalid": "false",
      "expression": "start of Interval[1.0, 10.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "1.0'g'",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Start",
      "testName": "QuantityIntervalStart",
      "invalid": "false",
      "expression": "start of Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2016-05-01T00:00:00.000",
      "expected": "@2016-05-01T00:00:00.000",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Start",
      "testName": "DateTimeIntervalStart",
      "invalid": "false",
      "expression": "start of Interval[@2016-05-01T00:00:00.000, @2016-05-02T00:00:00.000]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T00:00:00.000",
      "expected": "@T00:00:00.000",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Start",
      "testName": "TimeIntervalStart",
      "invalid": "false",
      "expression": "start of Interval[@T00:00:00.000, @T23:59:59.599]"
    },
    {
      "testStatus": "error",
      "expected": "null",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "125",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[null, null] starts Interval[1, 10]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Starts",
      "testName": "TestStartsNull",
      "invalid": "false",
      "expression": "Interval[null, null] starts Interval[1, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Starts",
      "testName": "IntegerIntervalStartsTrue",
      "invalid": "false",
      "expression": "Interval[4, 10] starts Interval[4, 15]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Starts",
      "testName": "IntegerIntervalStartsFalse",
      "invalid": "false",
      "expression": "Interval[1, 10] starts Interval[4, 10]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Starts",
      "testName": "DecimalIntervalStartsTrue",
      "invalid": "false",
      "expression": "Interval[4.0, 10.0] starts Interval[4.0, 15.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Starts",
      "testName": "DecimalIntervalStartsFalse",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] starts Interval[4.0, 10.0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Starts",
      "testName": "QuantityIntervalStartsTrue",
      "invalid": "false",
      "expression": "Interval[5.0 'g', 10.0 'g'] starts Interval[5.0 'g', 15.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Starts",
      "testName": "QuantityIntervalStartsFalse",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] starts Interval[5.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Starts",
      "testName": "DateTimeStartsTrue",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 25)] starts Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 27)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Starts",
      "testName": "DateTimeStartsFalse",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 25)] starts Interval[DateTime(2012, 1, 6), DateTime(2012, 1, 27)]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Starts",
      "testName": "TimeStartsTrue",
      "invalid": "false",
      "expression": "Interval[@T05:59:59.999, @T15:59:59.999] starts Interval[@T05:59:59.999, @T17:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Starts",
      "testName": "TimeStartsFalse",
      "invalid": "false",
      "expression": "Interval[@T05:59:59.999, @T15:59:59.999] starts Interval[@T04:59:59.999, @T17:59:59.999]"
    },
    {
      "testStatus": "error",
      "expected": "null",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "124",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[null, null] union Interval[1, 10]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Union",
      "testName": "TestUnionNull",
      "invalid": "false",
      "expression": "Interval[null, null] union Interval[1, 10]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ 1, 15 ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Union",
      "testName": "IntegerIntervalUnion1To15",
      "invalid": "false",
      "expression": "Interval[1, 10] union Interval[4, 15]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Union",
      "testName": "IntegerIntervalUnionNull",
      "invalid": "false",
      "expression": "Interval[1, 10] union Interval[44, 50]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ 1.0, 15.0 ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Union",
      "testName": "DecimalIntervalUnion1To15",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] union Interval[4.0, 15.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Union",
      "testName": "DecimalIntervalUnionNull",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0] union Interval[14.0, 15.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ 1.0 'g', 15.0 'g' ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Union",
      "testName": "QuantityIntervalUnion1To15",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] union Interval[5.0 'g', 15.0 'g']"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Union",
      "testName": "QuantityIntervalUnionNull",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g'] union Interval[14.0 'g', 15.0 'g']"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval [ @2012-01-05T, @2012-01-28T ]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Union",
      "testName": "DateTimeUnion",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 25)] union Interval[DateTime(2012, 1, 25), DateTime(2012, 1, 28)]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Union",
      "testName": "DateTimeUnionNull",
      "invalid": "false",
      "expression": "Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 25)] union Interval[DateTime(2012, 1, 27), DateTime(2012, 1, 28)]"
    },
    {
      "testStatus": "error",
      "expected": "Interval [ @T05:59:59.999, @T20:59:59.999 ]",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "169",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[@T05:59:59.999, @T15:59:59.999] union Interval[@T10:59:59.999, @T20:59:59.999]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Union",
      "testName": "TimeUnion",
      "invalid": "false",
      "expression": "Interval[@T05:59:59.999, @T15:59:59.999] union Interval[@T10:59:59.999, @T20:59:59.999]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Union",
      "testName": "TimeUnionNull",
      "invalid": "false",
      "expression": "Interval[@T05:59:59.999, @T15:59:59.999] union Interval[@T16:59:59.999, @T20:59:59.999]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "9",
      "expected": "9",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Width",
      "testName": "IntegerIntervalTestWidth9",
      "invalid": "false",
      "expression": "width of Interval[1, 10]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Width",
      "testName": "IntervalTestWidthNull",
      "invalid": "false",
      "expression": "width of (null as Interval<Any>)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "11",
      "expected": "11.0",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Width",
      "testName": "DecimalIntervalTestWidth11",
      "invalid": "false",
      "expression": "width of Interval[4.0, 15.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "5.0'g'",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Width",
      "testName": "QuantityIntervalTestWidth5",
      "invalid": "false",
      "expression": "width of Interval[5.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Width",
      "testName": "DateTimeWidth",
      "invalid": "true",
      "expression": "width of Interval[DateTime(2012, 1, 5), DateTime(2012, 1, 25)]",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Width",
      "testName": "TimeWidth",
      "invalid": "true",
      "expression": "width of Interval[@T05:59:59.999, @T15:59:59.999]",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[1, 10]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "IntegerIntervalTest",
      "invalid": "false",
      "expression": "Interval[1, 10]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[11, 20]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "IntegerIntervalTest2",
      "invalid": "false",
      "expression": "Interval[11, 20]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[44, 50]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "IntegerIntervalTest3",
      "invalid": "false",
      "expression": "Interval[44, 50]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[4, 10]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "IntegerIntervalTest4",
      "invalid": "false",
      "expression": "Interval[4, 10]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[4, 15]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "IntegerIntervalTest5",
      "invalid": "false",
      "expression": "Interval[4, 15]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[1.0, 10.0]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "DecimalIntervalTest",
      "invalid": "false",
      "expression": "Interval[1.0, 10.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[11.0, 20.0]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "DecimalIntervalTest2",
      "invalid": "false",
      "expression": "Interval[11.0, 20.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[4.0, 10.0]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "DecimalIntervalTest3",
      "invalid": "false",
      "expression": "Interval[4.0, 10.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[4.0, 15.0]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "DecimalIntervalTest4",
      "invalid": "false",
      "expression": "Interval[4.0, 15.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[14.0, 15.0]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "DecimalIntervalTest5",
      "invalid": "false",
      "expression": "Interval[14.0, 15.0]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[1.0 'g', 10.0 'g']",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "QuantityIntervalTest",
      "invalid": "false",
      "expression": "Interval[1.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[11.0 'g', 20.0 'g']",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "QuantityIntervalTest2",
      "invalid": "false",
      "expression": "Interval[11.0 'g', 20.0 'g']"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[5.0 'g', 10.0 'g']",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "QuantityIntervalTest3",
      "invalid": "false",
      "expression": "Interval[5.0 'g', 10.0 'g']"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[5.0 'g', 15.0 'g']",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "QuantityIntervalTest4",
      "invalid": "false",
      "expression": "Interval[5.0 'g', 15.0 'g']"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[14.0 'g', 15.0 'g']",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "QuantityIntervalTest5",
      "invalid": "false",
      "expression": "Interval[14.0 'g', 15.0 'g']"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[@2016-05-01T00:00:00.000, @2016-05-02T00:00:00.000]",
      "error": {},
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "DateTimeIntervalTest",
      "invalid": "false",
      "expression": "Interval[@2016-05-01T00:00:00.000, @2016-05-02T00:00:00.000]"
    },
    {
      "testStatus": "error",
      "expected": "Interval[@T00:00:00.000, @T23:59:59.599]",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "122",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Interval[@T00:00:00.000, @T23:59:59.599]\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "TimeIntervalTest",
      "invalid": "false",
      "expression": "Interval[@T00:00:00.000, @T23:59:59.599]"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valueRange\":{\"low\":{\"value\":1,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"},\"high\":{\"value\":10,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"}}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valueRange\":{\"low\":{\"value\":11,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"},\"high\":{\"value\":20,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"}}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Interval\"}],\"name\":\"return\",\"valueRange\":{\"low\":{\"value\":44,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"},\"high\":{\"value\":50,\"unit\":\"1\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"1\"}}}]}",
      "expected": "{Interval[1, 10], Interval[11, 20], Interval[44, 50]}",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "CollapseIntervalTestInteger",
      "invalid": "false",
      "expression": "{Interval[1, 10], Interval[11, 20], Interval[44, 50]}"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "InvalidIntegerInterval",
      "invalid": "true",
      "expression": "Interval[5, 3]",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlIntervalOperatorsTest",
      "groupName": "Interval",
      "testName": "InvalidIntegerIntervalA",
      "invalid": "true",
      "expression": "Interval[5, 5)",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":5},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":6}]}",
      "expected": "{1, 1, 2, 4, 5, 6}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Sort",
      "testName": "simpleSortAsc",
      "invalid": "false",
      "expression": "({4, 5, 1, 6, 2, 1}) sL sort asc"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":6},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":5},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1}]}",
      "expected": "{6, 5, 4, 2, 1, 1}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Sort",
      "testName": "simpleSortDesc",
      "invalid": "false",
      "expression": "({4, 5, 1, 6, 2, 1}) sL sort desc"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"Armadillo\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"Wolf\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"aardvark\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"alligator\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"back\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"iguana\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"zebra\"}]}",
      "expected": "{'Armadillo', 'Wolf', 'aardvark', 'alligator', 'back', 'iguana', 'zebra'}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Sort",
      "testName": "simpleSortStringAsc",
      "invalid": "false",
      "expression": "({'back', 'aardvark', 'alligator', 'zebra', 'iguana', 'Wolf', 'Armadillo'}) sls sort asc"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"zebra\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"iguana\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"back\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"alligator\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"aardvark\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"Wolf\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"Armadillo\"}]}",
      "expected": "{'zebra', 'iguana', 'back', 'alligator', 'aardvark', 'Wolf', 'Armadillo'}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Sort",
      "testName": "simpleSortStringDesc",
      "invalid": "false",
      "expression": "({'back', 'aardvark', 'alligator', 'zebra', 'iguana', 'Wolf', 'Armadillo'}) sls sort desc"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-01-01T12\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-01-01\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-10-05\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-10-05T10\"}]}",
      "expected": "{DateTime(2012, 1, 1), DateTime(2012, 1, 1, 12), DateTime(2012, 10, 5), DateTime(2012, 10, 5, 10)}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Sort",
      "testName": "SortDatesAsc",
      "invalid": "false",
      "expression": "({ DateTime(2012, 10, 5, 10), DateTime(2012, 1, 1), DateTime(2012, 1, 1, 12), DateTime(2012, 10, 5) }) S sort asc"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-10-05T10\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-10-05\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-01-01\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-01-01T12\"}]}",
      "expected": "{DateTime(2012, 10, 5, 10), DateTime(2012, 10, 5), DateTime(2012, 1, 1, 12), DateTime(2012, 1, 1)}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Sort",
      "testName": "SortDatesDesc",
      "invalid": "false",
      "expression": "({ DateTime(2012, 10, 5, 10), DateTime(2012, 1, 1), DateTime(2012, 1, 1, 12), DateTime(2012, 10, 5) }) S sort desc"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1}]}",
      "expected": "{3, 2, 1}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Sort",
      "testName": "intList",
      "invalid": "false",
      "expression": "{ 3, 2, 1 }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Decimal\"}],\"name\":\"return\",\"valueDecimal\":3.8},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Decimal\"}],\"name\":\"return\",\"valueDecimal\":2.4},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Decimal\"}],\"name\":\"return\",\"valueDecimal\":1.9}]}",
      "expected": "{3.8, 2.4, 1.9}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Sort",
      "testName": "decimalList",
      "invalid": "false",
      "expression": "{ 3.8, 2.4, 1.9 }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Quantity\"}],\"name\":\"return\",\"valueQuantity\":{\"value\":19.99,\"unit\":\"[lb_av]\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"[lb_av]\"}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Quantity\"}],\"name\":\"return\",\"valueQuantity\":{\"value\":17.33,\"unit\":\"[lb_av]\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"[lb_av]\"}},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Quantity\"}],\"name\":\"return\",\"valueQuantity\":{\"value\":10.66,\"unit\":\"[lb_av]\",\"system\":\"http://unitsofmeasure.org\",\"code\":\"[lb_av]\"}}]}",
      "expected": "{19.99 '[lb_av]', 17.33 '[lb_av]', 10.66 '[lb_av]'}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Sort",
      "testName": "quantityList",
      "invalid": "false",
      "expression": "{ 19.99 '[lb_av]', 17.33 '[lb_av]', 10.66 '[lb_av]' }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2016\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2015\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2010\"}]}",
      "expected": "{@2016T, @2015T, @2010T}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Sort",
      "testName": "dateTimeList",
      "invalid": "false",
      "expression": "{ DateTime(2016), DateTime(2015), DateTime(2010) }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"15:59:59.999\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"15:12:59.999\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"15:12:13.999\"}]}",
      "expected": "{@T15:59:59.999, @T15:12:59.999, @T15:12:13.999}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Sort",
      "testName": "timeList",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T15:12:59.999, @T15:12:13.999 }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "true",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Contains",
      "testName": "ContainsABNullHasNull",
      "invalid": "false",
      "expression": "{ 'a', 'b', null } contains null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Contains",
      "testName": "ContainsNullFirst",
      "invalid": "false",
      "expression": "{ null, 'b', 'c' } contains 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Contains",
      "testName": "ContainsABCHasA",
      "invalid": "false",
      "expression": "{ 'a', 'b', 'c' } contains 'a'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Contains",
      "testName": "ContainsJan2012True",
      "invalid": "false",
      "expression": "{ DateTime(2012, 10, 5), DateTime(2012, 9, 5), DateTime(2012, 1, 1) } contains DateTime(2012, 1, 1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Contains",
      "testName": "ContainsJan2012False",
      "invalid": "false",
      "expression": "{ DateTime(2012, 10, 5), DateTime(2012, 9, 5), DateTime(2012, 10, 1) } contains DateTime(2012, 1, 1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Contains",
      "testName": "ContainsTimeTrue",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T05:59:59.999, @T20:59:59.999 } contains @T05:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Contains",
      "testName": "ContainsTimeFalse",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T05:59:59.999, @T20:59:59.999 } contains @T08:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Contains",
      "testName": "ContainsNullLeft",
      "invalid": "false",
      "expression": "null contains 'a'"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Descendents",
      "testName": "DescendentsEmptyList",
      "invalid": "false",
      "expression": "(null).descendents()"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Distinct",
      "testName": "DistinctEmptyList",
      "invalid": "false",
      "expression": "distinct {}"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{ null }",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Distinct",
      "testName": "DistinctNullNullNull",
      "invalid": "false",
      "expression": "distinct { null, null, null}"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "a",
      "expected": "{'a', null}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Distinct",
      "testName": "DistinctANullANull",
      "invalid": "false",
      "expression": "distinct { 'a', null, 'a', null}"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3}]}",
      "expected": "{1,2,3}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Distinct",
      "testName": "Distinct112233",
      "invalid": "false",
      "expression": "distinct { 1, 1, 2, 2, 3, 3}"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3}]}",
      "expected": "{1,2,3}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Distinct",
      "testName": "Distinct123123",
      "invalid": "false",
      "expression": "distinct { 1, 2, 3, 1, 2, 3}"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"a\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"b\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"c\"}]}",
      "expected": "{'a','b','c'}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Distinct",
      "testName": "DistinctAABBCC",
      "invalid": "false",
      "expression": "distinct { 'a', 'a', 'b', 'b', 'c', 'c'}"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"a\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"b\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"c\"}]}",
      "expected": "{'a','b','c'}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Distinct",
      "testName": "DistinctABCABC",
      "invalid": "false",
      "expression": "distinct { 'a', 'b', 'c', 'a', 'b', 'c'}"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-10-05\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-01-01\"}]}",
      "expected": "{ DateTime(2012, 10, 5), DateTime(2012, 1, 1)}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Distinct",
      "testName": "DistinctDateTime",
      "invalid": "false",
      "expression": "distinct { DateTime(2012, 10, 5), DateTime(2012, 1, 1), DateTime(2012, 1, 1)}"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"15:59:59.999\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"20:59:59.999\"}]}",
      "expected": "{ @T15:59:59.999, @T20:59:59.999 }",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Distinct",
      "testName": "DistinctTime",
      "invalid": "false",
      "expression": "distinct { @T15:59:59.999, @T20:59:59.999 }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "true",
      "expected": "null",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equal",
      "testName": "EqualNullNull",
      "invalid": "false",
      "expression": "{null} = {null}"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equal",
      "testName": "EqualEmptyListNull",
      "invalid": "false",
      "expression": "{} as List<String> = null"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equal",
      "testName": "EqualNullEmptyList",
      "invalid": "false",
      "expression": "null = {} as List<String>"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equal",
      "testName": "EqualEmptyListAndEmptyList",
      "invalid": "false",
      "expression": "{} = {}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equal",
      "testName": "Equal12And123",
      "invalid": "false",
      "expression": "{ 1, 2 } = { 1, 2, 3 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equal",
      "testName": "Equal123And12",
      "invalid": "false",
      "expression": "{ 1, 2, 3 } = { 1, 2 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equal",
      "testName": "Equal123And123",
      "invalid": "false",
      "expression": "{ 1, 2, 3 } = { 1, 2, 3 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equal",
      "testName": "EqualDateTimeTrue",
      "invalid": "false",
      "expression": "{DateTime(2012, 5, 10, 0, 0, 0, 0), DateTime(2014, 12, 10, 0, 0, 0, 0)} = {DateTime(2012, 5, 10, 0, 0, 0, 0), DateTime(2014, 12, 10, 0, 0, 0, 0)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equal",
      "testName": "EqualDateTimeFalse",
      "invalid": "false",
      "expression": "{DateTime(2012, 5, 10, 0, 0, 0, 0), DateTime(2014, 12, 10, 0, 0, 0, 0)} = {DateTime(2012, 1, 10, 0, 0, 0, 0), DateTime(2014, 12, 10, 0, 0, 0, 0)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equal",
      "testName": "EqualTimeTrue",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999, @T20:59:59.999 } = { @T15:59:59.999, @T20:59:59.999, @T20:59:59.999 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equal",
      "testName": "EqualTimeFalse",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999, @T20:59:59.999 } = { @T10:59:59.999, @T20:59:59.999, @T20:59:59.999 }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Except",
      "testName": "ExceptEmptyListAndEmptyList",
      "invalid": "false",
      "expression": "{} except {}"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4}]}",
      "expected": "{ 1, 4 }",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Except",
      "testName": "Except1234And23",
      "invalid": "false",
      "expression": "{ 1, 2, 3, 4 } except { 2, 3 }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Except",
      "testName": "Except23And1234",
      "invalid": "false",
      "expression": "{ 2, 3 } except { 1, 2, 3, 4 }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2012-05-10",
      "expected": "{@2012-05-10T}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Except",
      "testName": "ExceptDateTimeList",
      "invalid": "false",
      "expression": "{ DateTime(2012, 5, 10), DateTime(2014, 12, 10), DateTime(2010, 1, 1)} except {DateTime(2014, 12, 10), DateTime(2010, 1, 1) }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@T15:59:59.999",
      "expected": "{@T15:59:59.999}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Except",
      "testName": "ExceptTimeList",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999, @T12:59:59.999 } except { @T20:59:59.999, @T12:59:59.999 }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4}]}",
      "expected": "{1, 4}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Except",
      "testName": "ExceptNullRight",
      "invalid": "false",
      "expression": "{ 1, 4 } except null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Exists",
      "testName": "ExistsEmpty",
      "invalid": "false",
      "expression": "Exists({})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Exists",
      "testName": "ExistsListNull",
      "invalid": "false",
      "expression": "Exists({ null })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Exists",
      "testName": "Exists1",
      "invalid": "false",
      "expression": "Exists({ 1 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Exists",
      "testName": "Exists12",
      "invalid": "false",
      "expression": "Exists({ 1, 2 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Exists",
      "testName": "ExistsDateTime",
      "invalid": "false",
      "expression": "Exists({ DateTime(2012, 5, 10), DateTime(2014, 12, 10) })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Exists",
      "testName": "ExistsTime",
      "invalid": "false",
      "expression": "Exists({ @T15:59:59.999, @T20:59:59.999 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Exists",
      "testName": "ExistsNull",
      "invalid": "false",
      "expression": "Exists(null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Flatten",
      "testName": "FlattenEmpty",
      "invalid": "false",
      "expression": "Flatten({{},{}})"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{null, null}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Flatten",
      "testName": "FlattenListNullAndNull",
      "invalid": "false",
      "expression": "Flatten({{null}, {null}})"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4}]}",
      "expected": "{1,2,3,4}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Flatten",
      "testName": "FlattenList12And34",
      "invalid": "false",
      "expression": "Flatten({{1,2}, {3,4}})"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-05-10\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2014-12-10\"}]}",
      "expected": "{ DateTime(2012, 5, 10), DateTime(2014, 12, 10) }",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Flatten",
      "testName": "FlattenDateTime",
      "invalid": "false",
      "expression": "Flatten({ {DateTime(2012, 5, 10)}, {DateTime(2014, 12, 10)} })"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"15:59:59.999\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"20:59:59.999\"}]}",
      "expected": "{ @T15:59:59.999, @T20:59:59.999 }",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Flatten",
      "testName": "FlattenTime",
      "invalid": "false",
      "expression": "Flatten({ {@T15:59:59.999}, {@T20:59:59.999} })"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "First",
      "testName": "FirstEmpty",
      "invalid": "false",
      "expression": "First({})"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "First",
      "testName": "FirstNull1",
      "invalid": "false",
      "expression": "First({ null, 1 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlListOperatorsTest",
      "groupName": "First",
      "testName": "First1Null",
      "invalid": "false",
      "expression": "First({ 1, null })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlListOperatorsTest",
      "groupName": "First",
      "testName": "First12",
      "invalid": "false",
      "expression": "First({ 1, 2 })"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2012-05-10",
      "expected": "DateTime(2012, 5, 10)",
      "testsName": "CqlListOperatorsTest",
      "groupName": "First",
      "testName": "FirstDateTime",
      "invalid": "false",
      "expression": "First({ DateTime(2012, 5, 10), DateTime(2014, 12, 10) })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T15:59:59.999",
      "expected": "@T15:59:59.999",
      "testsName": "CqlListOperatorsTest",
      "groupName": "First",
      "testName": "FirstTime",
      "invalid": "false",
      "expression": "First({ @T15:59:59.999, @T20:59:59.999 })"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "false",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "In",
      "testName": "InNullEmpty",
      "invalid": "false",
      "expression": "null in {}"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "true",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "In",
      "testName": "InNullAnd1Null",
      "invalid": "false",
      "expression": "null in { 1, null }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "In",
      "testName": "In1Null",
      "invalid": "false",
      "expression": "1 in null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "In",
      "testName": "In1And12",
      "invalid": "false",
      "expression": "1 in { 1, 2 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "In",
      "testName": "In3And12",
      "invalid": "false",
      "expression": "3 in { 1, 2 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "In",
      "testName": "InDateTimeTrue",
      "invalid": "false",
      "expression": "DateTime(2012, 5, 10) in { DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10) }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "In",
      "testName": "InDateTimeFalse",
      "invalid": "false",
      "expression": "DateTime(2012, 6, 10) in { DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10) }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "In",
      "testName": "InTimeTrue",
      "invalid": "false",
      "expression": "@T15:59:59.999 in { @T02:29:15.156, @T15:59:59.999, @T20:59:59.999 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "In",
      "testName": "InTimeFalse",
      "invalid": "false",
      "expression": "@T16:59:59.999 in { @T02:29:15.156, @T15:59:59.999, @T20:59:59.999 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Includes",
      "testName": "IncludesEmptyAndEmpty",
      "invalid": "false",
      "expression": "{} includes {}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Includes",
      "testName": "IncludesListNullAndListNull",
      "invalid": "false",
      "expression": "{null} includes {null}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Includes",
      "testName": "Includes123AndEmpty",
      "invalid": "false",
      "expression": "{1, 2, 3} includes {}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Includes",
      "testName": "Includes123And2",
      "invalid": "false",
      "expression": "{1, 2, 3} includes {2}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Includes",
      "testName": "Includes123And4",
      "invalid": "false",
      "expression": "{1, 2, 3} includes {4}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Includes",
      "testName": "IncludesDateTimeTrue",
      "invalid": "false",
      "expression": "{DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)} includes {DateTime(2012, 5, 10)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Includes",
      "testName": "IncludesDateTimeFalse",
      "invalid": "false",
      "expression": "{DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)} includes {DateTime(2012, 5, 11)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Includes",
      "testName": "IncludesTimeTrue",
      "invalid": "false",
      "expression": "{ @T02:29:15.156, @T15:59:59.999, @T20:59:59.999 } includes @T15:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Includes",
      "testName": "IncludesTimeFalse",
      "invalid": "false",
      "expression": "{ @T02:29:15.156, @T15:59:59.999, @T20:59:59.999 } includes @T16:59:59.999"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Includes",
      "testName": "IncludesNullLeft",
      "invalid": "false",
      "expression": "null includes {2}"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Includes",
      "testName": "IncludesNullRight",
      "invalid": "false",
      "expression": "{'s', 'a', 'm'} includes null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IncludedIn",
      "testName": "IncludedInEmptyAndEmpty",
      "invalid": "false",
      "expression": "{} included in {}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IncludedIn",
      "testName": "IncludedInListNullAndListNull",
      "invalid": "false",
      "expression": "{ null } included in { null }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IncludedIn",
      "testName": "IncludedInEmptyAnd123",
      "invalid": "false",
      "expression": "{} included in { 1, 2, 3 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IncludedIn",
      "testName": "IncludedIn2And123",
      "invalid": "false",
      "expression": "{ 2 } included in { 1, 2, 3 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IncludedIn",
      "testName": "IncludedIn4And123",
      "invalid": "false",
      "expression": "{ 4 } included in { 1, 2, 3 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IncludedIn",
      "testName": "IncludedInDateTimeTrue",
      "invalid": "false",
      "expression": "{ DateTime(2012, 5, 10)} included in {DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IncludedIn",
      "testName": "IncludedInDateTimeFalse",
      "invalid": "false",
      "expression": "{DateTime(2012, 5, 11)} included in {DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IncludedIn",
      "testName": "IncludedInTimeTrue",
      "invalid": "false",
      "expression": "@T15:59:59.999 included in { @T02:29:15.156, @T15:59:59.999, @T20:59:59.999 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IncludedIn",
      "testName": "IncludedInTimeFalse",
      "invalid": "false",
      "expression": "@T16:59:59.999 included in { @T02:29:15.156, @T15:59:59.999, @T20:59:59.999 }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "IncludedIn",
      "testName": "IncludedInNullLeft",
      "invalid": "false",
      "expression": "null included in {2}"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "IncludedIn",
      "testName": "IncludedInNullRight",
      "invalid": "false",
      "expression": "{'s', 'a', 'm'} included in null"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Indexer",
      "testName": "IndexerNull1List",
      "invalid": "false",
      "expression": "(null as List<System.Any>)[1]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Indexer",
      "testName": "Indexer0Of12",
      "invalid": "false",
      "expression": "{ 1, 2 }[0]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Indexer",
      "testName": "Indexer1Of12",
      "invalid": "false",
      "expression": "{ 1, 2 }[1]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Indexer",
      "testName": "Indexer2Of12",
      "invalid": "false",
      "expression": "{ 1, 2 }[2]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Indexer",
      "testName": "IndexerNeg1Of12",
      "invalid": "false",
      "expression": "{ 1, 2 }[-1]"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2012-05-10",
      "expected": "DateTime(2012, 5, 10)",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Indexer",
      "testName": "IndexerDateTime",
      "invalid": "false",
      "expression": "{ DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10) }[1]"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T15:59:59.999",
      "expected": "@T15:59:59.999",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Indexer",
      "testName": "IndexerTime",
      "invalid": "false",
      "expression": "{ @T02:29:15.156, @T15:59:59.999, @T20:59:59.999 }[1]"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "IndexOf",
      "testName": "IndexOfEmptyNull",
      "invalid": "false",
      "expression": "IndexOf({}, null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "IndexOf",
      "testName": "IndexOfNullEmpty",
      "invalid": "false",
      "expression": "IndexOf(null, {})"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "IndexOf",
      "testName": "IndexOfNullIn1Null",
      "invalid": "false",
      "expression": "IndexOf({ 1, null }, null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IndexOf",
      "testName": "IndexOf1In12",
      "invalid": "false",
      "expression": "IndexOf({ 1, 2 }, 1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IndexOf",
      "testName": "IndexOf2In12",
      "invalid": "false",
      "expression": "IndexOf({ 1, 2 }, 2)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IndexOf",
      "testName": "IndexOf3In12",
      "invalid": "false",
      "expression": "IndexOf({ 1, 2 }, 3)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IndexOf",
      "testName": "IndexOfDateTime",
      "invalid": "false",
      "expression": "IndexOf({ DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10) }, DateTime(2014, 12, 10))"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlListOperatorsTest",
      "groupName": "IndexOf",
      "testName": "IndexOfTime",
      "invalid": "false",
      "expression": "IndexOf({ @T02:29:15.156, @T15:59:59.999, @T20:59:59.999 }, @T15:59:59.999)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Intersect",
      "testName": "IntersectEmptyListAndEmptyList",
      "invalid": "false",
      "expression": "{} intersect {}"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3}]}",
      "expected": "{ 2, 3 }",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Intersect",
      "testName": "Intersect1234And23",
      "invalid": "false",
      "expression": "{ 1, 2, 3, 4 } intersect { 2, 3 }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3}]}",
      "expected": "{ 2, 3 }",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Intersect",
      "testName": "Intersect23And1234",
      "invalid": "false",
      "expression": "{2, 3} intersect { 1, 2, 3, 4 }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-05-10\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2014-12-10\"}]}",
      "expected": "{@2012-05-10T, @2014-12-10T}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Intersect",
      "testName": "IntersectDateTime",
      "invalid": "false",
      "expression": "{ DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10) } intersect { DateTime(2012, 5, 10), DateTime(2014, 12, 10), DateTime(2000, 5, 5) }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"15:59:59.999\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"20:59:59.999\"}]}",
      "expected": "{@T15:59:59.999, @T20:59:59.999}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Intersect",
      "testName": "IntersectTime",
      "invalid": "false",
      "expression": "{ @T02:29:15.156, @T15:59:59.999, @T20:59:59.999 } intersect { @T01:29:15.156, @T15:59:59.999, @T20:59:59.999 }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Last",
      "testName": "LastEmpty",
      "invalid": "false",
      "expression": "Last({})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Last",
      "testName": "LastNull1",
      "invalid": "false",
      "expression": "Last({null, 1})"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Last",
      "testName": "Last1Null",
      "invalid": "false",
      "expression": "Last({1, null})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Last",
      "testName": "Last12",
      "invalid": "false",
      "expression": "Last({1, 2})"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2014-12-10",
      "expected": "DateTime(2014, 12, 10)",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Last",
      "testName": "LastDateTime",
      "invalid": "false",
      "expression": "Last({DateTime(2012, 5, 10), DateTime(2014, 12, 10)})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T20:59:59.999",
      "expected": "@T20:59:59.999",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Last",
      "testName": "LastTime",
      "invalid": "false",
      "expression": "Last({ @T15:59:59.999, @T20:59:59.999 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Length",
      "testName": "LengthEmptyList",
      "invalid": "false",
      "expression": "Length({})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Length",
      "testName": "LengthNull1",
      "invalid": "false",
      "expression": "Length({null, 1})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Length",
      "testName": "Length1Null",
      "invalid": "false",
      "expression": "Length({1, null})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Length",
      "testName": "Length12",
      "invalid": "false",
      "expression": "Length({1, 2})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "3",
      "expected": "3",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Length",
      "testName": "LengthDateTime",
      "invalid": "false",
      "expression": "Length({DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "6",
      "expected": "6",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Length",
      "testName": "LengthTime",
      "invalid": "false",
      "expression": "Length({ @T15:59:59.999, @T20:59:59.999, @T15:59:59.999, @T20:59:59.999, @T15:59:59.999, @T20:59:59.999 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Length",
      "testName": "LengthNullList",
      "invalid": "false",
      "expression": "Length(null as List<Any>)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivalentEmptyAndEmpty",
      "invalid": "false",
      "expression": "{} ~ {}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivalentABCAndABC",
      "invalid": "false",
      "expression": "{ 'a', 'b', 'c' } ~ { 'a', 'b', 'c' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivalentABCAndAB",
      "invalid": "false",
      "expression": "{ 'a', 'b', 'c' } ~ { 'a', 'b' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivalentABCAnd123",
      "invalid": "false",
      "expression": "{ 'a', 'b', 'c' } ~ { 1, 2, 3 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equivalent",
      "testName": "Equivalent123AndABC",
      "invalid": "false",
      "expression": "{ 1, 2, 3 } ~ { 'a', 'b', 'c' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equivalent",
      "testName": "Equivalent123AndString123",
      "invalid": "false",
      "expression": "{ 1, 2, 3 } ~ { '1', '2', '3' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivalentDateTimeTrue",
      "invalid": "false",
      "expression": "{DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10), null} ~ {DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10), null}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivalentDateTimeNull",
      "invalid": "false",
      "expression": "{DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)} ~ {DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10), null}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivalentDateTimeFalse",
      "invalid": "false",
      "expression": "{DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)} ~ {DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 1)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivalentTimeTrue",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999 } ~ { @T15:59:59.999, @T20:59:59.999 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivalentTimeNull",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999 } ~ { @T15:59:59.999, @T20:59:59.999, null }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Equivalent",
      "testName": "EquivalentTimeFalse",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999 } ~ { @T15:59:59.999, @T20:59:59.995 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "NotEqual",
      "testName": "NotEqualEmptyAndEmpty",
      "invalid": "false",
      "expression": "{} != {}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "NotEqual",
      "testName": "NotEqualABCAndABC",
      "invalid": "false",
      "expression": "{ 'a', 'b', 'c' } != { 'a', 'b', 'c' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "NotEqual",
      "testName": "NotEqualABCAndAB",
      "invalid": "false",
      "expression": "{ 'a', 'b', 'c' } != { 'a', 'b' }"
    },
    {
      "testStatus": "error",
      "expected": "true",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "114",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"{ 'a', 'b', 'c' } != { 1, 2, 3 }\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlListOperatorsTest",
      "groupName": "NotEqual",
      "testName": "NotEqualABCAnd123",
      "invalid": "false",
      "expression": "{ 'a', 'b', 'c' } != { 1, 2, 3 }"
    },
    {
      "testStatus": "error",
      "expected": "true",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "114",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"{ 1, 2, 3 } != { 'a', 'b', 'c' }\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlListOperatorsTest",
      "groupName": "NotEqual",
      "testName": "NotEqual123AndABC",
      "invalid": "false",
      "expression": "{ 1, 2, 3 } != { 'a', 'b', 'c' }"
    },
    {
      "testStatus": "error",
      "expected": "true",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "114",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"{ 1, 2, 3 } != { '1', '2', '3' }\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlListOperatorsTest",
      "groupName": "NotEqual",
      "testName": "NotEqual123AndString123",
      "invalid": "false",
      "expression": "{ 1, 2, 3 } != { '1', '2', '3' }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "NotEqual",
      "testName": "NotEqualDateTimeTrue",
      "invalid": "false",
      "expression": "{DateTime(2001, 9, 11, 0, 0, 0, 0), DateTime(2012, 5, 10, 0, 0, 0, 0), DateTime(2014, 12, 10, 0, 0, 0, 0)} != {DateTime(2001, 9, 11, 0, 0, 0, 0), DateTime(2012, 5, 10, 0, 0, 0, 0), DateTime(2014, 12, 1, 0, 0, 0, 0)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "NotEqual",
      "testName": "NotEqualDateTimeFalse",
      "invalid": "false",
      "expression": "{DateTime(2001, 9, 11, 0, 0, 0, 0), DateTime(2012, 5, 10, 0, 0, 0, 0), DateTime(2014, 12, 10, 0, 0, 0, 0)} != {DateTime(2001, 9, 11, 0, 0, 0, 0), DateTime(2012, 5, 10, 0, 0, 0, 0), DateTime(2014, 12, 10, 0, 0, 0, 0)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "NotEqual",
      "testName": "NotEqualTimeTrue",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999 } = { @T15:59:59.999, @T20:59:59.999 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "NotEqual",
      "testName": "NotEqualTimeFalse",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999 } = { @T15:59:59.999, @T20:59:49.999 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperContains",
      "testName": "ProperContainsNullRightFalse",
      "invalid": "false",
      "expression": "{'s', 'u', 'n'} properly includes null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperContains",
      "testName": "ProperContainsNullRightTrue",
      "invalid": "false",
      "expression": "{'s', 'u', 'n', null} properly includes null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperContains",
      "testName": "ProperContainsTimeTrue",
      "invalid": "false",
      "expression": "{ @T15:59:59, @T20:59:59.999, @T20:59:49.999 } properly includes @T15:59:59"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "false",
      "expected": "null",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperContains",
      "testName": "ProperContainsTimeNull",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999, @T20:59:49.999 } properly includes @T15:59:59"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperIn",
      "testName": "ProperInNullRightFalse",
      "invalid": "false",
      "expression": "null properly included in {'s', 'u', 'n'}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperIn",
      "testName": "ProperInNullRightTrue",
      "invalid": "false",
      "expression": "null properly included in {'s', 'u', 'n', null}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperIn",
      "testName": "ProperInTimeTrue",
      "invalid": "false",
      "expression": "@T15:59:59 properly included in { @T15:59:59, @T20:59:59.999, @T20:59:49.999 }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "false",
      "expected": "null",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperIn",
      "testName": "ProperInTimeNull",
      "invalid": "false",
      "expression": "@T15:59:59 properly included in { @T15:59:59.999, @T20:59:59.999, @T20:59:49.999 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "ProperIncludesEmptyAndEmpty",
      "invalid": "false",
      "expression": "{} properly includes {}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "ProperIncludesListNullAndListNull",
      "invalid": "false",
      "expression": "{null} properly includes {null}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "ProperIncludes123AndEmpty",
      "invalid": "false",
      "expression": "{1, 2, 3} properly includes {}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "ProperIncludes123And2",
      "invalid": "false",
      "expression": "{1, 2, 3} properly includes {2}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "ProperIncludes123And4",
      "invalid": "false",
      "expression": "{1, 2, 3} properly includes {4}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "ProperIncludesDateTimeTrue",
      "invalid": "false",
      "expression": "{DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)} properly includes {DateTime(2012, 5, 10), DateTime(2014, 12, 10)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "ProperIncludesDateTimeFalse",
      "invalid": "false",
      "expression": "{DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)} properly includes {DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "ProperIncludesTimeTrue",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999, @T20:59:49.999 } properly includes { @T15:59:59.999, @T20:59:59.999 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "ProperIncludesTimeFalse",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999, @T20:59:49.999 } properly includes { @T15:59:59.999, @T20:59:59.999, @T14:59:22.999 }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludes",
      "testName": "ProperlyIncludesNullLeft",
      "invalid": "false",
      "expression": "null properly includes {2}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "ProperIncludedInEmptyAndEmpty",
      "invalid": "false",
      "expression": "{} properly included in {}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "ProperIncludedInListNullAndListNull",
      "invalid": "false",
      "expression": "{null} properly included in {null}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "ProperIncludedInEmptyAnd123",
      "invalid": "false",
      "expression": "{} properly included in {1, 2, 3}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "ProperIncludedIn2And123",
      "invalid": "false",
      "expression": "{2} properly included in {1, 2, 3}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "ProperIncludedIn4And123",
      "invalid": "false",
      "expression": "{4} properly included in {1, 2, 3}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "ProperIncludedInDateTimeTrue",
      "invalid": "false",
      "expression": "{DateTime(2012, 5, 10), DateTime(2014, 12, 10)} properly included in {DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "ProperIncludedInDateTimeFalse",
      "invalid": "false",
      "expression": "{DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)} properly included in {DateTime(2001, 9, 11), DateTime(2012, 5, 10), DateTime(2014, 12, 10)}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "ProperIncludedInTimeTrue",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999 } properly included in { @T15:59:59.999, @T20:59:59.999, @T20:59:49.999 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "ProperIncludedInTimeFalse",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999, @T14:59:22.999 } properly included in { @T15:59:59.999, @T20:59:59.999, @T20:59:49.999 }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "ProperlyIncludedIn",
      "testName": "ProperlyIncludedInNulRight",
      "invalid": "false",
      "expression": "{'s', 'u', 'n'} properly included in null"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "SingletonFrom",
      "testName": "SingletonFromEmpty",
      "invalid": "false",
      "expression": "singleton from {}"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "SingletonFrom",
      "testName": "SingletonFromListNull",
      "invalid": "false",
      "expression": "singleton from {null}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlListOperatorsTest",
      "groupName": "SingletonFrom",
      "testName": "SingletonFrom1",
      "invalid": "false",
      "expression": "singleton from { 1 }"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlListOperatorsTest",
      "groupName": "SingletonFrom",
      "testName": "SingletonFrom12",
      "invalid": "true",
      "expression": "singleton from { 1, 2 }",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2012-05-10",
      "expected": "DateTime(2012, 5, 10)",
      "testsName": "CqlListOperatorsTest",
      "groupName": "SingletonFrom",
      "testName": "SingletonFromDateTime",
      "invalid": "false",
      "expression": "singleton from { DateTime(2012, 5, 10) }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T15:59:59.999",
      "expected": "@T15:59:59.999",
      "testsName": "CqlListOperatorsTest",
      "groupName": "SingletonFrom",
      "testName": "SingletonFromTime",
      "invalid": "false",
      "expression": "singleton from { @T15:59:59.999 }"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Skip",
      "testName": "SkipNull",
      "invalid": "false",
      "expression": "Skip(null, 3)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":5}]}",
      "expected": "{3, 4, 5}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Skip",
      "testName": "SkipEven",
      "invalid": "false",
      "expression": "Skip({1,2,3,4,5}, 2)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":5}]}",
      "expected": "{4, 5}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Skip",
      "testName": "SkipOdd",
      "invalid": "false",
      "expression": "Skip({1,2,3,4,5}, 3)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":5}]}",
      "expected": "{1,2,3,4,5}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Skip",
      "testName": "SkipNone",
      "invalid": "false",
      "expression": "Skip({1,2,3,4,5}, 0)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Skip",
      "testName": "SkipAll",
      "invalid": "false",
      "expression": "Skip({1,2,3,4,5}, 5)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Tail",
      "testName": "TailNull",
      "invalid": "false",
      "expression": "Tail(null)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4}]}",
      "expected": "{2,3,4}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Tail",
      "testName": "TailEven",
      "invalid": "false",
      "expression": "Tail({1,2,3,4})"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":5}]}",
      "expected": "{2,3,4,5}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Tail",
      "testName": "TailOdd",
      "invalid": "false",
      "expression": "Tail({1,2,3,4,5})"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Tail",
      "testName": "TailEmpty",
      "invalid": "false",
      "expression": "Tail({})"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Tail",
      "testName": "TailOneElement",
      "invalid": "false",
      "expression": "Tail({1})"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Take",
      "testName": "TakeNull",
      "invalid": "false",
      "expression": "Take(null, 3)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Take",
      "testName": "TakeNullEmpty",
      "invalid": "false",
      "expression": "Take({1,2,3}, null as Integer)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Take",
      "testName": "TakeEmpty",
      "invalid": "false",
      "expression": "Take({1,2,3}, 0)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2}]}",
      "expected": "{1, 2}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Take",
      "testName": "TakeEven",
      "invalid": "false",
      "expression": "Take({1,2,3,4}, 2)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3}]}",
      "expected": "{1, 2, 3}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Take",
      "testName": "TakeOdd",
      "invalid": "false",
      "expression": "Take({1,2,3,4}, 3)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4}]}",
      "expected": "{1, 2, 3, 4}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Take",
      "testName": "TakeAll",
      "invalid": "false",
      "expression": "Take({1,2,3,4}, 4)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Union",
      "testName": "UnionEmptyAndEmpty",
      "invalid": "false",
      "expression": "{} union {}"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "{null}",
      "error": {},
      "testsName": "CqlListOperatorsTest",
      "groupName": "Union",
      "testName": "UnionListNullAndListNull",
      "invalid": "false",
      "expression": "{ null } union { null }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3}]}",
      "expected": "{1, 2, 3}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Union",
      "testName": "Union123AndEmpty",
      "invalid": "false",
      "expression": "{ 1, 2, 3 } union {}"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3}]}",
      "expected": "{1, 2, 3}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Union",
      "testName": "Union123And2",
      "invalid": "false",
      "expression": "{ 1, 2, 3 } union { 2 }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":4}]}",
      "expected": "{1, 2, 3, 4}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Union",
      "testName": "Union123And4",
      "invalid": "false",
      "expression": "{ 1, 2, 3 } union { 4 }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2001-09-11\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2012-05-10\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"DateTime\"}],\"name\":\"return\",\"valueDateTime\":\"2014-12-10\"}]}",
      "expected": "{@2001-09-11T, @2012-05-10T, @2014-12-10T}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Union",
      "testName": "UnionDateTime",
      "invalid": "false",
      "expression": "{ DateTime(2001, 9, 11)} union {DateTime(2012, 5, 10), DateTime(2014, 12, 10) }"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"15:59:59.999\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"20:59:59.999\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"12:59:59.999\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Time\"}],\"name\":\"return\",\"valueTime\":\"10:59:59.999\"}]}",
      "expected": "{@T15:59:59.999, @T20:59:59.999, @T12:59:59.999, @T10:59:59.999}",
      "testsName": "CqlListOperatorsTest",
      "groupName": "Union",
      "testName": "UnionTime",
      "invalid": "false",
      "expression": "{ @T15:59:59.999, @T20:59:59.999, @T12:59:59.999 } union { @T10:59:59.999 }"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "And",
      "testName": "TrueAndTrue",
      "invalid": "false",
      "expression": "true and true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "And",
      "testName": "TrueAndFalse",
      "invalid": "false",
      "expression": "true and false"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "And",
      "testName": "TrueAndNull",
      "invalid": "false",
      "expression": "true and null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "And",
      "testName": "FalseAndTrue",
      "invalid": "false",
      "expression": "false and true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "And",
      "testName": "FalseAndFalse",
      "invalid": "false",
      "expression": "false and false"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "And",
      "testName": "FalseAndNull",
      "invalid": "false",
      "expression": "false and null"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "And",
      "testName": "NullAndTrue",
      "invalid": "false",
      "expression": "null and true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "And",
      "testName": "NullAndFalse",
      "invalid": "false",
      "expression": "null and false"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "And",
      "testName": "NullAndNull",
      "invalid": "false",
      "expression": "null and null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Implies",
      "testName": "TrueImpliesTrue",
      "invalid": "false",
      "expression": "true implies true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Implies",
      "testName": "TrueImpliesFalse",
      "invalid": "false",
      "expression": "true implies false"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Implies",
      "testName": "TrueImpliesNull",
      "invalid": "false",
      "expression": "true implies null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Implies",
      "testName": "FalseImpliesTrue",
      "invalid": "false",
      "expression": "false implies true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Implies",
      "testName": "FalseImpliesFalse",
      "invalid": "false",
      "expression": "false implies false"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Implies",
      "testName": "FalseImpliesNull",
      "invalid": "false",
      "expression": "false implies null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Implies",
      "testName": "NullImpliesTrue",
      "invalid": "false",
      "expression": "null implies true"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Implies",
      "testName": "NullImpliesFalse",
      "invalid": "false",
      "expression": "null implies false"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Implies",
      "testName": "NullImpliesNull",
      "invalid": "false",
      "expression": "null implies null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Not",
      "testName": "NotTrue",
      "invalid": "false",
      "expression": "not true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Not",
      "testName": "NotFalse",
      "invalid": "false",
      "expression": "not false"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Not",
      "testName": "NotNull",
      "invalid": "false",
      "expression": "not null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Or",
      "testName": "TrueOrTrue",
      "invalid": "false",
      "expression": "true or true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Or",
      "testName": "TrueOrFalse",
      "invalid": "false",
      "expression": "true or false"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Or",
      "testName": "TrueOrNull",
      "invalid": "false",
      "expression": "true or null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Or",
      "testName": "FalseOrTrue",
      "invalid": "false",
      "expression": "false or true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Or",
      "testName": "FalseOrFalse",
      "invalid": "false",
      "expression": "false or false"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Or",
      "testName": "FalseOrNull",
      "invalid": "false",
      "expression": "false or null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Or",
      "testName": "NullOrTrue",
      "invalid": "false",
      "expression": "null or true"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Or",
      "testName": "NullOrFalse",
      "invalid": "false",
      "expression": "null or false"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Or",
      "testName": "NullOrNull",
      "invalid": "false",
      "expression": "null or null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Xor",
      "testName": "TrueXorTrue",
      "invalid": "false",
      "expression": "true xor true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Xor",
      "testName": "TrueXorFalse",
      "invalid": "false",
      "expression": "true xor false"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Xor",
      "testName": "TrueXorNull",
      "invalid": "false",
      "expression": "true xor null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Xor",
      "testName": "FalseXorTrue",
      "invalid": "false",
      "expression": "false xor true"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Xor",
      "testName": "FalseXorFalse",
      "invalid": "false",
      "expression": "false xor false"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Xor",
      "testName": "FalseXorNull",
      "invalid": "false",
      "expression": "false xor null"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Xor",
      "testName": "NullXorTrue",
      "invalid": "false",
      "expression": "null xor true"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Xor",
      "testName": "NullXorFalse",
      "invalid": "false",
      "expression": "null xor false"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlLogicalOperatorsTest",
      "groupName": "Xor",
      "testName": "NullXorNull",
      "invalid": "false",
      "expression": "null xor null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "a",
      "expected": "'a'",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "Coalesce",
      "testName": "CoalesceANull",
      "invalid": "false",
      "expression": "Coalesce('a', null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "a",
      "expected": "'a'",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "Coalesce",
      "testName": "CoalesceNullA",
      "invalid": "false",
      "expression": "Coalesce(null, 'a')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "Coalesce",
      "testName": "CoalesceEmptyList",
      "invalid": "false",
      "expression": "Coalesce({})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "a",
      "expected": "'a'",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "Coalesce",
      "testName": "CoalesceListFirstA",
      "invalid": "false",
      "expression": "Coalesce({'a', null, null})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "a",
      "expected": "'a'",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "Coalesce",
      "testName": "CoalesceListLastA",
      "invalid": "false",
      "expression": "Coalesce({null, null, 'a'})"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "a",
      "expected": "{'a'}",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "Coalesce",
      "testName": "CoalesceFirstList",
      "invalid": "false",
      "expression": "Coalesce({'a'},null, null)"
    },
    {
      "testStatus": "error",
      "expected": "{'a'}",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "109",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"Coalesce(null, null, {'a'})\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "Coalesce",
      "testName": "CoalesceLastList",
      "invalid": "false",
      "expression": "Coalesce(null, null, {'a'})"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2012-05-18",
      "expected": "DateTime(2012, 5, 18)",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "Coalesce",
      "testName": "DateTimeCoalesce",
      "invalid": "false",
      "expression": "Coalesce(null, null, DateTime(2012, 5, 18))"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2012-05-18",
      "expected": "DateTime(2012, 5, 18)",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "Coalesce",
      "testName": "DateTimeListCoalesce",
      "invalid": "false",
      "expression": "Coalesce({ null, null, DateTime(2012, 5, 18) })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T05:15:33.556",
      "expected": "@T05:15:33.556",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "Coalesce",
      "testName": "TimeCoalesce",
      "invalid": "false",
      "expression": "Coalesce(null, null, @T05:15:33.556)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T05:15:33.556",
      "expected": "@T05:15:33.556",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "Coalesce",
      "testName": "TimeListCoalesce",
      "invalid": "false",
      "expression": "Coalesce({ null, null, @T05:15:33.556 })"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "IsNull",
      "testName": "IsNullTrue",
      "invalid": "false",
      "expression": "IsNull(null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "IsNull",
      "testName": "IsNullFalseEmptyString",
      "invalid": "false",
      "expression": "IsNull('')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "IsNull",
      "testName": "IsNullAlsoFalseAbcString",
      "invalid": "false",
      "expression": "IsNull('abc')"
    },
    {
      "testStatus": "error",
      "expected": "false",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "91",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"IsNull(1)\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "IsNull",
      "testName": "IsNullAlsoFalseNumber1",
      "invalid": "false",
      "expression": "IsNull(1)"
    },
    {
      "testStatus": "error",
      "expected": "false",
      "error": {
        "message": "Request failed with status code 500",
        "name": "AxiosError",
        "stack": "AxiosError: Request failed with status code 500\n    at settle (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:2031:12)\n    at IncomingMessage.handleStreamEnd (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:3148:11)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (/Users/alex/Dev/FHIR/cql-tests-runner/node_modules/axios/dist/node/axios.cjs:4258:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async runTest (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:140:26)\n    at async main (/Users/alex/Dev/FHIR/cql-tests-runner/cql-tests-runner.js:114:13)",
        "config": {
          "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
          },
          "adapter": [
            "xhr",
            "http",
            "fetch"
          ],
          "transformRequest": [
            null
          ],
          "transformResponse": [
            null
          ],
          "timeout": 0,
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
          "maxContentLength": -1,
          "maxBodyLength": -1,
          "env": {},
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/json",
            "User-Agent": "axios/1.8.4",
            "Content-Length": "91",
            "Accept-Encoding": "gzip, compress, deflate, br"
          },
          "method": "post",
          "url": "https://vonkhost:4081/$cql",
          "data": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"expression\",\"valueString\":\"IsNull(0)\"}]}",
          "allowAbsoluteUrls": true
        },
        "code": "ERR_BAD_RESPONSE",
        "status": 500
      },
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "IsNull",
      "testName": "IsNullAlsoFalseNumberZero",
      "invalid": "false",
      "expression": "IsNull(0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "IsFalse",
      "testName": "IsFalseFalse",
      "invalid": "false",
      "expression": "IsFalse(false)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "IsFalse",
      "testName": "IsFalseTrue",
      "invalid": "false",
      "expression": "IsFalse(true)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "IsFalse",
      "testName": "IsFalseNull",
      "invalid": "false",
      "expression": "IsFalse(null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "IsTrue",
      "testName": "IsTrueTrue",
      "invalid": "false",
      "expression": "IsTrue(true)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "IsTrue",
      "testName": "IsTrueFalse",
      "invalid": "false",
      "expression": "IsTrue(false)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlNullologicalOperatorsTest",
      "groupName": "IsTrue",
      "testName": "IsTrueNull",
      "invalid": "false",
      "expression": "IsTrue(null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Combine",
      "testName": "CombineNull",
      "invalid": "false",
      "expression": "Combine(null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "",
      "expected": "''",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Combine",
      "testName": "CombineEmptyList",
      "invalid": "false",
      "expression": "Combine({})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "abc",
      "expected": "'abc'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Combine",
      "testName": "CombineABC",
      "invalid": "false",
      "expression": "Combine({'a', 'b', 'c'})"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "a-b-c",
      "expected": "'a-b-c'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Combine",
      "testName": "CombineABCSepDash",
      "invalid": "false",
      "expression": "Combine({'a', 'b', 'c'}, '-')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Concatenate",
      "testName": "ConcatenateNullNull",
      "invalid": "false",
      "expression": "Concatenate(null, null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Concatenate",
      "testName": "ConcatenateANull",
      "invalid": "false",
      "expression": "Concatenate('a', null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Concatenate",
      "testName": "ConcatenateNullB",
      "invalid": "false",
      "expression": "Concatenate(null, 'b')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "ab",
      "expected": "'ab'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Concatenate",
      "testName": "ConcatenateAB",
      "invalid": "false",
      "expression": "Concatenate('a', 'b')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "ab",
      "expected": "'ab'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Concatenate",
      "testName": "ConcatenateABWithAdd",
      "invalid": "false",
      "expression": "'a' + 'b'"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "EndsWith",
      "testName": "EndsWithNull",
      "invalid": "false",
      "expression": "EndsWith(null, null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "EndsWith",
      "testName": "EndsWithTrue",
      "invalid": "false",
      "expression": "EndsWith('Chris Schuler is the man!!', 'n!!')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "EndsWith",
      "testName": "EndsWithFalse",
      "invalid": "false",
      "expression": "EndsWith('Chris Schuler is the man!!', 'n!')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Indexer",
      "testName": "IndexerNullNull",
      "invalid": "false",
      "expression": "Indexer(null as String, null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Indexer",
      "testName": "IndexerANull",
      "invalid": "false",
      "expression": "Indexer('a', null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Indexer",
      "testName": "IndexerNull1String",
      "invalid": "false",
      "expression": "Indexer(null as String, 1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "a",
      "expected": "'a'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Indexer",
      "testName": "IndexerAB0",
      "invalid": "false",
      "expression": "Indexer('ab', 0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "b",
      "expected": "'b'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Indexer",
      "testName": "IndexerAB1",
      "invalid": "false",
      "expression": "Indexer('ab', 1)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Indexer",
      "testName": "IndexerAB2",
      "invalid": "false",
      "expression": "Indexer('ab', 2)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Indexer",
      "testName": "IndexerABNeg1",
      "invalid": "false",
      "expression": "Indexer('ab', -1)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "LastPositionOf",
      "testName": "LastPositionOfNull",
      "invalid": "false",
      "expression": "LastPositionOf(null, null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "LastPositionOf",
      "testName": "LastPositionOfNull1",
      "invalid": "false",
      "expression": "LastPositionOf(null, 'hi')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "LastPositionOf",
      "testName": "LastPositionOfNull2",
      "invalid": "false",
      "expression": "LastPositionOf('hi', null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "LastPositionOf",
      "testName": "LastPositionOf1",
      "invalid": "false",
      "expression": "LastPositionOf('hi', 'Ohio is the place to be!')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "11",
      "expected": "11",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "LastPositionOf",
      "testName": "LastPositionOf2",
      "invalid": "false",
      "expression": "LastPositionOf('hi', 'Say hi to Ohio!')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Length",
      "testName": "LengthNullString",
      "invalid": "false",
      "expression": "Length(null as String)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Length",
      "testName": "LengthEmptyString",
      "invalid": "false",
      "expression": "Length('')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Length",
      "testName": "LengthA",
      "invalid": "false",
      "expression": "Length('a')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2",
      "expected": "2",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Length",
      "testName": "LengthAB",
      "invalid": "false",
      "expression": "Length('ab')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Lower",
      "testName": "LowerNull",
      "invalid": "false",
      "expression": "Lower(null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "",
      "expected": "''",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Lower",
      "testName": "LowerEmpty",
      "invalid": "false",
      "expression": "Lower('')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "a",
      "expected": "'a'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Lower",
      "testName": "LowerA",
      "invalid": "false",
      "expression": "Lower('A')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "b",
      "expected": "'b'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Lower",
      "testName": "LowerB",
      "invalid": "false",
      "expression": "Lower('b')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "ab",
      "expected": "'ab'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Lower",
      "testName": "LowerAB",
      "invalid": "false",
      "expression": "Lower('Ab')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Matches",
      "testName": "MatchesNull",
      "invalid": "false",
      "expression": "Matches('Not all who wander are lost', null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Matches",
      "testName": "MatchesNumberFalse",
      "invalid": "false",
      "expression": "Matches('Not all who wander are lost', '.*\\\\d+')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Matches",
      "testName": "MatchesNumberTrue",
      "invalid": "false",
      "expression": "Matches('Not all who wander are lost - circa 2017', '.*\\\\d+')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Matches",
      "testName": "MatchesAllTrue",
      "invalid": "false",
      "expression": "Matches('Not all who wander are lost', '.*')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Matches",
      "testName": "MatchesWordsAndSpacesTrue",
      "invalid": "false",
      "expression": "Matches('Not all who wander are lost', '[\\\\w|\\\\s]+')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Matches",
      "testName": "MatchesWordsAndSpacesFalse",
      "invalid": "false",
      "expression": "Matches('Not all who wander are lost - circa 2017', '[\\\\w]+')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Matches",
      "testName": "MatchesNotWords",
      "invalid": "false",
      "expression": "Matches('   ', '\\\\W+')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Matches",
      "testName": "MatchesWhiteSpace",
      "invalid": "false",
      "expression": "Matches(' \\n\\t', '\\\\s+')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "PositionOf",
      "testName": "PositionOfNullNull",
      "invalid": "false",
      "expression": "PositionOf(null, null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "PositionOf",
      "testName": "PositionOfANull",
      "invalid": "false",
      "expression": "PositionOf('a', null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "PositionOf",
      "testName": "PositionOfNullA",
      "invalid": "false",
      "expression": "PositionOf(null, 'a')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "0",
      "expected": "0",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "PositionOf",
      "testName": "PositionOfAInAB",
      "invalid": "false",
      "expression": "PositionOf('a', 'ab')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "1",
      "expected": "1",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "PositionOf",
      "testName": "PositionOfBInAB",
      "invalid": "false",
      "expression": "PositionOf('b', 'ab')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "-1",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "PositionOf",
      "testName": "PositionOfCInAB",
      "invalid": "false",
      "expression": "PositionOf('c', 'ab')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "ReplaceMatches",
      "testName": "ReplaceMatchesNull",
      "invalid": "false",
      "expression": "ReplaceMatches('Not all who wander are lost', null, 'But I am...')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "But still waters run deep",
      "expected": "'But still waters run deep'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "ReplaceMatches",
      "testName": "ReplaceMatchesAll",
      "invalid": "false",
      "expression": "ReplaceMatches('Not all who wander are lost', 'Not all who wander are lost', 'But still waters run deep')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "Who put the bang in the bang she bang she bang?",
      "expected": "'Who put the bang in the bang she bang she bang?'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "ReplaceMatches",
      "testName": "ReplaceMatchesMany",
      "invalid": "false",
      "expression": "ReplaceMatches('Who put the bop in the bop she bop she bop?', 'bop', 'bang')"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "All\\$that\\$glitters\\$is\\$not\\$gold",
      "expected": "'All$that$glitters$is$not$gold'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "ReplaceMatches",
      "testName": "ReplaceMatchesSpaces",
      "invalid": "false",
      "expression": "ReplaceMatches('All that glitters is not gold', '\\\\s', '\\\\$')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Split",
      "testName": "SplitNullNull",
      "invalid": "false",
      "expression": "Split(null, null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Split",
      "testName": "SplitNullComma",
      "invalid": "false",
      "expression": "Split(null, ',')"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "a,b",
      "expected": "{'a,b'}",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Split",
      "testName": "SplitABNull",
      "invalid": "false",
      "expression": "Split('a,b', null)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "a,b",
      "expected": "{'a,b'}",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Split",
      "testName": "SplitABDash",
      "invalid": "false",
      "expression": "Split('a,b', '-')"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"a\"},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"String\"}],\"name\":\"return\",\"valueString\":\"b\"}]}",
      "expected": "{'a','b'}",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Split",
      "testName": "SplitABComma",
      "invalid": "false",
      "expression": "Split('a,b', ',')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "StartsWith",
      "testName": "StartsWithNull",
      "invalid": "false",
      "expression": "StartsWith(null, null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "StartsWith",
      "testName": "StartsWithNull1",
      "invalid": "false",
      "expression": "StartsWith('hi', null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "StartsWith",
      "testName": "StartsWithNull2",
      "invalid": "false",
      "expression": "StartsWith(null, 'hi')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "StartsWith",
      "testName": "StartsWithTrue1",
      "invalid": "false",
      "expression": "StartsWith('Breathe deep the gathering gloom', 'Bre')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "StartsWith",
      "testName": "StartsWithFalse1",
      "invalid": "false",
      "expression": "StartsWith('Breathe deep the gathering gloom', 'bre')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Substring",
      "testName": "SubstringNullNull",
      "invalid": "false",
      "expression": "Substring(null, null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Substring",
      "testName": "SubstringANull",
      "invalid": "false",
      "expression": "Substring('a', null)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Substring",
      "testName": "SubstringNull1",
      "invalid": "false",
      "expression": "Substring(null, 1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "ab",
      "expected": "'ab'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Substring",
      "testName": "SubstringAB0",
      "invalid": "false",
      "expression": "Substring('ab', 0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "b",
      "expected": "'b'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Substring",
      "testName": "SubstringAB1",
      "invalid": "false",
      "expression": "Substring('ab', 1)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Substring",
      "testName": "SubstringAB2",
      "invalid": "false",
      "expression": "Substring('ab', 2)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Substring",
      "testName": "SubstringABNeg1",
      "invalid": "false",
      "expression": "Substring('ab', -1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "a",
      "expected": "'a'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Substring",
      "testName": "SubstringAB0To1",
      "invalid": "false",
      "expression": "Substring('ab', 0, 1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "b",
      "expected": "'b'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Substring",
      "testName": "SubstringABC1To1",
      "invalid": "false",
      "expression": "Substring('abc', 1, 1)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "ab",
      "expected": "'ab'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Substring",
      "testName": "SubstringAB0To3",
      "invalid": "false",
      "expression": "Substring('ab', 0, 3)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Upper",
      "testName": "UpperNull",
      "invalid": "false",
      "expression": "Upper(null)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "",
      "expected": "''",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Upper",
      "testName": "UpperEmpty",
      "invalid": "false",
      "expression": "Upper('')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "A",
      "expected": "'A'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Upper",
      "testName": "UpperA",
      "invalid": "false",
      "expression": "Upper('a')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "B",
      "expected": "'B'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Upper",
      "testName": "UpperB",
      "invalid": "false",
      "expression": "Upper('B')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "AB",
      "expected": "'AB'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "Upper",
      "testName": "UpperAB",
      "invalid": "false",
      "expression": "Upper('aB')"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "125 'cm'",
      "expected": "'125 \\'cm\\''",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "toString tests",
      "testName": "QuantityToString",
      "invalid": "false",
      "expression": "ToString(125 'cm')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2000-01-01",
      "expected": "'2000-01-01'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "toString tests",
      "testName": "DateTimeToString1",
      "invalid": "false",
      "expression": "ToString(DateTime(2000, 1, 1))"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2000-01-01T15:25:25.300",
      "expected": "'2000-01-01T15:25:25.300'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "toString tests",
      "testName": "DateTimeToString2",
      "invalid": "false",
      "expression": "ToString(DateTime(2000, 1, 1, 15, 25, 25, 300))"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "2000-01-01T08:25:25.300-07:00",
      "expected": "'2000-01-01T08:25:25.300-07:00'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "toString tests",
      "testName": "DateTimeToString3",
      "invalid": "false",
      "expression": "ToString(DateTime(2000, 1, 1, 8, 25, 25, 300, -7))"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "09:30:01.003",
      "expected": "'09:30:01.003'",
      "testsName": "CqlStringOperatorsTest",
      "groupName": "toString tests",
      "testName": "TimeToString1",
      "invalid": "false",
      "expression": "ToString(@T09:30:01.003)"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "45.5 'g'",
      "error": {},
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "As",
      "testName": "AsQuantity",
      "invalid": "false",
      "expression": "45.5 'g' as Quantity"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "45.5 'g'",
      "error": {},
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "As",
      "testName": "CastAsQuantity",
      "invalid": "false",
      "expression": "cast 45.5 'g' as Quantity"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2014-01-01",
      "expected": "@2014-01-01T",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "As",
      "testName": "AsDateTime",
      "invalid": "false",
      "expression": "DateTime(2014, 01, 01) as DateTime"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "5.0",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "Convert",
      "testName": "IntegerToDecimal",
      "invalid": "false",
      "expression": "convert 5 to Decimal"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "5",
      "expected": "'5'",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "Convert",
      "testName": "IntegerToString",
      "invalid": "false",
      "expression": "convert 5 to String"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "Convert",
      "testName": "StringToIntegerError",
      "invalid": "true",
      "expression": "convert 'foo' to Integer",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2014-01-01",
      "expected": "@2014-01-01T",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "Convert",
      "testName": "StringToDateTime",
      "invalid": "false",
      "expression": "convert '2014-01-01' to DateTime"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T14:30:00.000",
      "expected": "@T14:30:00.000",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "Convert",
      "testName": "StringToTime",
      "invalid": "false",
      "expression": "convert 'T14:30:00.0' to Time"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "Convert",
      "testName": "StringToDateTimeMalformed",
      "invalid": "true",
      "expression": "convert '2014/01/01' to DateTime",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "Is",
      "testName": "IntegerIsInteger",
      "invalid": "false",
      "expression": "5 is Integer"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "Is",
      "testName": "StringIsInteger",
      "invalid": "false",
      "expression": "'5' is Integer"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "false",
      "expected": "false",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToBoolean",
      "testName": "StringNoToBoolean",
      "invalid": "false",
      "expression": "ToBoolean('NO')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Concept {\n\t\t\t\t\tcodes: Code { code: '8480-6' }\n\t\t\t\t}",
      "error": {},
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToConcept",
      "testName": "CodeToConcept1",
      "invalid": "false",
      "expression": "ToConcept(Code { code: '8480-6' })"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2014-01-01",
      "expected": "@2014-01-01T",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToDateTime",
      "testName": "ToDateTime1",
      "invalid": "false",
      "expression": "ToDateTime('2014-01-01')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2014-01-01T12:05",
      "expected": "@2014-01-01T12:05",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToDateTime",
      "testName": "ToDateTime2",
      "invalid": "false",
      "expression": "ToDateTime('2014-01-01T12:05')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2014-01-01T12:05:05.955",
      "expected": "@2014-01-01T12:05:05.955",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToDateTime",
      "testName": "ToDateTime3",
      "invalid": "false",
      "expression": "ToDateTime('2014-01-01T12:05:05.955')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2014-01-01T12:05:05.955+01:30",
      "expected": "@2014-01-01T12:05:05.955+01:30",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToDateTime",
      "testName": "ToDateTime4",
      "invalid": "false",
      "expression": "ToDateTime('2014-01-01T12:05:05.955+01:30')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2014-01-01T12:05:05.955-01:15",
      "expected": "@2014-01-01T12:05:05.955-01:15",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToDateTime",
      "testName": "ToDateTime5",
      "invalid": "false",
      "expression": "ToDateTime('2014-01-01T12:05:05.955-01:15')"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2014-01-01T12:05:05.955Z",
      "expected": "@2014-01-01T12:05:05.955+00:00",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToDateTime",
      "testName": "ToDateTime6",
      "invalid": "false",
      "expression": "ToDateTime('2014-01-01T12:05:05.955Z')"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToDateTime",
      "testName": "ToDateTimeMalformed",
      "invalid": "true",
      "expression": "ToDateTime('2014/01/01T12:05:05.955Z')",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2014-01-01",
      "expected": "@2014-01-01T",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToDateTime",
      "testName": "ToDateTimeDate",
      "invalid": "false",
      "expression": "ToDateTime(@2014-01-01)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToDateTime",
      "testName": "ToDateTimeTimeUnspecified",
      "invalid": "false",
      "expression": "hour from ToDateTime(@2014-01-01) is null"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "25.5",
      "expected": "25.5",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToDecimal",
      "testName": "String25D5ToDecimal",
      "invalid": "false",
      "expression": "ToDecimal('+25.5')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-25",
      "expected": "-25",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToInteger",
      "testName": "StringNeg25ToInteger",
      "invalid": "false",
      "expression": "ToInteger('-25')"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "5.5'cm'",
      "error": {},
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToQuantity",
      "testName": "String5D5CMToQuantity",
      "invalid": "false",
      "expression": "ToQuantity('5.5 \\'cm\\'')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "-5",
      "expected": "'-5'",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToString",
      "testName": "IntegerNeg5ToString",
      "invalid": "false",
      "expression": "ToString(-5)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "18.55",
      "expected": "'18.55'",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToString",
      "testName": "Decimal18D55ToString",
      "invalid": "false",
      "expression": "ToString(18.55)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "5.5 'cm'",
      "expected": "'5.5 \\'cm\\''",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToString",
      "testName": "Quantity5D5CMToString",
      "invalid": "false",
      "expression": "ToString(5.5 'cm')"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "'true'",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToString",
      "testName": "BooleanTrueToString",
      "invalid": "false",
      "expression": "ToString(true)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T14:30:00.000",
      "expected": "@T14:30:00.000",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToTime",
      "testName": "ToTime1",
      "invalid": "false",
      "expression": "ToTime('T14:30:00.0')"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@T14:30:00.000+05:30",
      "expected": "@T14:30:00.000",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToTime",
      "testName": "ToTime2",
      "invalid": "false",
      "expression": "ToTime('T14:30:00.0+05:30')"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@T14:30:00.000-05:45",
      "expected": "@T14:30:00.000",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToTime",
      "testName": "ToTime3",
      "invalid": "false",
      "expression": "ToTime('T14:30:00.0-05:45')"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@T14:30:00.000Z",
      "expected": "@T14:30:00.000",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToTime",
      "testName": "ToTime4",
      "invalid": "false",
      "expression": "ToTime('T14:30:00.0Z')"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlTypeOperatorsTest",
      "groupName": "ToTime",
      "testName": "ToTimeMalformed",
      "invalid": "true",
      "expression": "ToTime('T14-30-00.0')",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "5.0'g'",
      "error": {},
      "testsName": "CqlTypesTest",
      "groupName": "Any",
      "testName": "AnyQuantity",
      "invalid": "false",
      "expression": "5.0 'g'"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2012-04-04",
      "expected": "@2012-04-04T",
      "testsName": "CqlTypesTest",
      "groupName": "Any",
      "testName": "AnyDateTime",
      "invalid": "false",
      "expression": "DateTime(2012, 4, 4)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T09:00:00.000",
      "expected": "@T09:00:00.000",
      "testsName": "CqlTypesTest",
      "groupName": "Any",
      "testName": "AnyTime",
      "invalid": "false",
      "expression": "@T09:00:00.000"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Interval[2, 7]",
      "error": {},
      "testsName": "CqlTypesTest",
      "groupName": "Any",
      "testName": "AnyInterval",
      "invalid": "false",
      "expression": "Interval[2, 7]"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "{\"resourceType\":\"Parameters\",\"parameter\":[{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":1},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":2},{\"extension\":[{\"url\":\"http://hl7.org/fhir/StructureDefinition/cqf-cqlType\",\"valueString\":\"Integer\"}],\"name\":\"return\",\"valueInteger\":3}]}",
      "expected": "{1, 2, 3}",
      "testsName": "CqlTypesTest",
      "groupName": "Any",
      "testName": "AnyList",
      "invalid": "false",
      "expression": "{1, 2, 3}"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "Tuple { id: 5, name: 'Chris'}",
      "error": {},
      "testsName": "CqlTypesTest",
      "groupName": "Any",
      "testName": "AnyTuple",
      "invalid": "false",
      "expression": "Tuple { id: 5, name: 'Chris'}"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "Chris",
      "expected": "'Chris'",
      "testsName": "CqlTypesTest",
      "groupName": "Any",
      "testName": "AnyString",
      "invalid": "false",
      "expression": "Tuple { id: 5, name: 'Chris'}.name"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "null",
      "error": {},
      "testsName": "CqlTypesTest",
      "groupName": "DateTime",
      "testName": "DateTimeNull",
      "invalid": "false",
      "expression": "DateTime(null)"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlTypesTest",
      "groupName": "DateTime",
      "testName": "DateTimeUpperBoundExcept",
      "invalid": "true",
      "expression": "DateTime(10000, 12, 31, 23, 59, 59, 999)",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlTypesTest",
      "groupName": "DateTime",
      "testName": "DateTimeLowerBoundExcept",
      "invalid": "true",
      "expression": "DateTime(0000, 1, 1, 0, 0, 0, 0)",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@2016-07-07T06:25:33.910",
      "expected": "@2016-07-07T06:25:33.910",
      "testsName": "CqlTypesTest",
      "groupName": "DateTime",
      "testName": "DateTimeProper",
      "invalid": "false",
      "expression": "DateTime(2016, 7, 7, 6, 25, 33, 910)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "@2015-02-10",
      "expected": "@2015-02-10T",
      "testsName": "CqlTypesTest",
      "groupName": "DateTime",
      "testName": "DateTimeIncomplete",
      "invalid": "false",
      "expression": "DateTime(2015, 2, 10)"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "19",
      "expected": "Interval [ 18, 49 ]",
      "testsName": "CqlTypesTest",
      "groupName": "DateTime",
      "testName": "DateTimeUncertain",
      "invalid": "false",
      "expression": "days between DateTime(2015, 2, 10) and DateTime(2015, 3)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@0001-01-01T00:00:00.000",
      "expected": "@0001-01-01T00:00:00.000",
      "testsName": "CqlTypesTest",
      "groupName": "DateTime",
      "testName": "DateTimeMin",
      "invalid": "false",
      "expression": "DateTime(0001, 1, 1, 0, 0, 0, 0)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@9999-12-31T23:59:59.999",
      "expected": "@9999-12-31T23:59:59.999",
      "testsName": "CqlTypesTest",
      "groupName": "DateTime",
      "testName": "DateTimeMax",
      "invalid": "false",
      "expression": "DateTime(9999, 12, 31, 23, 59, 59, 999)"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "true",
      "expected": "true",
      "testsName": "CqlTypesTest",
      "groupName": "DateTime",
      "testName": "DateTimeTimeUnspecified",
      "invalid": "false",
      "expression": "hour from @2015-02-10T is null"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "150.2 '[lb_av]'",
      "error": {},
      "testsName": "CqlTypesTest",
      "groupName": "Quantity",
      "testName": "QuantityTest",
      "invalid": "false",
      "expression": "150.2 '[lb_av]'"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "2.5589 '{eskimo kisses}'",
      "error": {},
      "testsName": "CqlTypesTest",
      "groupName": "Quantity",
      "testName": "QuantityTest2",
      "invalid": "false",
      "expression": "2.5589 '{eskimo kisses}'"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "actual": "[object Object]",
      "expected": "5.999999999 'g'",
      "error": {},
      "testsName": "CqlTypesTest",
      "groupName": "Quantity",
      "testName": "QuantityFractionalTooBig",
      "invalid": "false",
      "expression": "5.999999999 'g'"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "'I start with a single quote and end with a double quote\"",
      "expected": "'\\u0027I start with a single quote and end with a double quote\\u0022'",
      "testsName": "CqlTypesTest",
      "groupName": "String",
      "testName": "StringTestEscapeQuotes",
      "invalid": "false",
      "expression": "'\\'I start with a single quote and end with a double quote\\\"'"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "Hi",
      "expected": "'Hi'",
      "testsName": "CqlTypesTest",
      "groupName": "String",
      "testName": "StringUnicodeTest",
      "invalid": "false",
      "expression": "'\\u0048\\u0069'"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlTypesTest",
      "groupName": "Time",
      "testName": "TimeUpperBoundHours",
      "invalid": "semantic",
      "expression": "@T24:59:59.999",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlTypesTest",
      "groupName": "Time",
      "testName": "TimeUpperBoundMinutes",
      "invalid": "semantic",
      "expression": "@T23:60:59.999",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlTypesTest",
      "groupName": "Time",
      "testName": "TimeUpperBoundSeconds",
      "invalid": "semantic",
      "expression": "@T23:59:60.999",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "CqlTypesTest",
      "groupName": "Time",
      "testName": "TimeUpperBoundMillis",
      "invalid": "semantic",
      "expression": "@T23:59:59.10000",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T10:25:12.863",
      "expected": "@T10:25:12.863",
      "testsName": "CqlTypesTest",
      "groupName": "Time",
      "testName": "TimeProper",
      "invalid": "false",
      "expression": "@T10:25:12.863"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T23:59:59.999",
      "expected": "@T23:59:59.999",
      "testsName": "CqlTypesTest",
      "groupName": "Time",
      "testName": "TimeAllMax",
      "invalid": "false",
      "expression": "@T23:59:59.999"
    },
    {
      "testStatus": "pass",
      "responseStatus": 200,
      "actual": "@T00:00:00.000",
      "expected": "@T00:00:00.000",
      "testsName": "CqlTypesTest",
      "groupName": "Time",
      "testName": "TimeAllMin",
      "invalid": "false",
      "expression": "@T00:00:00.000"
    },
    {
      "testStatus": "error",
      "responseStatus": 200,
      "expected": "@2000 < @2000-01",
      "error": {},
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Null",
      "testName": "Null",
      "invalid": "false",
      "expression": "null"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "false",
      "expected": "1~0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Boolean",
      "testName": "BooleanFalse",
      "invalid": "false",
      "expression": "false"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "true",
      "expected": "1~1",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Boolean",
      "testName": "BooleanTrue",
      "invalid": "false",
      "expression": "true"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "0",
      "expected": "42-42",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerZero",
      "invalid": "false",
      "expression": "0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "0",
      "expected": "42-42",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerPosZero",
      "invalid": "false",
      "expression": "+0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "0",
      "expected": "42-42",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerNegZero",
      "invalid": "false",
      "expression": "-0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1",
      "expected": "42-41",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerOne",
      "invalid": "false",
      "expression": "1"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1",
      "expected": "42-41",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerPosOne",
      "invalid": "false",
      "expression": "+1"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "42-43",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerNegOne",
      "invalid": "false",
      "expression": "-1"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2",
      "expected": "42-40",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerTwo",
      "invalid": "false",
      "expression": "2"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2",
      "expected": "42-40",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerPosTwo",
      "invalid": "false",
      "expression": "+2"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-2",
      "expected": "42-44",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerNegTwo",
      "invalid": "false",
      "expression": "-2"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1000000000",
      "expected": "Power(10,9)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "Integer10Pow9",
      "invalid": "false",
      "expression": "1000000000"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1000000000",
      "expected": "+Power(10,9)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerPos10Pow9",
      "invalid": "false",
      "expression": "+1000000000"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-1000000000",
      "expected": "-Power(10,9)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerNeg10Pow9",
      "invalid": "false",
      "expression": "-1000000000"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2147483647",
      "expected": "Power(2,30)-1+Power(2,30)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "Integer2Pow31ToZero1IntegerMaxValue",
      "invalid": "false",
      "expression": "2147483647"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2147483647",
      "expected": "+Power(2,30)-1+Power(2,30)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerPos2Pow31ToZero1IntegerMaxValue",
      "invalid": "false",
      "expression": "+2147483647"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-2147483647",
      "expected": "-Power(2,30)+1-Power(2,30)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerNeg2Pow31ToZero1",
      "invalid": "false",
      "expression": "-2147483647"
    },
    {
      "testStatus": "skip",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "Integer2Pow31",
      "invalid": "true",
      "expression": "2147483648",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerPos2Pow31",
      "invalid": "true",
      "expression": "+2147483648",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-2147483648",
      "expected": "-Power(2,30)-Power(2,30)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerNeg2Pow31IntegerMinValue",
      "invalid": "false",
      "expression": "-2147483648"
    },
    {
      "testStatus": "skip",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "Integer2Pow31ToInf1",
      "invalid": "true",
      "expression": "2147483649",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerPos2Pow31ToInf1",
      "invalid": "true",
      "expression": "+2147483649",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Integer",
      "testName": "IntegerNeg2Pow31ToInf1",
      "invalid": "true",
      "expression": "-2147483649",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "0",
      "expected": "42.0-42.0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalZero",
      "invalid": "false",
      "expression": "0.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "0",
      "expected": "42.0-42.0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPosZero",
      "invalid": "false",
      "expression": "+0.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "0",
      "expected": "42.0-42.0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNegZero",
      "invalid": "false",
      "expression": "-0.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1",
      "expected": "42.0-41.0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalOne",
      "invalid": "false",
      "expression": "1.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1",
      "expected": "42.0-41.0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPosOne",
      "invalid": "false",
      "expression": "+1.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-1",
      "expected": "42.0-43.0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNegOne",
      "invalid": "false",
      "expression": "-1.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2",
      "expected": "42.0-40.0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalTwo",
      "invalid": "false",
      "expression": "2.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2",
      "expected": "42.0-40.0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPosTwo",
      "invalid": "false",
      "expression": "+2.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-2",
      "expected": "42.0-44.0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNegTwo",
      "invalid": "false",
      "expression": "-2.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1000000000",
      "expected": "Power(10.0,9.0)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "Decimal10Pow9",
      "invalid": "false",
      "expression": "1000000000.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1000000000",
      "expected": "+Power(10.0,9.0)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPos10Pow9",
      "invalid": "false",
      "expression": "+1000000000.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-1000000000",
      "expected": "-Power(10.0,9.0)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNeg10Pow9",
      "invalid": "false",
      "expression": "-1000000000.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2147483647",
      "expected": "Power(2.0,30.0)-1+Power(2.0,30.0)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "Decimal2Pow31ToZero1",
      "invalid": "false",
      "expression": "2147483647.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2147483647",
      "expected": "+Power(2.0,30.0)-1+Power(2.0,30.0)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPos2Pow31ToZero1",
      "invalid": "false",
      "expression": "+2147483647.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-2147483647",
      "expected": "-Power(2.0,30.0)+1.0-Power(2.0,30.0)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNeg2Pow31ToZero1",
      "invalid": "false",
      "expression": "-2147483647.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2147483648",
      "expected": "Power(2.0,30.0)+Power(2.0,30.0)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "Decimal2Pow31",
      "invalid": "false",
      "expression": "2147483648.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2147483648",
      "expected": "+Power(2.0,30.0)+Power(2.0,30.0)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPos2Pow31",
      "invalid": "false",
      "expression": "+2147483648.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-2147483648",
      "expected": "-Power(2.0,30.0)-Power(2.0,30.0)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNeg2Pow31",
      "invalid": "false",
      "expression": "-2147483648.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2147483649",
      "expected": "Power(2.0,30.0)+1.0+Power(2.0,30.0)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "Decimal2Pow31ToInf1",
      "invalid": "false",
      "expression": "2147483649.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2147483649",
      "expected": "+Power(2.0,30.0)+1.0+Power(2.0,30.0)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPos2Pow31ToInf1",
      "invalid": "false",
      "expression": "+2147483649.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-2147483649",
      "expected": "-Power(2.0,30.0)-1.0-Power(2.0,30.0)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNeg2Pow31ToInf1",
      "invalid": "false",
      "expression": "-2147483649.0"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "0",
      "expected": "42.0-42.0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalZeroStep",
      "invalid": "false",
      "expression": "0.00000000"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "0",
      "expected": "42.0-42.0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPosZeroStep",
      "invalid": "false",
      "expression": "+0.00000000"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "0",
      "expected": "42.0-42.0",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNegZeroStep",
      "invalid": "false",
      "expression": "-0.00000000"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1e-8",
      "expected": "Power(10,-8)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalOneStep",
      "invalid": "false",
      "expression": "0.00000001"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1e-8",
      "expected": "+Power(10,-8)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPosOneStep",
      "invalid": "false",
      "expression": "+0.00000001"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-1e-8",
      "expected": "-Power(10,-8)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNegOneStep",
      "invalid": "false",
      "expression": "-0.00000001"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2e-8",
      "expected": "2.0*Power(10,-8)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalTwoStep",
      "invalid": "false",
      "expression": "0.00000002"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "2e-8",
      "expected": "+2.0*Power(10,-8)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPosTwoStep",
      "invalid": "false",
      "expression": "+0.00000002"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-2e-8",
      "expected": "-2.0*Power(10,-8)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNegTwoStep",
      "invalid": "false",
      "expression": "-0.00000002"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1e-7",
      "expected": "Power(10,-7)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalTenStep",
      "invalid": "false",
      "expression": "0.0000001"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1e-7",
      "expected": "+Power(10,-7)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPosTenStep",
      "invalid": "false",
      "expression": "+0.0000001"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-1e-7",
      "expected": "-Power(10,-7)",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNegTenStep",
      "invalid": "false",
      "expression": "-0.0000001"
    },
    {
      "testStatus": "skip",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalTenthStep",
      "invalid": "true",
      "expression": "0.000000001",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPosTenthStep",
      "invalid": "true",
      "expression": "+0.000000001",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNegTenthStep",
      "invalid": "true",
      "expression": "-0.000000001",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1e+28",
      "expected": "10*1000000000000000000000000000.00000000-0.00000001",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "Decimal10Pow28ToZeroOneStepDecimalMaxValue",
      "invalid": "false",
      "expression": "9999999999999999999999999999.99999999"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "1e+28",
      "expected": "+10*1000000000000000000000000000.00000000-0.00000001",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPos10Pow28ToZeroOneStepDecimalMaxValue",
      "invalid": "false",
      "expression": "+9999999999999999999999999999.99999999"
    },
    {
      "testStatus": "fail",
      "responseStatus": 200,
      "actual": "-1e+28",
      "expected": "-10*1000000000000000000000000000.00000000+0.00000001",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNeg10Pow28ToZeroOneStepDecimalMinValue",
      "invalid": "false",
      "expression": "-9999999999999999999999999999.99999999"
    },
    {
      "testStatus": "skip",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "Decimal10Pow28",
      "invalid": "true",
      "expression": "10000000000000000000000000000.00000000",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalPos10Pow28",
      "invalid": "true",
      "expression": "+10000000000000000000000000000.00000000",
      "SkipMessage": "Skipped by cql-tests-runner"
    },
    {
      "testStatus": "skip",
      "testsName": "ValueLiteralsAndSelectors",
      "groupName": "Decimal",
      "testName": "DecimalNeg10Pow28",
      "invalid": "true",
      "expression": "-10000000000000000000000000000.00000000",
      "SkipMessage": "Skipped by cql-tests-runner"
    }
  ]
}